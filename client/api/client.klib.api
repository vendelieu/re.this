// Klib ABI Dump
// Targets: [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <eu.vendeli:client>
open annotation class eu.vendeli.rethis.annotations/ConfigurationDSL : kotlin/Annotation { // eu.vendeli.rethis.annotations/ConfigurationDSL|null[0]
    constructor <init>() // eu.vendeli.rethis.annotations/ConfigurationDSL.<init>|<init>(){}[0]
}

open annotation class eu.vendeli.rethis.annotations/ReThisDSL : kotlin/Annotation { // eu.vendeli.rethis.annotations/ReThisDSL|null[0]
    constructor <init>() // eu.vendeli.rethis.annotations/ReThisDSL.<init>|<init>(){}[0]
}

open annotation class eu.vendeli.rethis.annotations/ReThisInternal : kotlin/Annotation { // eu.vendeli.rethis.annotations/ReThisInternal|null[0]
    constructor <init>() // eu.vendeli.rethis.annotations/ReThisInternal.<init>|<init>(){}[0]
}

final enum class eu.vendeli.rethis.utils/ClusterEventNames : kotlin/Enum<eu.vendeli.rethis.utils/ClusterEventNames> { // eu.vendeli.rethis.utils/ClusterEventNames|null[0]
    enum entry FAILOVER_END // eu.vendeli.rethis.utils/ClusterEventNames.FAILOVER_END|null[0]
    enum entry FAILOVER_END_FOR_TIMEOUT // eu.vendeli.rethis.utils/ClusterEventNames.FAILOVER_END_FOR_TIMEOUT|null[0]
    enum entry FAILOVER_STATE_SEND_SLAVEOF_NOONE // eu.vendeli.rethis.utils/ClusterEventNames.FAILOVER_STATE_SEND_SLAVEOF_NOONE|null[0]
    enum entry MINUS_DUP_SENTINEL // eu.vendeli.rethis.utils/ClusterEventNames.MINUS_DUP_SENTINEL|null[0]
    enum entry MINUS_ODOWN // eu.vendeli.rethis.utils/ClusterEventNames.MINUS_ODOWN|null[0]
    enum entry MINUS_SDOWN // eu.vendeli.rethis.utils/ClusterEventNames.MINUS_SDOWN|null[0]
    enum entry MINUS_TILT // eu.vendeli.rethis.utils/ClusterEventNames.MINUS_TILT|null[0]
    enum entry NO_GOOD_SLAVE // eu.vendeli.rethis.utils/ClusterEventNames.NO_GOOD_SLAVE|null[0]
    enum entry PLUS_ELECTED_LEADER // eu.vendeli.rethis.utils/ClusterEventNames.PLUS_ELECTED_LEADER|null[0]
    enum entry PLUS_FAILOVER_DETECTED // eu.vendeli.rethis.utils/ClusterEventNames.PLUS_FAILOVER_DETECTED|null[0]
    enum entry PLUS_FAILOVER_STATE_RECONF_SLAVES // eu.vendeli.rethis.utils/ClusterEventNames.PLUS_FAILOVER_STATE_RECONF_SLAVES|null[0]
    enum entry PLUS_FAILOVER_STATE_SELECT_SLAVE // eu.vendeli.rethis.utils/ClusterEventNames.PLUS_FAILOVER_STATE_SELECT_SLAVE|null[0]
    enum entry PLUS_NEW_EPOCH // eu.vendeli.rethis.utils/ClusterEventNames.PLUS_NEW_EPOCH|null[0]
    enum entry PLUS_ODOWN // eu.vendeli.rethis.utils/ClusterEventNames.PLUS_ODOWN|null[0]
    enum entry PLUS_RESET_MASTER // eu.vendeli.rethis.utils/ClusterEventNames.PLUS_RESET_MASTER|null[0]
    enum entry PLUS_SDOWN // eu.vendeli.rethis.utils/ClusterEventNames.PLUS_SDOWN|null[0]
    enum entry PLUS_SENTINEL // eu.vendeli.rethis.utils/ClusterEventNames.PLUS_SENTINEL|null[0]
    enum entry PLUS_SLAVE // eu.vendeli.rethis.utils/ClusterEventNames.PLUS_SLAVE|null[0]
    enum entry PLUS_SLAVE_RECONF_DONE // eu.vendeli.rethis.utils/ClusterEventNames.PLUS_SLAVE_RECONF_DONE|null[0]
    enum entry PLUS_SLAVE_RECONF_INPROG // eu.vendeli.rethis.utils/ClusterEventNames.PLUS_SLAVE_RECONF_INPROG|null[0]
    enum entry PLUS_SLAVE_RECONF_SENT // eu.vendeli.rethis.utils/ClusterEventNames.PLUS_SLAVE_RECONF_SENT|null[0]
    enum entry PLUS_TILT // eu.vendeli.rethis.utils/ClusterEventNames.PLUS_TILT|null[0]
    enum entry PLUS_TRY_FAILOVER // eu.vendeli.rethis.utils/ClusterEventNames.PLUS_TRY_FAILOVER|null[0]
    enum entry SELECTED_SLAVE // eu.vendeli.rethis.utils/ClusterEventNames.SELECTED_SLAVE|null[0]
    enum entry SWITCH_MASTER // eu.vendeli.rethis.utils/ClusterEventNames.SWITCH_MASTER|null[0]

    final val entries // eu.vendeli.rethis.utils/ClusterEventNames.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<eu.vendeli.rethis.utils/ClusterEventNames> // eu.vendeli.rethis.utils/ClusterEventNames.entries.<get-entries>|<get-entries>#static(){}[0]
    final val literal // eu.vendeli.rethis.utils/ClusterEventNames.literal|{}literal[0]
        final fun <get-literal>(): kotlin/String // eu.vendeli.rethis.utils/ClusterEventNames.literal.<get-literal>|<get-literal>(){}[0]

    final fun valueOf(kotlin/String): eu.vendeli.rethis.utils/ClusterEventNames // eu.vendeli.rethis.utils/ClusterEventNames.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<eu.vendeli.rethis.utils/ClusterEventNames> // eu.vendeli.rethis.utils/ClusterEventNames.values|values#static(){}[0]
}

abstract fun interface eu.vendeli.rethis.types.common/LoggerFactory { // eu.vendeli.rethis.types.common/LoggerFactory|null[0]
    abstract fun get(kotlin/String): io.ktor.util.logging/Logger // eu.vendeli.rethis.types.common/LoggerFactory.get|get(kotlin.String){}[0]
}

abstract fun interface eu.vendeli.rethis.types.interfaces/SubscriptionHandler { // eu.vendeli.rethis.types.interfaces/SubscriptionHandler|null[0]
    abstract suspend fun onMessage(eu.vendeli.rethis/ReThis, kotlin/String) // eu.vendeli.rethis.types.interfaces/SubscriptionHandler.onMessage|onMessage(eu.vendeli.rethis.ReThis;kotlin.String){}[0]
}

abstract interface eu.vendeli.rethis.providers/ConnectionProviderFactory { // eu.vendeli.rethis.providers/ConnectionProviderFactory|null[0]
    abstract fun create(eu.vendeli.rethis.types.common/Address): eu.vendeli.rethis.providers/ConnectionProvider // eu.vendeli.rethis.providers/ConnectionProviderFactory.create|create(eu.vendeli.rethis.types.common.Address){}[0]
    open fun createAll(kotlin.collections/Collection<eu.vendeli.rethis.types.common/Address>): kotlin.collections/Map<eu.vendeli.rethis.types.common/Address, eu.vendeli.rethis.providers/ConnectionProvider> // eu.vendeli.rethis.providers/ConnectionProviderFactory.createAll|createAll(kotlin.collections.Collection<eu.vendeli.rethis.types.common.Address>){}[0]
}

abstract interface eu.vendeli.rethis.types.interfaces/SubscriptionEventHandler { // eu.vendeli.rethis.types.interfaces/SubscriptionEventHandler|null[0]
    abstract suspend fun onException(kotlin/String, kotlin/Exception) // eu.vendeli.rethis.types.interfaces/SubscriptionEventHandler.onException|onException(kotlin.String;kotlin.Exception){}[0]
    abstract suspend fun onSubscribe(kotlin/String, kotlin/Long) // eu.vendeli.rethis.types.interfaces/SubscriptionEventHandler.onSubscribe|onSubscribe(kotlin.String;kotlin.Long){}[0]
    abstract suspend fun onUnsubscribe(kotlin/String, kotlin/Long) // eu.vendeli.rethis.types.interfaces/SubscriptionEventHandler.onUnsubscribe|onUnsubscribe(kotlin.String;kotlin.Long){}[0]
}

sealed interface eu.vendeli.rethis.types.common/ReadFromStrategy { // eu.vendeli.rethis.types.common/ReadFromStrategy|null[0]
    abstract fun pick(eu.vendeli.rethis.shared.types/CommandRequest, eu.vendeli.rethis.types.common/Snapshot): eu.vendeli.rethis.providers/ConnectionProvider // eu.vendeli.rethis.types.common/ReadFromStrategy.pick|pick(eu.vendeli.rethis.shared.types.CommandRequest;eu.vendeli.rethis.types.common.Snapshot){}[0]
}

abstract class eu.vendeli.rethis.providers/ConnectionProvider { // eu.vendeli.rethis.providers/ConnectionProvider|null[0]
    constructor <init>() // eu.vendeli.rethis.providers/ConnectionProvider.<init>|<init>(){}[0]

    abstract val node // eu.vendeli.rethis.providers/ConnectionProvider.node|{}node[0]
        abstract fun <get-node>(): eu.vendeli.rethis.types.common/Address // eu.vendeli.rethis.providers/ConnectionProvider.node.<get-node>|<get-node>(){}[0]

    abstract fun close() // eu.vendeli.rethis.providers/ConnectionProvider.close|close(){}[0]
    abstract fun hasSpareConnection(): kotlin/Boolean // eu.vendeli.rethis.providers/ConnectionProvider.hasSpareConnection|hasSpareConnection(){}[0]
    abstract suspend fun borrowConnection(): eu.vendeli.rethis.types.common/RConnection // eu.vendeli.rethis.providers/ConnectionProvider.borrowConnection|borrowConnection(){}[0]
    abstract suspend fun execute(eu.vendeli.rethis.shared.types/CommandRequest): kotlinx.io/Buffer // eu.vendeli.rethis.providers/ConnectionProvider.execute|execute(eu.vendeli.rethis.shared.types.CommandRequest){}[0]
    abstract suspend fun releaseConnection(eu.vendeli.rethis.types.common/RConnection) // eu.vendeli.rethis.providers/ConnectionProvider.releaseConnection|releaseConnection(eu.vendeli.rethis.types.common.RConnection){}[0]
    open fun equals(kotlin/Any?): kotlin/Boolean // eu.vendeli.rethis.providers/ConnectionProvider.equals|equals(kotlin.Any?){}[0]
    open fun hashCode(): kotlin/Int // eu.vendeli.rethis.providers/ConnectionProvider.hashCode|hashCode(){}[0]
}

final class eu.vendeli.rethis.configuration/ClusterConfiguration : eu.vendeli.rethis.configuration/ReThisConfiguration { // eu.vendeli.rethis.configuration/ClusterConfiguration|null[0]
    constructor <init>(eu.vendeli.rethis.types.common/RespVer) // eu.vendeli.rethis.configuration/ClusterConfiguration.<init>|<init>(eu.vendeli.rethis.types.common.RespVer){}[0]

    final var movedBackoffPeriod // eu.vendeli.rethis.configuration/ClusterConfiguration.movedBackoffPeriod|{}movedBackoffPeriod[0]
        final fun <get-movedBackoffPeriod>(): kotlin.time/Duration // eu.vendeli.rethis.configuration/ClusterConfiguration.movedBackoffPeriod.<get-movedBackoffPeriod>|<get-movedBackoffPeriod>(){}[0]
        final fun <set-movedBackoffPeriod>(kotlin.time/Duration) // eu.vendeli.rethis.configuration/ClusterConfiguration.movedBackoffPeriod.<set-movedBackoffPeriod>|<set-movedBackoffPeriod>(kotlin.time.Duration){}[0]
    final var periodicRefresh // eu.vendeli.rethis.configuration/ClusterConfiguration.periodicRefresh|{}periodicRefresh[0]
        final fun <get-periodicRefresh>(): kotlin/Boolean // eu.vendeli.rethis.configuration/ClusterConfiguration.periodicRefresh.<get-periodicRefresh>|<get-periodicRefresh>(){}[0]
        final fun <set-periodicRefresh>(kotlin/Boolean) // eu.vendeli.rethis.configuration/ClusterConfiguration.periodicRefresh.<set-periodicRefresh>|<set-periodicRefresh>(kotlin.Boolean){}[0]
    final var periodicRefreshInterval // eu.vendeli.rethis.configuration/ClusterConfiguration.periodicRefreshInterval|{}periodicRefreshInterval[0]
        final fun <get-periodicRefreshInterval>(): kotlin.time/Duration // eu.vendeli.rethis.configuration/ClusterConfiguration.periodicRefreshInterval.<get-periodicRefreshInterval>|<get-periodicRefreshInterval>(){}[0]
        final fun <set-periodicRefreshInterval>(kotlin.time/Duration) // eu.vendeli.rethis.configuration/ClusterConfiguration.periodicRefreshInterval.<set-periodicRefreshInterval>|<set-periodicRefreshInterval>(kotlin.time.Duration){}[0]
}

final class eu.vendeli.rethis.configuration/PoolConfiguration { // eu.vendeli.rethis.configuration/PoolConfiguration|null[0]
    constructor <init>(kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Double = ..., kotlin/Int = ..., kotlin.time/Duration = ..., kotlin.time/Duration = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ...) // eu.vendeli.rethis.configuration/PoolConfiguration.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Double;kotlin.Int;kotlin.time.Duration;kotlin.time.Duration;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]

    final var checkInterval // eu.vendeli.rethis.configuration/PoolConfiguration.checkInterval|{}checkInterval[0]
        final fun <get-checkInterval>(): kotlin.time/Duration // eu.vendeli.rethis.configuration/PoolConfiguration.checkInterval.<get-checkInterval>|<get-checkInterval>(){}[0]
        final fun <set-checkInterval>(kotlin.time/Duration) // eu.vendeli.rethis.configuration/PoolConfiguration.checkInterval.<set-checkInterval>|<set-checkInterval>(kotlin.time.Duration){}[0]
    final var closeGracefully // eu.vendeli.rethis.configuration/PoolConfiguration.closeGracefully|{}closeGracefully[0]
        final fun <get-closeGracefully>(): kotlin/Boolean // eu.vendeli.rethis.configuration/PoolConfiguration.closeGracefully.<get-closeGracefully>|<get-closeGracefully>(){}[0]
        final fun <set-closeGracefully>(kotlin/Boolean) // eu.vendeli.rethis.configuration/PoolConfiguration.closeGracefully.<set-closeGracefully>|<set-closeGracefully>(kotlin.Boolean){}[0]
    final var connectionHealthCheck // eu.vendeli.rethis.configuration/PoolConfiguration.connectionHealthCheck|{}connectionHealthCheck[0]
        final fun <get-connectionHealthCheck>(): kotlin/Boolean // eu.vendeli.rethis.configuration/PoolConfiguration.connectionHealthCheck.<get-connectionHealthCheck>|<get-connectionHealthCheck>(){}[0]
        final fun <set-connectionHealthCheck>(kotlin/Boolean) // eu.vendeli.rethis.configuration/PoolConfiguration.connectionHealthCheck.<set-connectionHealthCheck>|<set-connectionHealthCheck>(kotlin.Boolean){}[0]
    final var gracefulClosePeriod // eu.vendeli.rethis.configuration/PoolConfiguration.gracefulClosePeriod|{}gracefulClosePeriod[0]
        final fun <get-gracefulClosePeriod>(): kotlin.time/Duration // eu.vendeli.rethis.configuration/PoolConfiguration.gracefulClosePeriod.<get-gracefulClosePeriod>|<get-gracefulClosePeriod>(){}[0]
        final fun <set-gracefulClosePeriod>(kotlin.time/Duration) // eu.vendeli.rethis.configuration/PoolConfiguration.gracefulClosePeriod.<set-gracefulClosePeriod>|<set-gracefulClosePeriod>(kotlin.time.Duration){}[0]
    final var maxIdleConnections // eu.vendeli.rethis.configuration/PoolConfiguration.maxIdleConnections|{}maxIdleConnections[0]
        final fun <get-maxIdleConnections>(): kotlin/Int // eu.vendeli.rethis.configuration/PoolConfiguration.maxIdleConnections.<get-maxIdleConnections>|<get-maxIdleConnections>(){}[0]
        final fun <set-maxIdleConnections>(kotlin/Int) // eu.vendeli.rethis.configuration/PoolConfiguration.maxIdleConnections.<set-maxIdleConnections>|<set-maxIdleConnections>(kotlin.Int){}[0]
    final var maxPendingConnections // eu.vendeli.rethis.configuration/PoolConfiguration.maxPendingConnections|{}maxPendingConnections[0]
        final fun <get-maxPendingConnections>(): kotlin/Int // eu.vendeli.rethis.configuration/PoolConfiguration.maxPendingConnections.<get-maxPendingConnections>|<get-maxPendingConnections>(){}[0]
        final fun <set-maxPendingConnections>(kotlin/Int) // eu.vendeli.rethis.configuration/PoolConfiguration.maxPendingConnections.<set-maxPendingConnections>|<set-maxPendingConnections>(kotlin.Int){}[0]
    final var maxShrinkSize // eu.vendeli.rethis.configuration/PoolConfiguration.maxShrinkSize|{}maxShrinkSize[0]
        final fun <get-maxShrinkSize>(): kotlin/Int // eu.vendeli.rethis.configuration/PoolConfiguration.maxShrinkSize.<get-maxShrinkSize>|<get-maxShrinkSize>(){}[0]
        final fun <set-maxShrinkSize>(kotlin/Int) // eu.vendeli.rethis.configuration/PoolConfiguration.maxShrinkSize.<set-maxShrinkSize>|<set-maxShrinkSize>(kotlin.Int){}[0]
    final var minIdleConnections // eu.vendeli.rethis.configuration/PoolConfiguration.minIdleConnections|{}minIdleConnections[0]
        final fun <get-minIdleConnections>(): kotlin/Int // eu.vendeli.rethis.configuration/PoolConfiguration.minIdleConnections.<get-minIdleConnections>|<get-minIdleConnections>(){}[0]
        final fun <set-minIdleConnections>(kotlin/Int) // eu.vendeli.rethis.configuration/PoolConfiguration.minIdleConnections.<set-minIdleConnections>|<set-minIdleConnections>(kotlin.Int){}[0]
    final var setClientName // eu.vendeli.rethis.configuration/PoolConfiguration.setClientName|{}setClientName[0]
        final fun <get-setClientName>(): kotlin/Boolean // eu.vendeli.rethis.configuration/PoolConfiguration.setClientName.<get-setClientName>|<get-setClientName>(){}[0]
        final fun <set-setClientName>(kotlin/Boolean) // eu.vendeli.rethis.configuration/PoolConfiguration.setClientName.<set-setClientName>|<set-setClientName>(kotlin.Boolean){}[0]
    final var shrinkRatio // eu.vendeli.rethis.configuration/PoolConfiguration.shrinkRatio|{}shrinkRatio[0]
        final fun <get-shrinkRatio>(): kotlin/Double // eu.vendeli.rethis.configuration/PoolConfiguration.shrinkRatio.<get-shrinkRatio>|<get-shrinkRatio>(){}[0]
        final fun <set-shrinkRatio>(kotlin/Double) // eu.vendeli.rethis.configuration/PoolConfiguration.shrinkRatio.<set-shrinkRatio>|<set-shrinkRatio>(kotlin.Double){}[0]

    final fun component1(): kotlin/Int // eu.vendeli.rethis.configuration/PoolConfiguration.component1|component1(){}[0]
    final fun component10(): kotlin/Boolean // eu.vendeli.rethis.configuration/PoolConfiguration.component10|component10(){}[0]
    final fun component2(): kotlin/Int // eu.vendeli.rethis.configuration/PoolConfiguration.component2|component2(){}[0]
    final fun component3(): kotlin/Int // eu.vendeli.rethis.configuration/PoolConfiguration.component3|component3(){}[0]
    final fun component4(): kotlin/Double // eu.vendeli.rethis.configuration/PoolConfiguration.component4|component4(){}[0]
    final fun component5(): kotlin/Int // eu.vendeli.rethis.configuration/PoolConfiguration.component5|component5(){}[0]
    final fun component6(): kotlin.time/Duration // eu.vendeli.rethis.configuration/PoolConfiguration.component6|component6(){}[0]
    final fun component7(): kotlin.time/Duration // eu.vendeli.rethis.configuration/PoolConfiguration.component7|component7(){}[0]
    final fun component8(): kotlin/Boolean // eu.vendeli.rethis.configuration/PoolConfiguration.component8|component8(){}[0]
    final fun component9(): kotlin/Boolean // eu.vendeli.rethis.configuration/PoolConfiguration.component9|component9(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Double = ..., kotlin/Int = ..., kotlin.time/Duration = ..., kotlin.time/Duration = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ...): eu.vendeli.rethis.configuration/PoolConfiguration // eu.vendeli.rethis.configuration/PoolConfiguration.copy|copy(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Double;kotlin.Int;kotlin.time.Duration;kotlin.time.Duration;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // eu.vendeli.rethis.configuration/PoolConfiguration.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // eu.vendeli.rethis.configuration/PoolConfiguration.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // eu.vendeli.rethis.configuration/PoolConfiguration.toString|toString(){}[0]
}

final class eu.vendeli.rethis.configuration/RetryConfiguration { // eu.vendeli.rethis.configuration/RetryConfiguration|null[0]
    constructor <init>(kotlin/Int = ..., kotlin.time/Duration = ..., kotlin.time/Duration = ..., kotlin/Double = ...) // eu.vendeli.rethis.configuration/RetryConfiguration.<init>|<init>(kotlin.Int;kotlin.time.Duration;kotlin.time.Duration;kotlin.Double){}[0]

    final var factor // eu.vendeli.rethis.configuration/RetryConfiguration.factor|{}factor[0]
        final fun <get-factor>(): kotlin/Double // eu.vendeli.rethis.configuration/RetryConfiguration.factor.<get-factor>|<get-factor>(){}[0]
        final fun <set-factor>(kotlin/Double) // eu.vendeli.rethis.configuration/RetryConfiguration.factor.<set-factor>|<set-factor>(kotlin.Double){}[0]
    final var initialDelay // eu.vendeli.rethis.configuration/RetryConfiguration.initialDelay|{}initialDelay[0]
        final fun <get-initialDelay>(): kotlin.time/Duration // eu.vendeli.rethis.configuration/RetryConfiguration.initialDelay.<get-initialDelay>|<get-initialDelay>(){}[0]
        final fun <set-initialDelay>(kotlin.time/Duration) // eu.vendeli.rethis.configuration/RetryConfiguration.initialDelay.<set-initialDelay>|<set-initialDelay>(kotlin.time.Duration){}[0]
    final var maxDelay // eu.vendeli.rethis.configuration/RetryConfiguration.maxDelay|{}maxDelay[0]
        final fun <get-maxDelay>(): kotlin.time/Duration // eu.vendeli.rethis.configuration/RetryConfiguration.maxDelay.<get-maxDelay>|<get-maxDelay>(){}[0]
        final fun <set-maxDelay>(kotlin.time/Duration) // eu.vendeli.rethis.configuration/RetryConfiguration.maxDelay.<set-maxDelay>|<set-maxDelay>(kotlin.time.Duration){}[0]
    final var times // eu.vendeli.rethis.configuration/RetryConfiguration.times|{}times[0]
        final fun <get-times>(): kotlin/Int // eu.vendeli.rethis.configuration/RetryConfiguration.times.<get-times>|<get-times>(){}[0]
        final fun <set-times>(kotlin/Int) // eu.vendeli.rethis.configuration/RetryConfiguration.times.<set-times>|<set-times>(kotlin.Int){}[0]

    final fun component1(): kotlin/Int // eu.vendeli.rethis.configuration/RetryConfiguration.component1|component1(){}[0]
    final fun component2(): kotlin.time/Duration // eu.vendeli.rethis.configuration/RetryConfiguration.component2|component2(){}[0]
    final fun component3(): kotlin.time/Duration // eu.vendeli.rethis.configuration/RetryConfiguration.component3|component3(){}[0]
    final fun component4(): kotlin/Double // eu.vendeli.rethis.configuration/RetryConfiguration.component4|component4(){}[0]
    final fun copy(kotlin/Int = ..., kotlin.time/Duration = ..., kotlin.time/Duration = ..., kotlin/Double = ...): eu.vendeli.rethis.configuration/RetryConfiguration // eu.vendeli.rethis.configuration/RetryConfiguration.copy|copy(kotlin.Int;kotlin.time.Duration;kotlin.time.Duration;kotlin.Double){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // eu.vendeli.rethis.configuration/RetryConfiguration.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // eu.vendeli.rethis.configuration/RetryConfiguration.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // eu.vendeli.rethis.configuration/RetryConfiguration.toString|toString(){}[0]
}

final class eu.vendeli.rethis.configuration/SentinelConfiguration : eu.vendeli.rethis.configuration/ReThisConfiguration { // eu.vendeli.rethis.configuration/SentinelConfiguration|null[0]
    constructor <init>(eu.vendeli.rethis.types.common/RespVer) // eu.vendeli.rethis.configuration/SentinelConfiguration.<init>|<init>(eu.vendeli.rethis.types.common.RespVer){}[0]

    final var periodicRefresh // eu.vendeli.rethis.configuration/SentinelConfiguration.periodicRefresh|{}periodicRefresh[0]
        final fun <get-periodicRefresh>(): kotlin/Boolean // eu.vendeli.rethis.configuration/SentinelConfiguration.periodicRefresh.<get-periodicRefresh>|<get-periodicRefresh>(){}[0]
        final fun <set-periodicRefresh>(kotlin/Boolean) // eu.vendeli.rethis.configuration/SentinelConfiguration.periodicRefresh.<set-periodicRefresh>|<set-periodicRefresh>(kotlin.Boolean){}[0]
    final var periodicRefreshInterval // eu.vendeli.rethis.configuration/SentinelConfiguration.periodicRefreshInterval|{}periodicRefreshInterval[0]
        final fun <get-periodicRefreshInterval>(): kotlin.time/Duration // eu.vendeli.rethis.configuration/SentinelConfiguration.periodicRefreshInterval.<get-periodicRefreshInterval>|<get-periodicRefreshInterval>(){}[0]
        final fun <set-periodicRefreshInterval>(kotlin.time/Duration) // eu.vendeli.rethis.configuration/SentinelConfiguration.periodicRefreshInterval.<set-periodicRefreshInterval>|<set-periodicRefreshInterval>(kotlin.time.Duration){}[0]
}

final class eu.vendeli.rethis.configuration/SocketConfiguration { // eu.vendeli.rethis.configuration/SocketConfiguration|null[0]
    constructor <init>(kotlin/Long? = ..., kotlin/Int? = ..., kotlin/Boolean = ..., kotlin/Boolean = ...) // eu.vendeli.rethis.configuration/SocketConfiguration.<init>|<init>(kotlin.Long?;kotlin.Int?;kotlin.Boolean;kotlin.Boolean){}[0]

    final var keepAlive // eu.vendeli.rethis.configuration/SocketConfiguration.keepAlive|{}keepAlive[0]
        final fun <get-keepAlive>(): kotlin/Boolean // eu.vendeli.rethis.configuration/SocketConfiguration.keepAlive.<get-keepAlive>|<get-keepAlive>(){}[0]
        final fun <set-keepAlive>(kotlin/Boolean) // eu.vendeli.rethis.configuration/SocketConfiguration.keepAlive.<set-keepAlive>|<set-keepAlive>(kotlin.Boolean){}[0]
    final var linger // eu.vendeli.rethis.configuration/SocketConfiguration.linger|{}linger[0]
        final fun <get-linger>(): kotlin/Int? // eu.vendeli.rethis.configuration/SocketConfiguration.linger.<get-linger>|<get-linger>(){}[0]
        final fun <set-linger>(kotlin/Int?) // eu.vendeli.rethis.configuration/SocketConfiguration.linger.<set-linger>|<set-linger>(kotlin.Int?){}[0]
    final var noDelay // eu.vendeli.rethis.configuration/SocketConfiguration.noDelay|{}noDelay[0]
        final fun <get-noDelay>(): kotlin/Boolean // eu.vendeli.rethis.configuration/SocketConfiguration.noDelay.<get-noDelay>|<get-noDelay>(){}[0]
        final fun <set-noDelay>(kotlin/Boolean) // eu.vendeli.rethis.configuration/SocketConfiguration.noDelay.<set-noDelay>|<set-noDelay>(kotlin.Boolean){}[0]
    final var timeout // eu.vendeli.rethis.configuration/SocketConfiguration.timeout|{}timeout[0]
        final fun <get-timeout>(): kotlin/Long? // eu.vendeli.rethis.configuration/SocketConfiguration.timeout.<get-timeout>|<get-timeout>(){}[0]
        final fun <set-timeout>(kotlin/Long?) // eu.vendeli.rethis.configuration/SocketConfiguration.timeout.<set-timeout>|<set-timeout>(kotlin.Long?){}[0]

    final fun component1(): kotlin/Long? // eu.vendeli.rethis.configuration/SocketConfiguration.component1|component1(){}[0]
    final fun component2(): kotlin/Int? // eu.vendeli.rethis.configuration/SocketConfiguration.component2|component2(){}[0]
    final fun component3(): kotlin/Boolean // eu.vendeli.rethis.configuration/SocketConfiguration.component3|component3(){}[0]
    final fun component4(): kotlin/Boolean // eu.vendeli.rethis.configuration/SocketConfiguration.component4|component4(){}[0]
    final fun copy(kotlin/Long? = ..., kotlin/Int? = ..., kotlin/Boolean = ..., kotlin/Boolean = ...): eu.vendeli.rethis.configuration/SocketConfiguration // eu.vendeli.rethis.configuration/SocketConfiguration.copy|copy(kotlin.Long?;kotlin.Int?;kotlin.Boolean;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // eu.vendeli.rethis.configuration/SocketConfiguration.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // eu.vendeli.rethis.configuration/SocketConfiguration.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // eu.vendeli.rethis.configuration/SocketConfiguration.toString|toString(){}[0]
}

final class eu.vendeli.rethis.configuration/StandaloneConfiguration : eu.vendeli.rethis.configuration/ReThisConfiguration { // eu.vendeli.rethis.configuration/StandaloneConfiguration|null[0]
    constructor <init>(eu.vendeli.rethis.types.common/RespVer) // eu.vendeli.rethis.configuration/StandaloneConfiguration.<init>|<init>(eu.vendeli.rethis.types.common.RespVer){}[0]
}

final class eu.vendeli.rethis.core/SubscriptionManager { // eu.vendeli.rethis.core/SubscriptionManager|null[0]
    constructor <init>() // eu.vendeli.rethis.core/SubscriptionManager.<init>|<init>(){}[0]

    final val size // eu.vendeli.rethis.core/SubscriptionManager.size|{}size[0]
        final fun <get-size>(): kotlin/Int // eu.vendeli.rethis.core/SubscriptionManager.size.<get-size>|<get-size>(){}[0]

    final fun registerSubscription(kotlin/String, eu.vendeli.rethis.types.common/Subscription) // eu.vendeli.rethis.core/SubscriptionManager.registerSubscription|registerSubscription(kotlin.String;eu.vendeli.rethis.types.common.Subscription){}[0]
    final fun setEventHandler(eu.vendeli.rethis.types.interfaces/SubscriptionEventHandler) // eu.vendeli.rethis.core/SubscriptionManager.setEventHandler|setEventHandler(eu.vendeli.rethis.types.interfaces.SubscriptionEventHandler){}[0]
    final fun unsubscribe(kotlin/String): kotlin/Boolean // eu.vendeli.rethis.core/SubscriptionManager.unsubscribe|unsubscribe(kotlin.String){}[0]
    final fun unsubscribeAll(): kotlin/Boolean // eu.vendeli.rethis.core/SubscriptionManager.unsubscribeAll|unsubscribeAll(){}[0]
}

final class eu.vendeli.rethis.providers/DefaultConnectionProviderFactory : eu.vendeli.rethis.providers/ConnectionProviderFactory { // eu.vendeli.rethis.providers/DefaultConnectionProviderFactory|null[0]
    constructor <init>(eu.vendeli.rethis/ReThis) // eu.vendeli.rethis.providers/DefaultConnectionProviderFactory.<init>|<init>(eu.vendeli.rethis.ReThis){}[0]

    final fun create(eu.vendeli.rethis.types.common/Address): eu.vendeli.rethis.providers/ConnectionProvider // eu.vendeli.rethis.providers/DefaultConnectionProviderFactory.create|create(eu.vendeli.rethis.types.common.Address){}[0]
}

final class eu.vendeli.rethis.topology/ClusterTopologyManager : eu.vendeli.rethis.topology/TopologyManager { // eu.vendeli.rethis.topology/ClusterTopologyManager|null[0]
    constructor <init>(kotlin.collections/List<eu.vendeli.rethis.types.common/Address>, eu.vendeli.rethis/ReThis, eu.vendeli.rethis.configuration/ClusterConfiguration) // eu.vendeli.rethis.topology/ClusterTopologyManager.<init>|<init>(kotlin.collections.List<eu.vendeli.rethis.types.common.Address>;eu.vendeli.rethis.ReThis;eu.vendeli.rethis.configuration.ClusterConfiguration){}[0]

    final val cfg // eu.vendeli.rethis.topology/ClusterTopologyManager.cfg|{}cfg[0]
        final fun <get-cfg>(): eu.vendeli.rethis.configuration/ClusterConfiguration // eu.vendeli.rethis.topology/ClusterTopologyManager.cfg.<get-cfg>|<get-cfg>(){}[0]

    final fun close() // eu.vendeli.rethis.topology/ClusterTopologyManager.close|close(){}[0]
    final suspend fun handleFailure(eu.vendeli.rethis.shared.types/CommandRequest, kotlin/Throwable): kotlinx.io/Buffer // eu.vendeli.rethis.topology/ClusterTopologyManager.handleFailure|handleFailure(eu.vendeli.rethis.shared.types.CommandRequest;kotlin.Throwable){}[0]
    final suspend fun route(eu.vendeli.rethis.shared.types/CommandRequest): eu.vendeli.rethis.providers/ConnectionProvider // eu.vendeli.rethis.topology/ClusterTopologyManager.route|route(eu.vendeli.rethis.shared.types.CommandRequest){}[0]
}

final class eu.vendeli.rethis.topology/SentinelTopologyManager : eu.vendeli.rethis.topology/TopologyManager { // eu.vendeli.rethis.topology/SentinelTopologyManager|null[0]
    constructor <init>(kotlin/String, kotlin.collections/List<eu.vendeli.rethis.types.common/Address>, eu.vendeli.rethis/ReThis, eu.vendeli.rethis.configuration/SentinelConfiguration) // eu.vendeli.rethis.topology/SentinelTopologyManager.<init>|<init>(kotlin.String;kotlin.collections.List<eu.vendeli.rethis.types.common.Address>;eu.vendeli.rethis.ReThis;eu.vendeli.rethis.configuration.SentinelConfiguration){}[0]

    final val cfg // eu.vendeli.rethis.topology/SentinelTopologyManager.cfg|{}cfg[0]
        final fun <get-cfg>(): eu.vendeli.rethis.configuration/SentinelConfiguration // eu.vendeli.rethis.topology/SentinelTopologyManager.cfg.<get-cfg>|<get-cfg>(){}[0]

    final fun close() // eu.vendeli.rethis.topology/SentinelTopologyManager.close|close(){}[0]
    final suspend fun route(eu.vendeli.rethis.shared.types/CommandRequest): eu.vendeli.rethis.providers/ConnectionProvider // eu.vendeli.rethis.topology/SentinelTopologyManager.route|route(eu.vendeli.rethis.shared.types.CommandRequest){}[0]
}

final class eu.vendeli.rethis.types.common/ClusterSnapshot : eu.vendeli.rethis.types.common/Snapshot { // eu.vendeli.rethis.types.common/ClusterSnapshot|null[0]
    constructor <init>(kotlin/IntArray, kotlin/Array<kotlin/IntArray>, kotlin/Array<eu.vendeli.rethis.providers/ConnectionProvider>) // eu.vendeli.rethis.types.common/ClusterSnapshot.<init>|<init>(kotlin.IntArray;kotlin.Array<kotlin.IntArray>;kotlin.Array<eu.vendeli.rethis.providers.ConnectionProvider>){}[0]

    final val providers // eu.vendeli.rethis.types.common/ClusterSnapshot.providers|{}providers[0]
        final fun <get-providers>(): kotlin/Array<eu.vendeli.rethis.providers/ConnectionProvider> // eu.vendeli.rethis.types.common/ClusterSnapshot.providers.<get-providers>|<get-providers>(){}[0]
    final val replicaIndices // eu.vendeli.rethis.types.common/ClusterSnapshot.replicaIndices|{}replicaIndices[0]
        final fun <get-replicaIndices>(): kotlin/Array<kotlin/IntArray> // eu.vendeli.rethis.types.common/ClusterSnapshot.replicaIndices.<get-replicaIndices>|<get-replicaIndices>(){}[0]
    final val slotOwner // eu.vendeli.rethis.types.common/ClusterSnapshot.slotOwner|{}slotOwner[0]
        final fun <get-slotOwner>(): kotlin/IntArray // eu.vendeli.rethis.types.common/ClusterSnapshot.slotOwner.<get-slotOwner>|<get-slotOwner>(){}[0]
}

final class eu.vendeli.rethis.types.common/RConnection { // eu.vendeli.rethis.types.common/RConnection|null[0]
    constructor <init>(io.ktor.network.sockets/Socket, io.ktor.utils.io/ByteReadChannel, io.ktor.utils.io/ByteWriteChannel) // eu.vendeli.rethis.types.common/RConnection.<init>|<init>(io.ktor.network.sockets.Socket;io.ktor.utils.io.ByteReadChannel;io.ktor.utils.io.ByteWriteChannel){}[0]

    final val input // eu.vendeli.rethis.types.common/RConnection.input|{}input[0]
        final fun <get-input>(): io.ktor.utils.io/ByteReadChannel // eu.vendeli.rethis.types.common/RConnection.input.<get-input>|<get-input>(){}[0]
    final val output // eu.vendeli.rethis.types.common/RConnection.output|{}output[0]
        final fun <get-output>(): io.ktor.utils.io/ByteWriteChannel // eu.vendeli.rethis.types.common/RConnection.output.<get-output>|<get-output>(){}[0]
    final val socket // eu.vendeli.rethis.types.common/RConnection.socket|{}socket[0]
        final fun <get-socket>(): io.ktor.network.sockets/Socket // eu.vendeli.rethis.types.common/RConnection.socket.<get-socket>|<get-socket>(){}[0]

    final fun component1(): io.ktor.network.sockets/Socket // eu.vendeli.rethis.types.common/RConnection.component1|component1(){}[0]
    final fun component2(): io.ktor.utils.io/ByteReadChannel // eu.vendeli.rethis.types.common/RConnection.component2|component2(){}[0]
    final fun component3(): io.ktor.utils.io/ByteWriteChannel // eu.vendeli.rethis.types.common/RConnection.component3|component3(){}[0]
    final fun copy(io.ktor.network.sockets/Socket = ..., io.ktor.utils.io/ByteReadChannel = ..., io.ktor.utils.io/ByteWriteChannel = ...): eu.vendeli.rethis.types.common/RConnection // eu.vendeli.rethis.types.common/RConnection.copy|copy(io.ktor.network.sockets.Socket;io.ktor.utils.io.ByteReadChannel;io.ktor.utils.io.ByteWriteChannel){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // eu.vendeli.rethis.types.common/RConnection.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // eu.vendeli.rethis.types.common/RConnection.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // eu.vendeli.rethis.types.common/RConnection.toString|toString(){}[0]
    final suspend fun doBatchRequest(kotlin.collections/List<kotlinx.io/Buffer>): kotlinx.io/Buffer // eu.vendeli.rethis.types.common/RConnection.doBatchRequest|doBatchRequest(kotlin.collections.List<kotlinx.io.Buffer>){}[0]
    final suspend fun doRequest(kotlinx.io/Buffer): kotlinx.io/Buffer // eu.vendeli.rethis.types.common/RConnection.doRequest|doRequest(kotlinx.io.Buffer){}[0]
}

final class eu.vendeli.rethis.types.common/SentinelSnapshot : eu.vendeli.rethis.types.common/Snapshot { // eu.vendeli.rethis.types.common/SentinelSnapshot|null[0]
    constructor <init>(kotlin/Int, kotlin/Array<eu.vendeli.rethis.providers/ConnectionProvider>) // eu.vendeli.rethis.types.common/SentinelSnapshot.<init>|<init>(kotlin.Int;kotlin.Array<eu.vendeli.rethis.providers.ConnectionProvider>){}[0]

    final val masterIdx // eu.vendeli.rethis.types.common/SentinelSnapshot.masterIdx|{}masterIdx[0]
        final fun <get-masterIdx>(): kotlin/Int // eu.vendeli.rethis.types.common/SentinelSnapshot.masterIdx.<get-masterIdx>|<get-masterIdx>(){}[0]
    final val providers // eu.vendeli.rethis.types.common/SentinelSnapshot.providers|{}providers[0]
        final fun <get-providers>(): kotlin/Array<eu.vendeli.rethis.providers/ConnectionProvider> // eu.vendeli.rethis.types.common/SentinelSnapshot.providers.<get-providers>|<get-providers>(){}[0]
}

final class eu.vendeli.rethis.types.common/Subscription { // eu.vendeli.rethis.types.common/Subscription|null[0]
    constructor <init>(eu.vendeli.rethis.types.common/SubscriptionType, eu.vendeli.rethis.types.interfaces/SubscriptionHandler) // eu.vendeli.rethis.types.common/Subscription.<init>|<init>(eu.vendeli.rethis.types.common.SubscriptionType;eu.vendeli.rethis.types.interfaces.SubscriptionHandler){}[0]

    final val handler // eu.vendeli.rethis.types.common/Subscription.handler|{}handler[0]
        final fun <get-handler>(): eu.vendeli.rethis.types.interfaces/SubscriptionHandler // eu.vendeli.rethis.types.common/Subscription.handler.<get-handler>|<get-handler>(){}[0]
    final val type // eu.vendeli.rethis.types.common/Subscription.type|{}type[0]
        final fun <get-type>(): eu.vendeli.rethis.types.common/SubscriptionType // eu.vendeli.rethis.types.common/Subscription.type.<get-type>|<get-type>(){}[0]

    final fun component1(): eu.vendeli.rethis.types.common/SubscriptionType // eu.vendeli.rethis.types.common/Subscription.component1|component1(){}[0]
    final fun component2(): eu.vendeli.rethis.types.interfaces/SubscriptionHandler // eu.vendeli.rethis.types.common/Subscription.component2|component2(){}[0]
    final fun copy(eu.vendeli.rethis.types.common/SubscriptionType = ..., eu.vendeli.rethis.types.interfaces/SubscriptionHandler = ...): eu.vendeli.rethis.types.common/Subscription // eu.vendeli.rethis.types.common/Subscription.copy|copy(eu.vendeli.rethis.types.common.SubscriptionType;eu.vendeli.rethis.types.interfaces.SubscriptionHandler){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // eu.vendeli.rethis.types.common/Subscription.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // eu.vendeli.rethis.types.common/Subscription.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // eu.vendeli.rethis.types.common/Subscription.toString|toString(){}[0]
}

final class eu.vendeli.rethis.wrappers/ReThisMap : kotlin.collections/AbstractMutableMap<kotlin/String, kotlin/String> { // eu.vendeli.rethis.wrappers/ReThisMap|null[0]
    constructor <init>(eu.vendeli.rethis/ReThis, kotlin/String) // eu.vendeli.rethis.wrappers/ReThisMap.<init>|<init>(eu.vendeli.rethis.ReThis;kotlin.String){}[0]

    final val entries // eu.vendeli.rethis.wrappers/ReThisMap.entries|{}entries[0]
        final fun <get-entries>(): kotlin.collections/MutableSet<kotlin.collections/MutableMap.MutableEntry<kotlin/String, kotlin/String>> // eu.vendeli.rethis.wrappers/ReThisMap.entries.<get-entries>|<get-entries>(){}[0]
    final val keys // eu.vendeli.rethis.wrappers/ReThisMap.keys|{}keys[0]
        final fun <get-keys>(): kotlin.collections/MutableSet<kotlin/String> // eu.vendeli.rethis.wrappers/ReThisMap.keys.<get-keys>|<get-keys>(){}[0]
    final val size // eu.vendeli.rethis.wrappers/ReThisMap.size|{}size[0]
        final fun <get-size>(): kotlin/Int // eu.vendeli.rethis.wrappers/ReThisMap.size.<get-size>|<get-size>(){}[0]
    final val values // eu.vendeli.rethis.wrappers/ReThisMap.values|{}values[0]
        final fun <get-values>(): kotlin.collections/MutableCollection<kotlin/String> // eu.vendeli.rethis.wrappers/ReThisMap.values.<get-values>|<get-values>(){}[0]

    final fun clear() // eu.vendeli.rethis.wrappers/ReThisMap.clear|clear(){}[0]
    final fun containsKey(kotlin/String): kotlin/Boolean // eu.vendeli.rethis.wrappers/ReThisMap.containsKey|containsKey(kotlin.String){}[0]
    final fun containsValue(kotlin/String): kotlin/Boolean // eu.vendeli.rethis.wrappers/ReThisMap.containsValue|containsValue(kotlin.String){}[0]
    final fun get(kotlin/String): kotlin/String? // eu.vendeli.rethis.wrappers/ReThisMap.get|get(kotlin.String){}[0]
    final fun isEmpty(): kotlin/Boolean // eu.vendeli.rethis.wrappers/ReThisMap.isEmpty|isEmpty(){}[0]
    final fun put(kotlin/String, kotlin/String): kotlin/String // eu.vendeli.rethis.wrappers/ReThisMap.put|put(kotlin.String;kotlin.String){}[0]
    final fun putAll(kotlin.collections/Map<out kotlin/String, kotlin/String>) // eu.vendeli.rethis.wrappers/ReThisMap.putAll|putAll(kotlin.collections.Map<out|kotlin.String,kotlin.String>){}[0]
    final fun remove(kotlin/String): kotlin/String? // eu.vendeli.rethis.wrappers/ReThisMap.remove|remove(kotlin.String){}[0]
}

final class eu.vendeli.rethis.wrappers/ReThisSet : kotlin.collections/AbstractMutableSet<kotlin/String> { // eu.vendeli.rethis.wrappers/ReThisSet|null[0]
    constructor <init>(eu.vendeli.rethis/ReThis, kotlin/String) // eu.vendeli.rethis.wrappers/ReThisSet.<init>|<init>(eu.vendeli.rethis.ReThis;kotlin.String){}[0]

    final val size // eu.vendeli.rethis.wrappers/ReThisSet.size|{}size[0]
        final fun <get-size>(): kotlin/Int // eu.vendeli.rethis.wrappers/ReThisSet.size.<get-size>|<get-size>(){}[0]

    final fun add(kotlin/String): kotlin/Boolean // eu.vendeli.rethis.wrappers/ReThisSet.add|add(kotlin.String){}[0]
    final fun addAll(kotlin.collections/Collection<kotlin/String>): kotlin/Boolean // eu.vendeli.rethis.wrappers/ReThisSet.addAll|addAll(kotlin.collections.Collection<kotlin.String>){}[0]
    final fun clear() // eu.vendeli.rethis.wrappers/ReThisSet.clear|clear(){}[0]
    final fun contains(kotlin/String): kotlin/Boolean // eu.vendeli.rethis.wrappers/ReThisSet.contains|contains(kotlin.String){}[0]
    final fun isEmpty(): kotlin/Boolean // eu.vendeli.rethis.wrappers/ReThisSet.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/MutableIterator<kotlin/String> // eu.vendeli.rethis.wrappers/ReThisSet.iterator|iterator(){}[0]
    final fun remove(kotlin/String): kotlin/Boolean // eu.vendeli.rethis.wrappers/ReThisSet.remove|remove(kotlin.String){}[0]
}

final class eu.vendeli.rethis/ReThis { // eu.vendeli.rethis/ReThis|null[0]
    final val isActive // eu.vendeli.rethis/ReThis.isActive|{}isActive[0]
        final fun <get-isActive>(): kotlin/Boolean // eu.vendeli.rethis/ReThis.isActive.<get-isActive>|<get-isActive>(){}[0]
    final val subscriptions // eu.vendeli.rethis/ReThis.subscriptions|{}subscriptions[0]
        final fun <get-subscriptions>(): eu.vendeli.rethis.core/SubscriptionManager // eu.vendeli.rethis/ReThis.subscriptions.<get-subscriptions>|<get-subscriptions>(){}[0]

    final fun close() // eu.vendeli.rethis/ReThis.close|close(){}[0]
    final suspend fun pipeline(kotlin.coroutines/SuspendFunction1<eu.vendeli.rethis/ReThis, kotlin/Unit>): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis/ReThis.pipeline|pipeline(kotlin.coroutines.SuspendFunction1<eu.vendeli.rethis.ReThis,kotlin.Unit>){}[0]
    final suspend fun transaction(kotlin.coroutines/SuspendFunction1<eu.vendeli.rethis/ReThis, kotlin/Unit>): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType>? // eu.vendeli.rethis/ReThis.transaction|transaction(kotlin.coroutines.SuspendFunction1<eu.vendeli.rethis.ReThis,kotlin.Unit>){}[0]

    final object Companion { // eu.vendeli.rethis/ReThis.Companion|null[0]
        final fun cluster(kotlin.collections/List<eu.vendeli.rethis.types.common/Address>, eu.vendeli.rethis.types.common/RespVer = ..., kotlin/Function1<eu.vendeli.rethis.configuration/ClusterConfiguration, kotlin/Unit> = ...): eu.vendeli.rethis/ReThis // eu.vendeli.rethis/ReThis.Companion.cluster|cluster(kotlin.collections.List<eu.vendeli.rethis.types.common.Address>;eu.vendeli.rethis.types.common.RespVer;kotlin.Function1<eu.vendeli.rethis.configuration.ClusterConfiguration,kotlin.Unit>){}[0]
        final fun sentinel(kotlin/String, kotlin.collections/List<eu.vendeli.rethis.types.common/Address>, eu.vendeli.rethis.types.common/RespVer = ..., kotlin/Function1<eu.vendeli.rethis.configuration/SentinelConfiguration, kotlin/Unit> = ...): eu.vendeli.rethis/ReThis // eu.vendeli.rethis/ReThis.Companion.sentinel|sentinel(kotlin.String;kotlin.collections.List<eu.vendeli.rethis.types.common.Address>;eu.vendeli.rethis.types.common.RespVer;kotlin.Function1<eu.vendeli.rethis.configuration.SentinelConfiguration,kotlin.Unit>){}[0]
        final fun standalone(eu.vendeli.rethis.types.common/Address, eu.vendeli.rethis.types.common/RespVer = ..., kotlin/Function1<eu.vendeli.rethis.configuration/StandaloneConfiguration, kotlin/Unit> = ...): eu.vendeli.rethis/ReThis // eu.vendeli.rethis/ReThis.Companion.standalone|standalone(eu.vendeli.rethis.types.common.Address;eu.vendeli.rethis.types.common.RespVer;kotlin.Function1<eu.vendeli.rethis.configuration.StandaloneConfiguration,kotlin.Unit>){}[0]
    }
}

final value class eu.vendeli.rethis.types.common/Address { // eu.vendeli.rethis.types.common/Address|null[0]
    constructor <init>(io.ktor.network.sockets/SocketAddress) // eu.vendeli.rethis.types.common/Address.<init>|<init>(io.ktor.network.sockets.SocketAddress){}[0]

    final val socket // eu.vendeli.rethis.types.common/Address.socket|{}socket[0]
        final fun <get-socket>(): io.ktor.network.sockets/SocketAddress // eu.vendeli.rethis.types.common/Address.socket.<get-socket>|<get-socket>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // eu.vendeli.rethis.types.common/Address.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // eu.vendeli.rethis.types.common/Address.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // eu.vendeli.rethis.types.common/Address.toString|toString(){}[0]
}

sealed class eu.vendeli.rethis.configuration/ReThisConfiguration { // eu.vendeli.rethis.configuration/ReThisConfiguration|null[0]
    final var charset // eu.vendeli.rethis.configuration/ReThisConfiguration.charset|{}charset[0]
        final fun <get-charset>(): io.ktor.utils.io.charsets/Charset // eu.vendeli.rethis.configuration/ReThisConfiguration.charset.<get-charset>|<get-charset>(){}[0]
        final fun <set-charset>(io.ktor.utils.io.charsets/Charset) // eu.vendeli.rethis.configuration/ReThisConfiguration.charset.<set-charset>|<set-charset>(io.ktor.utils.io.charsets.Charset){}[0]
    final var connectionAcquireTimeout // eu.vendeli.rethis.configuration/ReThisConfiguration.connectionAcquireTimeout|{}connectionAcquireTimeout[0]
        final fun <get-connectionAcquireTimeout>(): kotlin.time/Duration // eu.vendeli.rethis.configuration/ReThisConfiguration.connectionAcquireTimeout.<get-connectionAcquireTimeout>|<get-connectionAcquireTimeout>(){}[0]
        final fun <set-connectionAcquireTimeout>(kotlin.time/Duration) // eu.vendeli.rethis.configuration/ReThisConfiguration.connectionAcquireTimeout.<set-connectionAcquireTimeout>|<set-connectionAcquireTimeout>(kotlin.time.Duration){}[0]
    final var db // eu.vendeli.rethis.configuration/ReThisConfiguration.db|{}db[0]
        final fun <get-db>(): kotlin/Int? // eu.vendeli.rethis.configuration/ReThisConfiguration.db.<get-db>|<get-db>(){}[0]
        final fun <set-db>(kotlin/Int?) // eu.vendeli.rethis.configuration/ReThisConfiguration.db.<set-db>|<set-db>(kotlin.Int?){}[0]
    final var dispatcher // eu.vendeli.rethis.configuration/ReThisConfiguration.dispatcher|{}dispatcher[0]
        final fun <get-dispatcher>(): kotlinx.coroutines/CoroutineDispatcher // eu.vendeli.rethis.configuration/ReThisConfiguration.dispatcher.<get-dispatcher>|<get-dispatcher>(){}[0]
        final fun <set-dispatcher>(kotlinx.coroutines/CoroutineDispatcher) // eu.vendeli.rethis.configuration/ReThisConfiguration.dispatcher.<set-dispatcher>|<set-dispatcher>(kotlinx.coroutines.CoroutineDispatcher){}[0]
    final var loggerFactory // eu.vendeli.rethis.configuration/ReThisConfiguration.loggerFactory|{}loggerFactory[0]
        final fun <get-loggerFactory>(): eu.vendeli.rethis.types.common/LoggerFactory // eu.vendeli.rethis.configuration/ReThisConfiguration.loggerFactory.<get-loggerFactory>|<get-loggerFactory>(){}[0]
        final fun <set-loggerFactory>(eu.vendeli.rethis.types.common/LoggerFactory) // eu.vendeli.rethis.configuration/ReThisConfiguration.loggerFactory.<set-loggerFactory>|<set-loggerFactory>(eu.vendeli.rethis.types.common.LoggerFactory){}[0]
    final var maxConnections // eu.vendeli.rethis.configuration/ReThisConfiguration.maxConnections|{}maxConnections[0]
        final fun <get-maxConnections>(): kotlin/Int // eu.vendeli.rethis.configuration/ReThisConfiguration.maxConnections.<get-maxConnections>|<get-maxConnections>(){}[0]
        final fun <set-maxConnections>(kotlin/Int) // eu.vendeli.rethis.configuration/ReThisConfiguration.maxConnections.<set-maxConnections>|<set-maxConnections>(kotlin.Int){}[0]
    final var readFromStrategy // eu.vendeli.rethis.configuration/ReThisConfiguration.readFromStrategy|{}readFromStrategy[0]
        final fun <get-readFromStrategy>(): eu.vendeli.rethis.types.common/ReadFromStrategy // eu.vendeli.rethis.configuration/ReThisConfiguration.readFromStrategy.<get-readFromStrategy>|<get-readFromStrategy>(){}[0]
        final fun <set-readFromStrategy>(eu.vendeli.rethis.types.common/ReadFromStrategy) // eu.vendeli.rethis.configuration/ReThisConfiguration.readFromStrategy.<set-readFromStrategy>|<set-readFromStrategy>(eu.vendeli.rethis.types.common.ReadFromStrategy){}[0]
    final var usePooling // eu.vendeli.rethis.configuration/ReThisConfiguration.usePooling|{}usePooling[0]
        final fun <get-usePooling>(): kotlin/Boolean // eu.vendeli.rethis.configuration/ReThisConfiguration.usePooling.<get-usePooling>|<get-usePooling>(){}[0]
        final fun <set-usePooling>(kotlin/Boolean) // eu.vendeli.rethis.configuration/ReThisConfiguration.usePooling.<set-usePooling>|<set-usePooling>(kotlin.Boolean){}[0]

    final fun auth(kotlin/CharArray, kotlin/String? = ...) // eu.vendeli.rethis.configuration/ReThisConfiguration.auth|auth(kotlin.CharArray;kotlin.String?){}[0]
    final fun pool(kotlin/Function1<eu.vendeli.rethis.configuration/PoolConfiguration, kotlin/Unit>) // eu.vendeli.rethis.configuration/ReThisConfiguration.pool|pool(kotlin.Function1<eu.vendeli.rethis.configuration.PoolConfiguration,kotlin.Unit>){}[0]
    final fun retry(kotlin/Function1<eu.vendeli.rethis.configuration/RetryConfiguration, kotlin/Unit>) // eu.vendeli.rethis.configuration/ReThisConfiguration.retry|retry(kotlin.Function1<eu.vendeli.rethis.configuration.RetryConfiguration,kotlin.Unit>){}[0]
    final fun socket(kotlin/Function1<eu.vendeli.rethis.configuration/SocketConfiguration, kotlin/Unit>) // eu.vendeli.rethis.configuration/ReThisConfiguration.socket|socket(kotlin.Function1<eu.vendeli.rethis.configuration.SocketConfiguration,kotlin.Unit>){}[0]
    final fun tls(kotlin/Function0<io.ktor.network.tls/TLSConfig>) // eu.vendeli.rethis.configuration/ReThisConfiguration.tls|tls(kotlin.Function0<io.ktor.network.tls.TLSConfig>){}[0]
}

sealed class eu.vendeli.rethis.types.common/ReadFrom : eu.vendeli.rethis.types.common/ReadFromStrategy { // eu.vendeli.rethis.types.common/ReadFrom|null[0]
    final object Any : eu.vendeli.rethis.types.common/ReadFromStrategy { // eu.vendeli.rethis.types.common/ReadFrom.Any|null[0]
        final fun pick(eu.vendeli.rethis.shared.types/CommandRequest, eu.vendeli.rethis.types.common/Snapshot): eu.vendeli.rethis.providers/ConnectionProvider // eu.vendeli.rethis.types.common/ReadFrom.Any.pick|pick(eu.vendeli.rethis.shared.types.CommandRequest;eu.vendeli.rethis.types.common.Snapshot){}[0]
    }

    final object AnyReplica : eu.vendeli.rethis.types.common/ReadFromStrategy { // eu.vendeli.rethis.types.common/ReadFrom.AnyReplica|null[0]
        final fun pick(eu.vendeli.rethis.shared.types/CommandRequest, eu.vendeli.rethis.types.common/Snapshot): eu.vendeli.rethis.providers/ConnectionProvider // eu.vendeli.rethis.types.common/ReadFrom.AnyReplica.pick|pick(eu.vendeli.rethis.shared.types.CommandRequest;eu.vendeli.rethis.types.common.Snapshot){}[0]
    }

    final object LowestLatency : eu.vendeli.rethis.types.common/ReadFromStrategy { // eu.vendeli.rethis.types.common/ReadFrom.LowestLatency|null[0]
        final fun pick(eu.vendeli.rethis.shared.types/CommandRequest, eu.vendeli.rethis.types.common/Snapshot): eu.vendeli.rethis.providers/ConnectionProvider // eu.vendeli.rethis.types.common/ReadFrom.LowestLatency.pick|pick(eu.vendeli.rethis.shared.types.CommandRequest;eu.vendeli.rethis.types.common.Snapshot){}[0]
    }

    final object Master : eu.vendeli.rethis.types.common/ReadFromStrategy { // eu.vendeli.rethis.types.common/ReadFrom.Master|null[0]
        final fun pick(eu.vendeli.rethis.shared.types/CommandRequest, eu.vendeli.rethis.types.common/Snapshot): eu.vendeli.rethis.providers/ConnectionProvider // eu.vendeli.rethis.types.common/ReadFrom.Master.pick|pick(eu.vendeli.rethis.shared.types.CommandRequest;eu.vendeli.rethis.types.common.Snapshot){}[0]
    }

    final object MasterPreferred : eu.vendeli.rethis.types.common/ReadFromStrategy { // eu.vendeli.rethis.types.common/ReadFrom.MasterPreferred|null[0]
        final fun pick(eu.vendeli.rethis.shared.types/CommandRequest, eu.vendeli.rethis.types.common/Snapshot): eu.vendeli.rethis.providers/ConnectionProvider // eu.vendeli.rethis.types.common/ReadFrom.MasterPreferred.pick|pick(eu.vendeli.rethis.shared.types.CommandRequest;eu.vendeli.rethis.types.common.Snapshot){}[0]
    }

    final object Replica : eu.vendeli.rethis.types.common/ReadFromStrategy { // eu.vendeli.rethis.types.common/ReadFrom.Replica|null[0]
        final fun pick(eu.vendeli.rethis.shared.types/CommandRequest, eu.vendeli.rethis.types.common/Snapshot): eu.vendeli.rethis.providers/ConnectionProvider // eu.vendeli.rethis.types.common/ReadFrom.Replica.pick|pick(eu.vendeli.rethis.shared.types.CommandRequest;eu.vendeli.rethis.types.common.Snapshot){}[0]
    }

    final object ReplicaPreferred : eu.vendeli.rethis.types.common/ReadFromStrategy { // eu.vendeli.rethis.types.common/ReadFrom.ReplicaPreferred|null[0]
        final fun pick(eu.vendeli.rethis.shared.types/CommandRequest, eu.vendeli.rethis.types.common/Snapshot): eu.vendeli.rethis.providers/ConnectionProvider // eu.vendeli.rethis.types.common/ReadFrom.ReplicaPreferred.pick|pick(eu.vendeli.rethis.shared.types.CommandRequest;eu.vendeli.rethis.types.common.Snapshot){}[0]
    }
}

sealed class eu.vendeli.rethis.types.common/RespVer { // eu.vendeli.rethis.types.common/RespVer|null[0]
    final val literal // eu.vendeli.rethis.types.common/RespVer.literal|{}literal[0]
        final fun <get-literal>(): kotlin/Int // eu.vendeli.rethis.types.common/RespVer.literal.<get-literal>|<get-literal>(){}[0]

    final object V2 : eu.vendeli.rethis.types.common/RespVer { // eu.vendeli.rethis.types.common/RespVer.V2|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // eu.vendeli.rethis.types.common/RespVer.V2.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // eu.vendeli.rethis.types.common/RespVer.V2.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // eu.vendeli.rethis.types.common/RespVer.V2.toString|toString(){}[0]
    }

    final object V3 : eu.vendeli.rethis.types.common/RespVer { // eu.vendeli.rethis.types.common/RespVer.V3|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // eu.vendeli.rethis.types.common/RespVer.V3.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // eu.vendeli.rethis.types.common/RespVer.V3.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // eu.vendeli.rethis.types.common/RespVer.V3.toString|toString(){}[0]
    }
}

sealed class eu.vendeli.rethis.types.common/Snapshot { // eu.vendeli.rethis.types.common/Snapshot|null[0]
    abstract val providers // eu.vendeli.rethis.types.common/Snapshot.providers|{}providers[0]
        abstract fun <get-providers>(): kotlin/Array<eu.vendeli.rethis.providers/ConnectionProvider> // eu.vendeli.rethis.types.common/Snapshot.providers.<get-providers>|<get-providers>(){}[0]
    final val latencies // eu.vendeli.rethis.types.common/Snapshot.latencies|{}latencies[0]
        final fun <get-latencies>(): kotlin.collections/MutableMap<kotlin/Int, kotlin.time/Duration> // eu.vendeli.rethis.types.common/Snapshot.latencies.<get-latencies>|<get-latencies>(){}[0]
}

sealed class eu.vendeli.rethis.types.common/SubscriptionType { // eu.vendeli.rethis.types.common/SubscriptionType|null[0]
    final object PATTERN : eu.vendeli.rethis.types.common/SubscriptionType { // eu.vendeli.rethis.types.common/SubscriptionType.PATTERN|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // eu.vendeli.rethis.types.common/SubscriptionType.PATTERN.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // eu.vendeli.rethis.types.common/SubscriptionType.PATTERN.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // eu.vendeli.rethis.types.common/SubscriptionType.PATTERN.toString|toString(){}[0]
    }

    final object PLAIN : eu.vendeli.rethis.types.common/SubscriptionType { // eu.vendeli.rethis.types.common/SubscriptionType.PLAIN|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // eu.vendeli.rethis.types.common/SubscriptionType.PLAIN.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // eu.vendeli.rethis.types.common/SubscriptionType.PLAIN.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // eu.vendeli.rethis.types.common/SubscriptionType.PLAIN.toString|toString(){}[0]
    }

    final object SHARD : eu.vendeli.rethis.types.common/SubscriptionType { // eu.vendeli.rethis.types.common/SubscriptionType.SHARD|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // eu.vendeli.rethis.types.common/SubscriptionType.SHARD.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // eu.vendeli.rethis.types.common/SubscriptionType.SHARD.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // eu.vendeli.rethis.types.common/SubscriptionType.SHARD.toString|toString(){}[0]
    }
}

final object eu.vendeli.rethis.codecs.bitmap/BitCountCommandCodec { // eu.vendeli.rethis.codecs.bitmap/BitCountCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.bitmap/BitCountCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, eu.vendeli.rethis.shared.request.bitmap/Range?, eu.vendeli.rethis.shared.request.bitmap/BitmapUnit?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.bitmap/BitCountCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;eu.vendeli.rethis.shared.request.bitmap.Range?;eu.vendeli.rethis.shared.request.bitmap.BitmapUnit?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, eu.vendeli.rethis.shared.request.bitmap/Range?, eu.vendeli.rethis.shared.request.bitmap/BitmapUnit?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.bitmap/BitCountCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;eu.vendeli.rethis.shared.request.bitmap.Range?;eu.vendeli.rethis.shared.request.bitmap.BitmapUnit?){}[0]
}

final object eu.vendeli.rethis.codecs.bitmap/BitOpCommandCodec { // eu.vendeli.rethis.codecs.bitmap/BitOpCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.bitmap/BitOpCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.bitmap/BitOpOption.OperationType, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.bitmap/BitOpCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.bitmap.BitOpOption.OperationType;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.bitmap/BitOpOption.OperationType, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.bitmap/BitOpCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.bitmap.BitOpOption.OperationType;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.bitmap/BitPosCommandCodec { // eu.vendeli.rethis.codecs.bitmap/BitPosCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.bitmap/BitPosCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/Long?, kotlin/Long?, eu.vendeli.rethis.shared.request.bitmap/BitmapUnit?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.bitmap/BitPosCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.Long?;kotlin.Long?;eu.vendeli.rethis.shared.request.bitmap.BitmapUnit?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/Long?, kotlin/Long?, eu.vendeli.rethis.shared.request.bitmap/BitmapUnit?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.bitmap/BitPosCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.Long?;kotlin.Long?;eu.vendeli.rethis.shared.request.bitmap.BitmapUnit?){}[0]
}

final object eu.vendeli.rethis.codecs.bitmap/BitfieldCommandCodec { // eu.vendeli.rethis.codecs.bitmap/BitfieldCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/Long>? // eu.vendeli.rethis.codecs.bitmap/BitfieldCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.bitmap/BitfieldOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.bitmap/BitfieldCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.bitmap.BitfieldOption>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.bitmap/BitfieldOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.bitmap/BitfieldCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.bitmap.BitfieldOption>...){}[0]
}

final object eu.vendeli.rethis.codecs.bitmap/BitfieldRoCommandCodec { // eu.vendeli.rethis.codecs.bitmap/BitfieldRoCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/Long> // eu.vendeli.rethis.codecs.bitmap/BitfieldRoCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.bitmap/BitfieldOption.Get>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.bitmap/BitfieldRoCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.bitmap.BitfieldOption.Get>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.bitmap/BitfieldOption.Get>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.bitmap/BitfieldRoCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.bitmap.BitfieldOption.Get>...){}[0]
}

final object eu.vendeli.rethis.codecs.bitmap/GetBitCommandCodec { // eu.vendeli.rethis.codecs.bitmap/GetBitCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.bitmap/GetBitCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.bitmap/GetBitCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.bitmap/GetBitCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long){}[0]
}

final object eu.vendeli.rethis.codecs.bitmap/SetBitCommandCodec { // eu.vendeli.rethis.codecs.bitmap/SetBitCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.bitmap/SetBitCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.bitmap/SetBitCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.Long){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.bitmap/SetBitCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.Long){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/AskingCommandCodec { // eu.vendeli.rethis.codecs.cluster/AskingCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.cluster/AskingCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/AskingCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/AskingCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterAddSlotsCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterAddSlotsCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.cluster/ClusterAddSlotsCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/LongArray...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterAddSlotsCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.LongArray...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/LongArray...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterAddSlotsCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.LongArray...){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterAddSlotsRangeCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterAddSlotsRangeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.cluster/ClusterAddSlotsRangeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out eu.vendeli.rethis.shared.request.cluster/SlotRange>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterAddSlotsRangeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|eu.vendeli.rethis.shared.request.cluster.SlotRange>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out eu.vendeli.rethis.shared.request.cluster/SlotRange>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterAddSlotsRangeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|eu.vendeli.rethis.shared.request.cluster.SlotRange>...){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterBumpEpochCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterBumpEpochCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.cluster/ClusterBumpEpochCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterBumpEpochCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterBumpEpochCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterCountFailureReportsCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterCountFailureReportsCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.cluster/ClusterCountFailureReportsCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterCountFailureReportsCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterCountFailureReportsCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterCountKeysInSlotCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterCountKeysInSlotCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.cluster/ClusterCountKeysInSlotCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterCountKeysInSlotCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Long){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterCountKeysInSlotCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Long){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterDelSlotsCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterDelSlotsCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.cluster/ClusterDelSlotsCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/LongArray...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterDelSlotsCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.LongArray...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/LongArray...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterDelSlotsCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.LongArray...){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterDelSlotsRangeCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterDelSlotsRangeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.cluster/ClusterDelSlotsRangeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out eu.vendeli.rethis.shared.request.cluster/SlotRange>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterDelSlotsRangeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|eu.vendeli.rethis.shared.request.cluster.SlotRange>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out eu.vendeli.rethis.shared.request.cluster/SlotRange>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterDelSlotsRangeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|eu.vendeli.rethis.shared.request.cluster.SlotRange>...){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterFailoverCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterFailoverCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.cluster/ClusterFailoverCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.cluster/ClusterFailoverOption?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterFailoverCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.cluster.ClusterFailoverOption?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.cluster/ClusterFailoverOption?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterFailoverCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.cluster.ClusterFailoverOption?){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterFlushSlotsCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterFlushSlotsCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.cluster/ClusterFlushSlotsCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterFlushSlotsCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterFlushSlotsCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterForgetCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterForgetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.cluster/ClusterForgetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterForgetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterForgetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterGetKeysInSlotCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterGetKeysInSlotCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.cluster/ClusterGetKeysInSlotCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Long, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterGetKeysInSlotCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Long;kotlin.Long){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Long, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterGetKeysInSlotCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Long;kotlin.Long){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterInfoCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterInfoCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.cluster/ClusterInfoCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterInfoCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterInfoCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterKeySlotCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterKeySlotCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.cluster/ClusterKeySlotCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterKeySlotCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterKeySlotCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterLinksCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterLinksCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.cluster/ClusterLinksCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterLinksCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterLinksCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterMeetCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterMeetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.cluster/ClusterMeetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterMeetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterMeetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterMyIdCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterMyIdCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.cluster/ClusterMyIdCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterMyIdCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterMyIdCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterMyShardIdCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterMyShardIdCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.cluster/ClusterMyShardIdCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterMyShardIdCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterMyShardIdCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterNodesCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterNodesCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.cluster/ClusterNodesCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterNodesCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterNodesCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterReplicasCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterReplicasCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.cluster/ClusterReplicasCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterReplicasCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterReplicasCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterReplicateCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterReplicateCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.cluster/ClusterReplicateCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterReplicateCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterReplicateCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterResetCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterResetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.cluster/ClusterResetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.cluster/ClusterResetMode?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterResetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.cluster.ClusterResetMode?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.cluster/ClusterResetMode?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterResetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.cluster.ClusterResetMode?){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterSaveConfigCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterSaveConfigCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.cluster/ClusterSaveConfigCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterSaveConfigCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterSaveConfigCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterSetConfigEpochCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterSetConfigEpochCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.cluster/ClusterSetConfigEpochCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterSetConfigEpochCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Long){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterSetConfigEpochCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Long){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterSetSlotCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterSetSlotCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.cluster/ClusterSetSlotCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Long, eu.vendeli.rethis.shared.request.cluster/ClusterSetSlotOption): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterSetSlotCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Long;eu.vendeli.rethis.shared.request.cluster.ClusterSetSlotOption){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Long, eu.vendeli.rethis.shared.request.cluster/ClusterSetSlotOption): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterSetSlotCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Long;eu.vendeli.rethis.shared.request.cluster.ClusterSetSlotOption){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterShardsCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterShardsCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.response.cluster/Shard> // eu.vendeli.rethis.codecs.cluster/ClusterShardsCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterShardsCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterShardsCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterSlavesCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterSlavesCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.cluster/ClusterSlavesCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterSlavesCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterSlavesCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ClusterSlotsCommandCodec { // eu.vendeli.rethis.codecs.cluster/ClusterSlotsCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.response.cluster/Cluster // eu.vendeli.rethis.codecs.cluster/ClusterSlotsCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterSlotsCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ClusterSlotsCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ReadOnlyCommandCodec { // eu.vendeli.rethis.codecs.cluster/ReadOnlyCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.cluster/ReadOnlyCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ReadOnlyCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ReadOnlyCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.cluster/ReadWriteCommandCodec { // eu.vendeli.rethis.codecs.cluster/ReadWriteCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.cluster/ReadWriteCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ReadWriteCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.cluster/ReadWriteCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.connection/AuthCommandCodec { // eu.vendeli.rethis.codecs.connection/AuthCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.connection/AuthCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String?, kotlin/CharArray): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/AuthCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String?;kotlin.CharArray){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String?, kotlin/CharArray): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/AuthCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String?;kotlin.CharArray){}[0]
}

final object eu.vendeli.rethis.codecs.connection/ClientGetNameCommandCodec { // eu.vendeli.rethis.codecs.connection/ClientGetNameCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String? // eu.vendeli.rethis.codecs.connection/ClientGetNameCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/ClientGetNameCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/ClientGetNameCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.connection/ClientIdCommandCodec { // eu.vendeli.rethis.codecs.connection/ClientIdCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.connection/ClientIdCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/ClientIdCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/ClientIdCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.connection/ClientInfoCommandCodec { // eu.vendeli.rethis.codecs.connection/ClientInfoCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.connection/ClientInfoCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/ClientInfoCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/ClientInfoCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.connection/ClientKillCommandCodec { // eu.vendeli.rethis.codecs.connection/ClientKillCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.connection/ClientKillCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out eu.vendeli.rethis.shared.request.connection/ClientKillOptions>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/ClientKillCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|eu.vendeli.rethis.shared.request.connection.ClientKillOptions>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out eu.vendeli.rethis.shared.request.connection/ClientKillOptions>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/ClientKillCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|eu.vendeli.rethis.shared.request.connection.ClientKillOptions>...){}[0]
}

final object eu.vendeli.rethis.codecs.connection/ClientKillStringCommandCodec { // eu.vendeli.rethis.codecs.connection/ClientKillStringCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.connection/ClientKillStringCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/ClientKillStringCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/ClientKillStringCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.connection/ClientListCommandCodec { // eu.vendeli.rethis.codecs.connection/ClientListCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.connection/ClientListCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.connection/ClientType?, kotlin/LongArray...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/ClientListCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.connection.ClientType?;kotlin.LongArray...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.connection/ClientType?, kotlin/LongArray...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/ClientListCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.connection.ClientType?;kotlin.LongArray...){}[0]
}

final object eu.vendeli.rethis.codecs.connection/ClientPauseCommandCodec { // eu.vendeli.rethis.codecs.connection/ClientPauseCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.connection/ClientPauseCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Long, eu.vendeli.rethis.shared.request.connection/ClientPauseMode?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/ClientPauseCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Long;eu.vendeli.rethis.shared.request.connection.ClientPauseMode?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Long, eu.vendeli.rethis.shared.request.connection/ClientPauseMode?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/ClientPauseCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Long;eu.vendeli.rethis.shared.request.connection.ClientPauseMode?){}[0]
}

final object eu.vendeli.rethis.codecs.connection/ClientReplyCommandCodec { // eu.vendeli.rethis.codecs.connection/ClientReplyCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.connection/ClientReplyCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.connection/ClientReplyMode): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/ClientReplyCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.connection.ClientReplyMode){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.connection/ClientReplyMode): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/ClientReplyCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.connection.ClientReplyMode){}[0]
}

final object eu.vendeli.rethis.codecs.connection/ClientSetNameCommandCodec { // eu.vendeli.rethis.codecs.connection/ClientSetNameCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.connection/ClientSetNameCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/ClientSetNameCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/ClientSetNameCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.connection/ClientTrackingCommandCodec { // eu.vendeli.rethis.codecs.connection/ClientTrackingCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.connection/ClientTrackingCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.connection/ClientStandby, kotlin/Array<out eu.vendeli.rethis.shared.request.connection/ClientTrackingMode>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/ClientTrackingCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.connection.ClientStandby;kotlin.Array<out|eu.vendeli.rethis.shared.request.connection.ClientTrackingMode>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.connection/ClientStandby, kotlin/Array<out eu.vendeli.rethis.shared.request.connection/ClientTrackingMode>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/ClientTrackingCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.connection.ClientStandby;kotlin.Array<out|eu.vendeli.rethis.shared.request.connection.ClientTrackingMode>...){}[0]
}

final object eu.vendeli.rethis.codecs.connection/ClientUnblockCommandCodec { // eu.vendeli.rethis.codecs.connection/ClientUnblockCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.connection/ClientUnblockCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Long, eu.vendeli.rethis.shared.request.connection/ClientUnblockType?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/ClientUnblockCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Long;eu.vendeli.rethis.shared.request.connection.ClientUnblockType?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Long, eu.vendeli.rethis.shared.request.connection/ClientUnblockType?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/ClientUnblockCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Long;eu.vendeli.rethis.shared.request.connection.ClientUnblockType?){}[0]
}

final object eu.vendeli.rethis.codecs.connection/HelloCommandCodec { // eu.vendeli.rethis.codecs.connection/HelloCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/Map<kotlin/String, eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.connection/HelloCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Long?, eu.vendeli.rethis.shared.request.connection/HelloAuth?, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/HelloCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Long?;eu.vendeli.rethis.shared.request.connection.HelloAuth?;kotlin.String?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Long?, eu.vendeli.rethis.shared.request.connection/HelloAuth?, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/HelloCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Long?;eu.vendeli.rethis.shared.request.connection.HelloAuth?;kotlin.String?){}[0]
}

final object eu.vendeli.rethis.codecs.connection/PingCommandCodec { // eu.vendeli.rethis.codecs.connection/PingCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.connection/PingCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/PingCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/PingCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String?){}[0]
}

final object eu.vendeli.rethis.codecs.connection/QuitCommandCodec { // eu.vendeli.rethis.codecs.connection/QuitCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.connection/QuitCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/QuitCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/QuitCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.connection/SelectCommandCodec { // eu.vendeli.rethis.codecs.connection/SelectCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.connection/SelectCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/SelectCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Long){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.connection/SelectCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Long){}[0]
}

final object eu.vendeli.rethis.codecs.generic/CopyCommandCodec { // eu.vendeli.rethis.codecs.generic/CopyCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.generic/CopyCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.generic/CopyOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/CopyCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.generic.CopyOption>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.generic/CopyOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/CopyCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.generic.CopyOption>...){}[0]
}

final object eu.vendeli.rethis.codecs.generic/DelCommandCodec { // eu.vendeli.rethis.codecs.generic/DelCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.generic/DelCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/DelCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/DelCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.generic/DumpCommandCodec { // eu.vendeli.rethis.codecs.generic/DumpCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/ByteArray? // eu.vendeli.rethis.codecs.generic/DumpCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/DumpCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/DumpCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.generic/ExistsCommandCodec { // eu.vendeli.rethis.codecs.generic/ExistsCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.generic/ExistsCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/ExistsCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/ExistsCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.generic/ExpireAtCommandCodec { // eu.vendeli.rethis.codecs.generic/ExpireAtCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.generic/ExpireAtCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin.time/Instant, eu.vendeli.rethis.shared.request.common/UpdateStrategyOption?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/ExpireAtCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.time.Instant;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin.time/Instant, eu.vendeli.rethis.shared.request.common/UpdateStrategyOption?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/ExpireAtCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.time.Instant;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption?){}[0]
}

final object eu.vendeli.rethis.codecs.generic/ExpireCommandCodec { // eu.vendeli.rethis.codecs.generic/ExpireCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.generic/ExpireCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin.time/Duration, eu.vendeli.rethis.shared.request.common/UpdateStrategyOption?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/ExpireCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.time.Duration;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin.time/Duration, eu.vendeli.rethis.shared.request.common/UpdateStrategyOption?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/ExpireCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.time.Duration;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption?){}[0]
}

final object eu.vendeli.rethis.codecs.generic/ExpireTimeCommandCodec { // eu.vendeli.rethis.codecs.generic/ExpireTimeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.generic/ExpireTimeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/ExpireTimeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/ExpireTimeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.generic/KeysCommandCodec { // eu.vendeli.rethis.codecs.generic/KeysCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.generic/KeysCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/KeysCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/KeysCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.generic/MigrateCommandCodec { // eu.vendeli.rethis.codecs.generic/MigrateCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.generic/MigrateCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, eu.vendeli.rethis.shared.request.generic/MigrateKey, kotlin/Long, kotlin.time/Duration, kotlin/Array<out eu.vendeli.rethis.shared.request.generic/MigrateOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/MigrateCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;eu.vendeli.rethis.shared.request.generic.MigrateKey;kotlin.Long;kotlin.time.Duration;kotlin.Array<out|eu.vendeli.rethis.shared.request.generic.MigrateOption>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, eu.vendeli.rethis.shared.request.generic/MigrateKey, kotlin/Long, kotlin.time/Duration, kotlin/Array<out eu.vendeli.rethis.shared.request.generic/MigrateOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/MigrateCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;eu.vendeli.rethis.shared.request.generic.MigrateKey;kotlin.Long;kotlin.time.Duration;kotlin.Array<out|eu.vendeli.rethis.shared.request.generic.MigrateOption>...){}[0]
}

final object eu.vendeli.rethis.codecs.generic/MoveCommandCodec { // eu.vendeli.rethis.codecs.generic/MoveCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.generic/MoveCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/MoveCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/MoveCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long){}[0]
}

final object eu.vendeli.rethis.codecs.generic/ObjectEncodingCommandCodec { // eu.vendeli.rethis.codecs.generic/ObjectEncodingCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String? // eu.vendeli.rethis.codecs.generic/ObjectEncodingCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/ObjectEncodingCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/ObjectEncodingCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.generic/ObjectFreqCommandCodec { // eu.vendeli.rethis.codecs.generic/ObjectFreqCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/RType? // eu.vendeli.rethis.codecs.generic/ObjectFreqCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/ObjectFreqCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/ObjectFreqCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.generic/ObjectIdleTimeCommandCodec { // eu.vendeli.rethis.codecs.generic/ObjectIdleTimeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long? // eu.vendeli.rethis.codecs.generic/ObjectIdleTimeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/ObjectIdleTimeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/ObjectIdleTimeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.generic/ObjectRefCountCommandCodec { // eu.vendeli.rethis.codecs.generic/ObjectRefCountCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long? // eu.vendeli.rethis.codecs.generic/ObjectRefCountCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/ObjectRefCountCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/ObjectRefCountCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.generic/PExpireAtCommandCodec { // eu.vendeli.rethis.codecs.generic/PExpireAtCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.generic/PExpireAtCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin.time/Instant, eu.vendeli.rethis.shared.request.common/UpdateStrategyOption?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/PExpireAtCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.time.Instant;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin.time/Instant, eu.vendeli.rethis.shared.request.common/UpdateStrategyOption?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/PExpireAtCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.time.Instant;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption?){}[0]
}

final object eu.vendeli.rethis.codecs.generic/PExpireCommandCodec { // eu.vendeli.rethis.codecs.generic/PExpireCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.generic/PExpireCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin.time/Duration, eu.vendeli.rethis.shared.request.common/UpdateStrategyOption?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/PExpireCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.time.Duration;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin.time/Duration, eu.vendeli.rethis.shared.request.common/UpdateStrategyOption?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/PExpireCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.time.Duration;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption?){}[0]
}

final object eu.vendeli.rethis.codecs.generic/PExpireTimeCommandCodec { // eu.vendeli.rethis.codecs.generic/PExpireTimeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.generic/PExpireTimeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/PExpireTimeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/PExpireTimeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.generic/PTtlCommandCodec { // eu.vendeli.rethis.codecs.generic/PTtlCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.generic/PTtlCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/PTtlCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/PTtlCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.generic/PersistCommandCodec { // eu.vendeli.rethis.codecs.generic/PersistCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.generic/PersistCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/PersistCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/PersistCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.generic/RandomKeyCommandCodec { // eu.vendeli.rethis.codecs.generic/RandomKeyCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String? // eu.vendeli.rethis.codecs.generic/RandomKeyCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/RandomKeyCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/RandomKeyCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.generic/RenameCommandCodec { // eu.vendeli.rethis.codecs.generic/RenameCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.generic/RenameCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/RenameCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/RenameCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.generic/RenameNxCommandCodec { // eu.vendeli.rethis.codecs.generic/RenameNxCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.generic/RenameNxCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/RenameNxCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/RenameNxCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.generic/RestoreCommandCodec { // eu.vendeli.rethis.codecs.generic/RestoreCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.generic/RestoreCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/ByteArray, kotlin/Array<out eu.vendeli.rethis.shared.request.generic/RestoreOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/RestoreCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.ByteArray;kotlin.Array<out|eu.vendeli.rethis.shared.request.generic.RestoreOption>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/ByteArray, kotlin/Array<out eu.vendeli.rethis.shared.request.generic/RestoreOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/RestoreCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.ByteArray;kotlin.Array<out|eu.vendeli.rethis.shared.request.generic.RestoreOption>...){}[0]
}

final object eu.vendeli.rethis.codecs.generic/ScanCommandCodec { // eu.vendeli.rethis.codecs.generic/ScanCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.response.common/ScanResult<kotlin/String> // eu.vendeli.rethis.codecs.generic/ScanCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Long, kotlin/Array<out eu.vendeli.rethis.shared.request.generic/ScanOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/ScanCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Long;kotlin.Array<out|eu.vendeli.rethis.shared.request.generic.ScanOption>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Long, kotlin/Array<out eu.vendeli.rethis.shared.request.generic/ScanOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/ScanCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Long;kotlin.Array<out|eu.vendeli.rethis.shared.request.generic.ScanOption>...){}[0]
}

final object eu.vendeli.rethis.codecs.generic/SortCommandCodec { // eu.vendeli.rethis.codecs.generic/SortCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.generic/SortCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.generic/SortOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/SortCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.generic.SortOption>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.generic/SortOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/SortCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.generic.SortOption>...){}[0]
}

final object eu.vendeli.rethis.codecs.generic/SortRoCommandCodec { // eu.vendeli.rethis.codecs.generic/SortRoCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.generic/SortRoCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.generic/SortOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/SortRoCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.generic.SortOption>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.generic/SortOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/SortRoCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.generic.SortOption>...){}[0]
}

final object eu.vendeli.rethis.codecs.generic/SortStoreCommandCodec { // eu.vendeli.rethis.codecs.generic/SortStoreCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.generic/SortStoreCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.generic/SortOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/SortStoreCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.generic.SortOption>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.generic/SortOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/SortStoreCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.generic.SortOption>...){}[0]
}

final object eu.vendeli.rethis.codecs.generic/TouchCommandCodec { // eu.vendeli.rethis.codecs.generic/TouchCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.generic/TouchCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/TouchCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/TouchCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.generic/TtlCommandCodec { // eu.vendeli.rethis.codecs.generic/TtlCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.generic/TtlCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/TtlCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/TtlCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.generic/TypeCommandCodec { // eu.vendeli.rethis.codecs.generic/TypeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.generic/TypeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/TypeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/TypeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.generic/UnlinkCommandCodec { // eu.vendeli.rethis.codecs.generic/UnlinkCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.generic/UnlinkCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/UnlinkCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/UnlinkCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.generic/WaitAofCommandCodec { // eu.vendeli.rethis.codecs.generic/WaitAofCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.response.common/WaitAofResult // eu.vendeli.rethis.codecs.generic/WaitAofCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Long, kotlin/Long, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/WaitAofCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Long;kotlin.Long;kotlin.Long){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Long, kotlin/Long, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/WaitAofCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Long;kotlin.Long;kotlin.Long){}[0]
}

final object eu.vendeli.rethis.codecs.generic/WaitCommandCodec { // eu.vendeli.rethis.codecs.generic/WaitCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.generic/WaitCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Long, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/WaitCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Long;kotlin.Long){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Long, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.generic/WaitCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Long;kotlin.Long){}[0]
}

final object eu.vendeli.rethis.codecs.geospatial/GeoAddCommandCodec { // eu.vendeli.rethis.codecs.geospatial/GeoAddCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.geospatial/GeoAddCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.response.geospatial/GeoMember>..., eu.vendeli.rethis.shared.request.geospatial/GeoAddOption.UpsertMode?, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.geospatial/GeoAddCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.response.geospatial.GeoMember>...;eu.vendeli.rethis.shared.request.geospatial.GeoAddOption.UpsertMode?;kotlin.Boolean?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.response.geospatial/GeoMember>..., eu.vendeli.rethis.shared.request.geospatial/GeoAddOption.UpsertMode?, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.geospatial/GeoAddCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.response.geospatial.GeoMember>...;eu.vendeli.rethis.shared.request.geospatial.GeoAddOption.UpsertMode?;kotlin.Boolean?){}[0]
}

final object eu.vendeli.rethis.codecs.geospatial/GeoDistCommandCodec { // eu.vendeli.rethis.codecs.geospatial/GeoDistCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Double? // eu.vendeli.rethis.codecs.geospatial/GeoDistCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.response.geospatial/GeoUnit?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.geospatial/GeoDistCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.response.geospatial.GeoUnit?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.response.geospatial/GeoUnit?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.geospatial/GeoDistCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.response.geospatial.GeoUnit?){}[0]
}

final object eu.vendeli.rethis.codecs.geospatial/GeoHashCommandCodec { // eu.vendeli.rethis.codecs.geospatial/GeoHashCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.geospatial/GeoHashCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.geospatial/GeoHashCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.geospatial/GeoHashCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.geospatial/GeoPosCommandCodec { // eu.vendeli.rethis.codecs.geospatial/GeoPosCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin.collections/List<eu.vendeli.rethis.shared.response.geospatial/GeoPosition>?> // eu.vendeli.rethis.codecs.geospatial/GeoPosCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.geospatial/GeoPosCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.geospatial/GeoPosCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.geospatial/GeoSearchCommandCodec { // eu.vendeli.rethis.codecs.geospatial/GeoSearchCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.geospatial/GeoSearchCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, eu.vendeli.rethis.shared.request.geospatial/CenterPoint, eu.vendeli.rethis.shared.request.geospatial/Shape, kotlin/Boolean?, kotlin/Boolean?, kotlin/Boolean?, kotlin/Long?, kotlin/Boolean?, eu.vendeli.rethis.shared.response.geospatial/GeoSort?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.geospatial/GeoSearchCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;eu.vendeli.rethis.shared.request.geospatial.CenterPoint;eu.vendeli.rethis.shared.request.geospatial.Shape;kotlin.Boolean?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Long?;kotlin.Boolean?;eu.vendeli.rethis.shared.response.geospatial.GeoSort?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, eu.vendeli.rethis.shared.request.geospatial/CenterPoint, eu.vendeli.rethis.shared.request.geospatial/Shape, kotlin/Boolean?, kotlin/Boolean?, kotlin/Boolean?, kotlin/Long?, kotlin/Boolean?, eu.vendeli.rethis.shared.response.geospatial/GeoSort?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.geospatial/GeoSearchCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;eu.vendeli.rethis.shared.request.geospatial.CenterPoint;eu.vendeli.rethis.shared.request.geospatial.Shape;kotlin.Boolean?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Long?;kotlin.Boolean?;eu.vendeli.rethis.shared.response.geospatial.GeoSort?){}[0]
}

final object eu.vendeli.rethis.codecs.geospatial/GeoSearchStoreCommandCodec { // eu.vendeli.rethis.codecs.geospatial/GeoSearchStoreCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.geospatial/GeoSearchStoreCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.geospatial/CenterPoint, eu.vendeli.rethis.shared.request.geospatial/Shape, eu.vendeli.rethis.shared.response.geospatial/GeoSort?, kotlin/Long?, kotlin/Boolean?, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.geospatial/GeoSearchStoreCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.geospatial.CenterPoint;eu.vendeli.rethis.shared.request.geospatial.Shape;eu.vendeli.rethis.shared.response.geospatial.GeoSort?;kotlin.Long?;kotlin.Boolean?;kotlin.Boolean?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.geospatial/CenterPoint, eu.vendeli.rethis.shared.request.geospatial/Shape, eu.vendeli.rethis.shared.response.geospatial/GeoSort?, kotlin/Long?, kotlin/Boolean?, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.geospatial/GeoSearchStoreCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.geospatial.CenterPoint;eu.vendeli.rethis.shared.request.geospatial.Shape;eu.vendeli.rethis.shared.response.geospatial.GeoSort?;kotlin.Long?;kotlin.Boolean?;kotlin.Boolean?){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HDelCommandCodec { // eu.vendeli.rethis.codecs.hash/HDelCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.hash/HDelCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HDelCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HDelCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HExistsCommandCodec { // eu.vendeli.rethis.codecs.hash/HExistsCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.hash/HExistsCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HExistsCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HExistsCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HExpireAtCommandCodec { // eu.vendeli.rethis.codecs.hash/HExpireAtCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/Long> // eu.vendeli.rethis.codecs.hash/HExpireAtCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin.time/Instant, kotlin/Array<out kotlin/String>..., eu.vendeli.rethis.shared.request.common/UpdateStrategyOption?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HExpireAtCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.time.Instant;kotlin.Array<out|kotlin.String>...;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin.time/Instant, kotlin/Array<out kotlin/String>..., eu.vendeli.rethis.shared.request.common/UpdateStrategyOption?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HExpireAtCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.time.Instant;kotlin.Array<out|kotlin.String>...;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption?){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HExpireCommandCodec { // eu.vendeli.rethis.codecs.hash/HExpireCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/Long> // eu.vendeli.rethis.codecs.hash/HExpireCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin.time/Duration, kotlin/Array<out kotlin/String>..., eu.vendeli.rethis.shared.request.common/UpdateStrategyOption?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HExpireCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.time.Duration;kotlin.Array<out|kotlin.String>...;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin.time/Duration, kotlin/Array<out kotlin/String>..., eu.vendeli.rethis.shared.request.common/UpdateStrategyOption?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HExpireCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.time.Duration;kotlin.Array<out|kotlin.String>...;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption?){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HExpireTimeCommandCodec { // eu.vendeli.rethis.codecs.hash/HExpireTimeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/Long> // eu.vendeli.rethis.codecs.hash/HExpireTimeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HExpireTimeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HExpireTimeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HGetAllCommandCodec { // eu.vendeli.rethis.codecs.hash/HGetAllCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/Map<kotlin/String, kotlin/String?> // eu.vendeli.rethis.codecs.hash/HGetAllCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HGetAllCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HGetAllCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HGetCommandCodec { // eu.vendeli.rethis.codecs.hash/HGetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String? // eu.vendeli.rethis.codecs.hash/HGetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HGetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HGetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HIncrByCommandCodec { // eu.vendeli.rethis.codecs.hash/HIncrByCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.hash/HIncrByCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HIncrByCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Long){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HIncrByCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Long){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HIncrByFloatCommandCodec { // eu.vendeli.rethis.codecs.hash/HIncrByFloatCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Double // eu.vendeli.rethis.codecs.hash/HIncrByFloatCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Double): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HIncrByFloatCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Double){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Double): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HIncrByFloatCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Double){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HKeysCommandCodec { // eu.vendeli.rethis.codecs.hash/HKeysCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.hash/HKeysCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HKeysCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HKeysCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HLenCommandCodec { // eu.vendeli.rethis.codecs.hash/HLenCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.hash/HLenCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HLenCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HLenCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HMGetCommandCodec { // eu.vendeli.rethis.codecs.hash/HMGetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String?> // eu.vendeli.rethis.codecs.hash/HMGetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HMGetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HMGetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HMSetCommandCodec { // eu.vendeli.rethis.codecs.hash/HMSetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.hash/HMSetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.common/FieldValue>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HMSetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.common.FieldValue>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.common/FieldValue>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HMSetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.common.FieldValue>...){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HPersistCommandCodec { // eu.vendeli.rethis.codecs.hash/HPersistCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/Long> // eu.vendeli.rethis.codecs.hash/HPersistCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HPersistCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HPersistCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HPttlCommandCodec { // eu.vendeli.rethis.codecs.hash/HPttlCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/Long> // eu.vendeli.rethis.codecs.hash/HPttlCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HPttlCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HPttlCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HRandFieldCommandCodec { // eu.vendeli.rethis.codecs.hash/HRandFieldCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String? // eu.vendeli.rethis.codecs.hash/HRandFieldCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HRandFieldCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HRandFieldCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HRandFieldCountCommandCodec { // eu.vendeli.rethis.codecs.hash/HRandFieldCountCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.hash/HRandFieldCountCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HRandFieldCountCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.Boolean?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HRandFieldCountCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.Boolean?){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HScanCommandCodec { // eu.vendeli.rethis.codecs.hash/HScanCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.response.common/ScanResult<kotlin/Pair<kotlin/String, kotlin/String>> // eu.vendeli.rethis.codecs.hash/HScanCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/Array<out eu.vendeli.rethis.shared.request.hash/HScanOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HScanCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.Array<out|eu.vendeli.rethis.shared.request.hash.HScanOption>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/Array<out eu.vendeli.rethis.shared.request.hash/HScanOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HScanCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.Array<out|eu.vendeli.rethis.shared.request.hash.HScanOption>...){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HSetCommandCodec { // eu.vendeli.rethis.codecs.hash/HSetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.hash/HSetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.common/FieldValue>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HSetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.common.FieldValue>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.common/FieldValue>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HSetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.common.FieldValue>...){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HSetNxCommandCodec { // eu.vendeli.rethis.codecs.hash/HSetNxCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.hash/HSetNxCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HSetNxCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HSetNxCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HStrlenCommandCodec { // eu.vendeli.rethis.codecs.hash/HStrlenCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.hash/HStrlenCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HStrlenCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HStrlenCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HTtlCommandCodec { // eu.vendeli.rethis.codecs.hash/HTtlCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/Long> // eu.vendeli.rethis.codecs.hash/HTtlCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HTtlCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HTtlCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.hash/HValsCommandCodec { // eu.vendeli.rethis.codecs.hash/HValsCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.hash/HValsCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HValsCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hash/HValsCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.hyperloglog/PfAddCommandCodec { // eu.vendeli.rethis.codecs.hyperloglog/PfAddCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.hyperloglog/PfAddCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hyperloglog/PfAddCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hyperloglog/PfAddCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.hyperloglog/PfCountCommandCodec { // eu.vendeli.rethis.codecs.hyperloglog/PfCountCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.hyperloglog/PfCountCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hyperloglog/PfCountCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hyperloglog/PfCountCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.hyperloglog/PfMergeCommandCodec { // eu.vendeli.rethis.codecs.hyperloglog/PfMergeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.hyperloglog/PfMergeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hyperloglog/PfMergeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.hyperloglog/PfMergeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonArrAppendCommandCodec { // eu.vendeli.rethis.codecs.json/JsonArrAppendCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.json/JsonArrAppendCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String?, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonArrAppendCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String?;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String?, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonArrAppendCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String?;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonArrIndexCommandCodec { // eu.vendeli.rethis.codecs.json/JsonArrIndexCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.json/JsonArrIndexCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String, kotlin/Long?, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonArrIndexCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String;kotlin.Long?;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String, kotlin/Long?, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonArrIndexCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String;kotlin.Long?;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonArrInsertCommandCodec { // eu.vendeli.rethis.codecs.json/JsonArrInsertCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.json/JsonArrInsertCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Long, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonArrInsertCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Long;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Long, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonArrInsertCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Long;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonArrLenCommandCodec { // eu.vendeli.rethis.codecs.json/JsonArrLenCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.json/JsonArrLenCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonArrLenCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonArrLenCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String?){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonArrPopCommandCodec { // eu.vendeli.rethis.codecs.json/JsonArrPopCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.codecs.json/JsonArrPopCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String?, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonArrPopCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String?;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String?, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonArrPopCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String?;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonArrTrimCommandCodec { // eu.vendeli.rethis.codecs.json/JsonArrTrimCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.json/JsonArrTrimCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Long, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonArrTrimCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Long;kotlin.Long){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Long, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonArrTrimCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Long;kotlin.Long){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonClearCommandCodec { // eu.vendeli.rethis.codecs.json/JsonClearCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.json/JsonClearCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonClearCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonClearCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String?){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonDelCommandCodec { // eu.vendeli.rethis.codecs.json/JsonDelCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.json/JsonDelCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonDelCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonDelCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String?){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonForgetCommandCodec { // eu.vendeli.rethis.codecs.json/JsonForgetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.json/JsonForgetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonForgetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonForgetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String?){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonGetCommandCodec { // eu.vendeli.rethis.codecs.json/JsonGetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String? // eu.vendeli.rethis.codecs.json/JsonGetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.json/JsonGetOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonGetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.json.JsonGetOption>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.json/JsonGetOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonGetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.json.JsonGetOption>...){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonMGetCommandCodec { // eu.vendeli.rethis.codecs.json/JsonMGetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String?> // eu.vendeli.rethis.codecs.json/JsonMGetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonMGetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonMGetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonMSetCommandCodec { // eu.vendeli.rethis.codecs.json/JsonMSetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.json/JsonMSetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out eu.vendeli.rethis.shared.request.json/JsonEntry>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonMSetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|eu.vendeli.rethis.shared.request.json.JsonEntry>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out eu.vendeli.rethis.shared.request.json/JsonEntry>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonMSetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|eu.vendeli.rethis.shared.request.json.JsonEntry>...){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonMergeCommandCodec { // eu.vendeli.rethis.codecs.json/JsonMergeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.json/JsonMergeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonMergeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonMergeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonNumIncrByCommandCodec { // eu.vendeli.rethis.codecs.json/JsonNumIncrByCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.codecs.json/JsonNumIncrByCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Double): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonNumIncrByCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Double){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Double): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonNumIncrByCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Double){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonNumMultByCommandCodec { // eu.vendeli.rethis.codecs.json/JsonNumMultByCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.codecs.json/JsonNumMultByCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Double): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonNumMultByCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Double){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Double): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonNumMultByCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Double){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonObjKeysCommandCodec { // eu.vendeli.rethis.codecs.json/JsonObjKeysCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.json/JsonObjKeysCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonObjKeysCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonObjKeysCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String?){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonObjLenCommandCodec { // eu.vendeli.rethis.codecs.json/JsonObjLenCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.codecs.json/JsonObjLenCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonObjLenCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonObjLenCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String?){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonRespCommandCodec { // eu.vendeli.rethis.codecs.json/JsonRespCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.json/JsonRespCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonRespCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonRespCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String?){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonSetCommandCodec { // eu.vendeli.rethis.codecs.json/JsonSetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.json/JsonSetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.string/UpsertMode?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonSetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.string.UpsertMode?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.string/UpsertMode?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonSetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.string.UpsertMode?){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonStrAppendCommandCodec { // eu.vendeli.rethis.codecs.json/JsonStrAppendCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.json/JsonStrAppendCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonStrAppendCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonStrAppendCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String?){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonStrLenCommandCodec { // eu.vendeli.rethis.codecs.json/JsonStrLenCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.json/JsonStrLenCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonStrLenCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonStrLenCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String?){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonToggleCommandCodec { // eu.vendeli.rethis.codecs.json/JsonToggleCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.codecs.json/JsonToggleCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonToggleCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonToggleCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.json/JsonTypeCommandCodec { // eu.vendeli.rethis.codecs.json/JsonTypeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.codecs.json/JsonTypeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonTypeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.json/JsonTypeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String?){}[0]
}

final object eu.vendeli.rethis.codecs.list/BlMoveCommandCodec { // eu.vendeli.rethis.codecs.list/BlMoveCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String? // eu.vendeli.rethis.codecs.list/BlMoveCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.response.common/MoveDirection, eu.vendeli.rethis.shared.response.common/MoveDirection, kotlin/Double): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/BlMoveCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.response.common.MoveDirection;eu.vendeli.rethis.shared.response.common.MoveDirection;kotlin.Double){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.response.common/MoveDirection, eu.vendeli.rethis.shared.response.common/MoveDirection, kotlin/Double): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/BlMoveCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.response.common.MoveDirection;eu.vendeli.rethis.shared.response.common.MoveDirection;kotlin.Double){}[0]
}

final object eu.vendeli.rethis.codecs.list/BlPopCommandCodec { // eu.vendeli.rethis.codecs.list/BlPopCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.response.common/PopResult? // eu.vendeli.rethis.codecs.list/BlPopCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>..., kotlin/Double): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/BlPopCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...;kotlin.Double){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>..., kotlin/Double): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/BlPopCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...;kotlin.Double){}[0]
}

final object eu.vendeli.rethis.codecs.list/BlmPopCommandCodec { // eu.vendeli.rethis.codecs.list/BlmPopCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.response.common/MPopResult>? // eu.vendeli.rethis.codecs.list/BlmPopCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Double, kotlin/Array<out kotlin/String>..., eu.vendeli.rethis.shared.response.common/MoveDirection, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/BlmPopCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Double;kotlin.Array<out|kotlin.String>...;eu.vendeli.rethis.shared.response.common.MoveDirection;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Double, kotlin/Array<out kotlin/String>..., eu.vendeli.rethis.shared.response.common/MoveDirection, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/BlmPopCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Double;kotlin.Array<out|kotlin.String>...;eu.vendeli.rethis.shared.response.common.MoveDirection;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.list/BrPopCommandCodec { // eu.vendeli.rethis.codecs.list/BrPopCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.response.common/PopResult? // eu.vendeli.rethis.codecs.list/BrPopCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>..., kotlin/Double): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/BrPopCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...;kotlin.Double){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>..., kotlin/Double): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/BrPopCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...;kotlin.Double){}[0]
}

final object eu.vendeli.rethis.codecs.list/LIndexCommandCodec { // eu.vendeli.rethis.codecs.list/LIndexCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String? // eu.vendeli.rethis.codecs.list/LIndexCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LIndexCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LIndexCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long){}[0]
}

final object eu.vendeli.rethis.codecs.list/LInsertCommandCodec { // eu.vendeli.rethis.codecs.list/LInsertCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.list/LInsertCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, eu.vendeli.rethis.shared.request.list/LInsertPlace, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LInsertCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;eu.vendeli.rethis.shared.request.list.LInsertPlace;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, eu.vendeli.rethis.shared.request.list/LInsertPlace, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LInsertCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;eu.vendeli.rethis.shared.request.list.LInsertPlace;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.list/LLenCommandCodec { // eu.vendeli.rethis.codecs.list/LLenCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.list/LLenCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LLenCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LLenCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.list/LMoveCommandCodec { // eu.vendeli.rethis.codecs.list/LMoveCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.list/LMoveCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.response.common/MoveDirection, eu.vendeli.rethis.shared.response.common/MoveDirection): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LMoveCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.response.common.MoveDirection;eu.vendeli.rethis.shared.response.common.MoveDirection){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.response.common/MoveDirection, eu.vendeli.rethis.shared.response.common/MoveDirection): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LMoveCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.response.common.MoveDirection;eu.vendeli.rethis.shared.response.common.MoveDirection){}[0]
}

final object eu.vendeli.rethis.codecs.list/LPopCommandCodec { // eu.vendeli.rethis.codecs.list/LPopCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String? // eu.vendeli.rethis.codecs.list/LPopCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LPopCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LPopCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.list/LPopCountCommandCodec { // eu.vendeli.rethis.codecs.list/LPopCountCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.list/LPopCountCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LPopCountCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LPopCountCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.list/LPosCommandCodec { // eu.vendeli.rethis.codecs.list/LPosCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long? // eu.vendeli.rethis.codecs.list/LPosCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.list/LPosOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LPosCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.list.LPosOption>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.list/LPosOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LPosCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.list.LPosOption>...){}[0]
}

final object eu.vendeli.rethis.codecs.list/LPosCountCommandCodec { // eu.vendeli.rethis.codecs.list/LPosCountCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/Long> // eu.vendeli.rethis.codecs.list/LPosCountCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Long, kotlin/Array<out eu.vendeli.rethis.shared.request.list/LPosOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LPosCountCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Long;kotlin.Array<out|eu.vendeli.rethis.shared.request.list.LPosOption>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Long, kotlin/Array<out eu.vendeli.rethis.shared.request.list/LPosOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LPosCountCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Long;kotlin.Array<out|eu.vendeli.rethis.shared.request.list.LPosOption>...){}[0]
}

final object eu.vendeli.rethis.codecs.list/LPushCommandCodec { // eu.vendeli.rethis.codecs.list/LPushCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.list/LPushCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LPushCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LPushCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.list/LPushxCommandCodec { // eu.vendeli.rethis.codecs.list/LPushxCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.list/LPushxCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LPushxCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LPushxCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.list/LRangeCommandCodec { // eu.vendeli.rethis.codecs.list/LRangeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.list/LRangeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LRangeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.Long){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LRangeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.Long){}[0]
}

final object eu.vendeli.rethis.codecs.list/LRemCommandCodec { // eu.vendeli.rethis.codecs.list/LRemCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.list/LRemCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LRemCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LRemCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.list/LSetCommandCodec { // eu.vendeli.rethis.codecs.list/LSetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.list/LSetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LSetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LSetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.list/LTrimCommandCodec { // eu.vendeli.rethis.codecs.list/LTrimCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.list/LTrimCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LTrimCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.Long){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LTrimCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.Long){}[0]
}

final object eu.vendeli.rethis.codecs.list/LmPopCommandCodec { // eu.vendeli.rethis.codecs.list/LmPopCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.response.common/MPopResult>? // eu.vendeli.rethis.codecs.list/LmPopCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.response.common/MoveDirection, kotlin/Array<out kotlin/String>..., kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LmPopCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.response.common.MoveDirection;kotlin.Array<out|kotlin.String>...;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.response.common/MoveDirection, kotlin/Array<out kotlin/String>..., kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/LmPopCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.response.common.MoveDirection;kotlin.Array<out|kotlin.String>...;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.list/RPopCommandCodec { // eu.vendeli.rethis.codecs.list/RPopCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String? // eu.vendeli.rethis.codecs.list/RPopCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/RPopCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/RPopCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.list/RPopCountCommandCodec { // eu.vendeli.rethis.codecs.list/RPopCountCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.list/RPopCountCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/RPopCountCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/RPopCountCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.list/RPushCommandCodec { // eu.vendeli.rethis.codecs.list/RPushCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.list/RPushCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/RPushCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/RPushCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.list/RPushxCommandCodec { // eu.vendeli.rethis.codecs.list/RPushxCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.list/RPushxCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/RPushxCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.list/RPushxCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.pubsub/PSubscribeCommandCodec { // eu.vendeli.rethis.codecs.pubsub/PSubscribeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset) // eu.vendeli.rethis.codecs.pubsub/PSubscribeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/PSubscribeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/PSubscribeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.pubsub/PUnsubscribeCommandCodec { // eu.vendeli.rethis.codecs.pubsub/PUnsubscribeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset) // eu.vendeli.rethis.codecs.pubsub/PUnsubscribeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/PUnsubscribeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/PUnsubscribeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.pubsub/PubSubChannelsCommandCodec { // eu.vendeli.rethis.codecs.pubsub/PubSubChannelsCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.pubsub/PubSubChannelsCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/PubSubChannelsCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/PubSubChannelsCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String?){}[0]
}

final object eu.vendeli.rethis.codecs.pubsub/PubSubNumPatCommandCodec { // eu.vendeli.rethis.codecs.pubsub/PubSubNumPatCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.pubsub/PubSubNumPatCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/PubSubNumPatCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/PubSubNumPatCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.pubsub/PubSubNumSubCommandCodec { // eu.vendeli.rethis.codecs.pubsub/PubSubNumSubCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.response.common/PubSubNumEntry> // eu.vendeli.rethis.codecs.pubsub/PubSubNumSubCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/PubSubNumSubCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/PubSubNumSubCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.pubsub/PubSubShardChannelsCommandCodec { // eu.vendeli.rethis.codecs.pubsub/PubSubShardChannelsCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.pubsub/PubSubShardChannelsCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/PubSubShardChannelsCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/PubSubShardChannelsCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String?){}[0]
}

final object eu.vendeli.rethis.codecs.pubsub/PubSubShardNumSubCommandCodec { // eu.vendeli.rethis.codecs.pubsub/PubSubShardNumSubCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.response.common/PubSubNumEntry> // eu.vendeli.rethis.codecs.pubsub/PubSubShardNumSubCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/PubSubShardNumSubCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/PubSubShardNumSubCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.pubsub/PublishCommandCodec { // eu.vendeli.rethis.codecs.pubsub/PublishCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.pubsub/PublishCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/PublishCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/PublishCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.pubsub/SPublishCommandCodec { // eu.vendeli.rethis.codecs.pubsub/SPublishCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.pubsub/SPublishCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/SPublishCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/SPublishCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.pubsub/SSubscribeCommandCodec { // eu.vendeli.rethis.codecs.pubsub/SSubscribeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset) // eu.vendeli.rethis.codecs.pubsub/SSubscribeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/SSubscribeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/SSubscribeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.pubsub/SUnsubscribeCommandCodec { // eu.vendeli.rethis.codecs.pubsub/SUnsubscribeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset) // eu.vendeli.rethis.codecs.pubsub/SUnsubscribeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/SUnsubscribeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/SUnsubscribeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.pubsub/SubscribeCommandCodec { // eu.vendeli.rethis.codecs.pubsub/SubscribeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset) // eu.vendeli.rethis.codecs.pubsub/SubscribeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/SubscribeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/SubscribeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.pubsub/UnsubscribeCommandCodec { // eu.vendeli.rethis.codecs.pubsub/UnsubscribeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset) // eu.vendeli.rethis.codecs.pubsub/UnsubscribeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/UnsubscribeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.pubsub/UnsubscribeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.scripting/EvalCommandCodec { // eu.vendeli.rethis.codecs.scripting/EvalCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.codecs.scripting/EvalCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/String>): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/EvalCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.String>){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/String>): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/EvalCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.String>){}[0]
}

final object eu.vendeli.rethis.codecs.scripting/EvalRoCommandCodec { // eu.vendeli.rethis.codecs.scripting/EvalRoCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.codecs.scripting/EvalRoCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/String>): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/EvalRoCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.String>){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/String>): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/EvalRoCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.String>){}[0]
}

final object eu.vendeli.rethis.codecs.scripting/EvalShaCommandCodec { // eu.vendeli.rethis.codecs.scripting/EvalShaCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.codecs.scripting/EvalShaCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/String>): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/EvalShaCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.String>){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/String>): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/EvalShaCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.String>){}[0]
}

final object eu.vendeli.rethis.codecs.scripting/EvalShaRoCommandCodec { // eu.vendeli.rethis.codecs.scripting/EvalShaRoCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.codecs.scripting/EvalShaRoCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/String>): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/EvalShaRoCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.String>){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/String>): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/EvalShaRoCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.String>){}[0]
}

final object eu.vendeli.rethis.codecs.scripting/FcallCommandCodec { // eu.vendeli.rethis.codecs.scripting/FcallCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.codecs.scripting/FcallCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/String>): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/FcallCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.String>){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/String>): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/FcallCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.String>){}[0]
}

final object eu.vendeli.rethis.codecs.scripting/FcallRoCommandCodec { // eu.vendeli.rethis.codecs.scripting/FcallRoCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.codecs.scripting/FcallRoCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/String>): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/FcallRoCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.String>){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/String>): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/FcallRoCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.String>){}[0]
}

final object eu.vendeli.rethis.codecs.scripting/FunctionDeleteCommandCodec { // eu.vendeli.rethis.codecs.scripting/FunctionDeleteCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.scripting/FunctionDeleteCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/FunctionDeleteCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/FunctionDeleteCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.scripting/FunctionDumpCommandCodec { // eu.vendeli.rethis.codecs.scripting/FunctionDumpCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/ByteArray? // eu.vendeli.rethis.codecs.scripting/FunctionDumpCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/FunctionDumpCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/FunctionDumpCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.scripting/FunctionFlushCommandCodec { // eu.vendeli.rethis.codecs.scripting/FunctionFlushCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.scripting/FunctionFlushCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.common/FlushType): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/FunctionFlushCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.common.FlushType){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.common/FlushType): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/FunctionFlushCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.common.FlushType){}[0]
}

final object eu.vendeli.rethis.codecs.scripting/FunctionKillCommandCodec { // eu.vendeli.rethis.codecs.scripting/FunctionKillCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.scripting/FunctionKillCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/FunctionKillCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/FunctionKillCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.scripting/FunctionListCommandCodec { // eu.vendeli.rethis.codecs.scripting/FunctionListCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.scripting/FunctionListCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String?, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/FunctionListCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String?;kotlin.Boolean?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String?, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/FunctionListCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String?;kotlin.Boolean?){}[0]
}

final object eu.vendeli.rethis.codecs.scripting/FunctionLoadCommandCodec { // eu.vendeli.rethis.codecs.scripting/FunctionLoadCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.scripting/FunctionLoadCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/FunctionLoadCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Boolean?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/FunctionLoadCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Boolean?){}[0]
}

final object eu.vendeli.rethis.codecs.scripting/FunctionRestoreCommandCodec { // eu.vendeli.rethis.codecs.scripting/FunctionRestoreCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.scripting/FunctionRestoreCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/ByteArray, eu.vendeli.rethis.shared.request.scripting/FunctionRestoreOption?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/FunctionRestoreCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.ByteArray;eu.vendeli.rethis.shared.request.scripting.FunctionRestoreOption?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/ByteArray, eu.vendeli.rethis.shared.request.scripting/FunctionRestoreOption?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/FunctionRestoreCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.ByteArray;eu.vendeli.rethis.shared.request.scripting.FunctionRestoreOption?){}[0]
}

final object eu.vendeli.rethis.codecs.scripting/FunctionStatsCommandCodec { // eu.vendeli.rethis.codecs.scripting/FunctionStatsCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/Map<kotlin/String, eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.scripting/FunctionStatsCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/FunctionStatsCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/FunctionStatsCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.scripting/ScriptDebugCommandCodec { // eu.vendeli.rethis.codecs.scripting/ScriptDebugCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.scripting/ScriptDebugCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.scripting/ScriptDebugMode): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/ScriptDebugCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.scripting.ScriptDebugMode){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.scripting/ScriptDebugMode): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/ScriptDebugCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.scripting.ScriptDebugMode){}[0]
}

final object eu.vendeli.rethis.codecs.scripting/ScriptExistsCommandCodec { // eu.vendeli.rethis.codecs.scripting/ScriptExistsCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/Boolean> // eu.vendeli.rethis.codecs.scripting/ScriptExistsCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/ScriptExistsCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/ScriptExistsCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.scripting/ScriptFlushCommandCodec { // eu.vendeli.rethis.codecs.scripting/ScriptFlushCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.scripting/ScriptFlushCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.common/FlushType?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/ScriptFlushCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.common.FlushType?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.common/FlushType?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/ScriptFlushCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.common.FlushType?){}[0]
}

final object eu.vendeli.rethis.codecs.scripting/ScriptKillCommandCodec { // eu.vendeli.rethis.codecs.scripting/ScriptKillCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.scripting/ScriptKillCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/ScriptKillCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/ScriptKillCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.scripting/ScriptLoadCommandCodec { // eu.vendeli.rethis.codecs.scripting/ScriptLoadCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.scripting/ScriptLoadCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/ScriptLoadCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.scripting/ScriptLoadCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.sentinel/SentinelCkQuorumCommandCodec { // eu.vendeli.rethis.codecs.sentinel/SentinelCkQuorumCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.sentinel/SentinelCkQuorumCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelCkQuorumCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelCkQuorumCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.sentinel/SentinelConfigGetCommandCodec { // eu.vendeli.rethis.codecs.sentinel/SentinelConfigGetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/Map<kotlin/String, kotlin/String> // eu.vendeli.rethis.codecs.sentinel/SentinelConfigGetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelConfigGetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelConfigGetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.sentinel/SentinelConfigSetCommandCodec { // eu.vendeli.rethis.codecs.sentinel/SentinelConfigSetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.sentinel/SentinelConfigSetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelConfigSetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelConfigSetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.sentinel/SentinelFailoverCommandCodec { // eu.vendeli.rethis.codecs.sentinel/SentinelFailoverCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.sentinel/SentinelFailoverCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelFailoverCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelFailoverCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.sentinel/SentinelFlushConfigCommandCodec { // eu.vendeli.rethis.codecs.sentinel/SentinelFlushConfigCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.sentinel/SentinelFlushConfigCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelFlushConfigCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelFlushConfigCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.sentinel/SentinelGetMasterAddrCommandCodec { // eu.vendeli.rethis.codecs.sentinel/SentinelGetMasterAddrCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.sentinel/SentinelGetMasterAddrCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelGetMasterAddrCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelGetMasterAddrCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.sentinel/SentinelInfoCacheCommandCodec { // eu.vendeli.rethis.codecs.sentinel/SentinelInfoCacheCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/Map<kotlin/String, kotlin/String> // eu.vendeli.rethis.codecs.sentinel/SentinelInfoCacheCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelInfoCacheCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelInfoCacheCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.sentinel/SentinelMasterCommandCodec { // eu.vendeli.rethis.codecs.sentinel/SentinelMasterCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.sentinel/SentinelMasterCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelMasterCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelMasterCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.sentinel/SentinelMastersCommandCodec { // eu.vendeli.rethis.codecs.sentinel/SentinelMastersCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.sentinel/SentinelMastersCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelMastersCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelMastersCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.sentinel/SentinelMonitorCommandCodec { // eu.vendeli.rethis.codecs.sentinel/SentinelMonitorCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.sentinel/SentinelMonitorCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Int, kotlin/Int): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelMonitorCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Int;kotlin.Int){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Int, kotlin/Int): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelMonitorCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Int;kotlin.Int){}[0]
}

final object eu.vendeli.rethis.codecs.sentinel/SentinelMyIdCommandCodec { // eu.vendeli.rethis.codecs.sentinel/SentinelMyIdCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.sentinel/SentinelMyIdCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelMyIdCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelMyIdCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.sentinel/SentinelPendingScriptsCommandCodec { // eu.vendeli.rethis.codecs.sentinel/SentinelPendingScriptsCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.sentinel/SentinelPendingScriptsCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelPendingScriptsCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelPendingScriptsCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.sentinel/SentinelRemoveCommandCodec { // eu.vendeli.rethis.codecs.sentinel/SentinelRemoveCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.sentinel/SentinelRemoveCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelRemoveCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelRemoveCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.sentinel/SentinelReplicasCommandCodec { // eu.vendeli.rethis.codecs.sentinel/SentinelReplicasCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.sentinel/SentinelReplicasCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelReplicasCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelReplicasCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.sentinel/SentinelResetCommandCodec { // eu.vendeli.rethis.codecs.sentinel/SentinelResetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.sentinel/SentinelResetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelResetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelResetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.sentinel/SentinelSentinelsCommandCodec { // eu.vendeli.rethis.codecs.sentinel/SentinelSentinelsCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.sentinel/SentinelSentinelsCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelSentinelsCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelSentinelsCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.sentinel/SentinelSetCommandCodec { // eu.vendeli.rethis.codecs.sentinel/SentinelSetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.sentinel/SentinelSetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.common/FieldValue>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelSetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.common.FieldValue>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.common/FieldValue>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelSetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.common.FieldValue>...){}[0]
}

final object eu.vendeli.rethis.codecs.sentinel/SentinelSimulateFailureCommandCodec { // eu.vendeli.rethis.codecs.sentinel/SentinelSimulateFailureCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.sentinel/SentinelSimulateFailureCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.sentinel/SentinelSimulateFailureMode): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelSimulateFailureCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.sentinel.SentinelSimulateFailureMode){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.sentinel/SentinelSimulateFailureMode): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sentinel/SentinelSimulateFailureCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.sentinel.SentinelSimulateFailureMode){}[0]
}

final object eu.vendeli.rethis.codecs.server/AclCatCommandCodec { // eu.vendeli.rethis.codecs.server/AclCatCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.server/AclCatCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclCatCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclCatCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String?){}[0]
}

final object eu.vendeli.rethis.codecs.server/AclDelUserCommandCodec { // eu.vendeli.rethis.codecs.server/AclDelUserCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.server/AclDelUserCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclDelUserCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclDelUserCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.server/AclDryRunCommandCodec { // eu.vendeli.rethis.codecs.server/AclDryRunCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.server/AclDryRunCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclDryRunCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclDryRunCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.server/AclGenPassCommandCodec { // eu.vendeli.rethis.codecs.server/AclGenPassCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.server/AclGenPassCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclGenPassCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclGenPassCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.server/AclGetUserCommandCodec { // eu.vendeli.rethis.codecs.server/AclGetUserCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/Map<kotlin/String, eu.vendeli.rethis.shared.types/RType>? // eu.vendeli.rethis.codecs.server/AclGetUserCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclGetUserCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclGetUserCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.server/AclListCommandCodec { // eu.vendeli.rethis.codecs.server/AclListCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.server/AclListCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclListCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclListCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.server/AclLoadCommandCodec { // eu.vendeli.rethis.codecs.server/AclLoadCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.server/AclLoadCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclLoadCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclLoadCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.server/AclLogCommandCodec { // eu.vendeli.rethis.codecs.server/AclLogCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.server/AclLogCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Long?, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclLogCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Long?;kotlin.Boolean?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Long?, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclLogCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Long?;kotlin.Boolean?){}[0]
}

final object eu.vendeli.rethis.codecs.server/AclSaveCommandCodec { // eu.vendeli.rethis.codecs.server/AclSaveCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.server/AclSaveCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclSaveCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclSaveCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.server/AclSetUserCommandCodec { // eu.vendeli.rethis.codecs.server/AclSetUserCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.server/AclSetUserCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclSetUserCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclSetUserCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.server/AclUsersCommandCodec { // eu.vendeli.rethis.codecs.server/AclUsersCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.server/AclUsersCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclUsersCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclUsersCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.server/AclWhoAmICommandCodec { // eu.vendeli.rethis.codecs.server/AclWhoAmICommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.server/AclWhoAmICommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclWhoAmICommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/AclWhoAmICommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.server/BgRewriteAofCommandCodec { // eu.vendeli.rethis.codecs.server/BgRewriteAofCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.server/BgRewriteAofCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/BgRewriteAofCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/BgRewriteAofCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.server/BgSaveCommandCodec { // eu.vendeli.rethis.codecs.server/BgSaveCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.server/BgSaveCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/BgSaveCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Boolean?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/BgSaveCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Boolean?){}[0]
}

final object eu.vendeli.rethis.codecs.server/CommandCountCommandCodec { // eu.vendeli.rethis.codecs.server/CommandCountCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.server/CommandCountCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/CommandCountCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/CommandCountCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.server/CommandDocsCommandCodec { // eu.vendeli.rethis.codecs.server/CommandDocsCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/Map<kotlin/String, eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.server/CommandDocsCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/CommandDocsCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/CommandDocsCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.server/CommandGetKeysAndFlagsCommandCodec { // eu.vendeli.rethis.codecs.server/CommandGetKeysAndFlagsCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.server/CommandGetKeysAndFlagsCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/CommandGetKeysAndFlagsCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/CommandGetKeysAndFlagsCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.server/CommandGetKeysCommandCodec { // eu.vendeli.rethis.codecs.server/CommandGetKeysCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.server/CommandGetKeysCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/CommandGetKeysCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/CommandGetKeysCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.server/ConfigRewriteCommandCodec { // eu.vendeli.rethis.codecs.server/ConfigRewriteCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.server/ConfigRewriteCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/ConfigRewriteCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/ConfigRewriteCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.server/FailoverCommandCodec { // eu.vendeli.rethis.codecs.server/FailoverCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.server/FailoverCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out eu.vendeli.rethis.shared.request.server/FailoverOptions>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/FailoverCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|eu.vendeli.rethis.shared.request.server.FailoverOptions>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out eu.vendeli.rethis.shared.request.server/FailoverOptions>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/FailoverCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|eu.vendeli.rethis.shared.request.server.FailoverOptions>...){}[0]
}

final object eu.vendeli.rethis.codecs.server/FlushAllCommandCodec { // eu.vendeli.rethis.codecs.server/FlushAllCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.server/FlushAllCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.common/FlushType?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/FlushAllCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.common.FlushType?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.common/FlushType?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/FlushAllCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.common.FlushType?){}[0]
}

final object eu.vendeli.rethis.codecs.server/FlushDbCommandCodec { // eu.vendeli.rethis.codecs.server/FlushDbCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.server/FlushDbCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.common/FlushType?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/FlushDbCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.common.FlushType?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.common/FlushType?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/FlushDbCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.common.FlushType?){}[0]
}

final object eu.vendeli.rethis.codecs.server/LastSaveCommandCodec { // eu.vendeli.rethis.codecs.server/LastSaveCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.server/LastSaveCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/LastSaveCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/LastSaveCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.server/LatencyDoctorCommandCodec { // eu.vendeli.rethis.codecs.server/LatencyDoctorCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.server/LatencyDoctorCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/LatencyDoctorCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/LatencyDoctorCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.server/LatencyGraphCommandCodec { // eu.vendeli.rethis.codecs.server/LatencyGraphCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.server/LatencyGraphCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/LatencyGraphCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/LatencyGraphCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.server/LatencyHistogramCommandCodec { // eu.vendeli.rethis.codecs.server/LatencyHistogramCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/Map<kotlin/String, eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.server/LatencyHistogramCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/LatencyHistogramCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/LatencyHistogramCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.server/LatencyHistoryCommandCodec { // eu.vendeli.rethis.codecs.server/LatencyHistoryCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.server/LatencyHistoryCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/LatencyHistoryCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/LatencyHistoryCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.server/LatencyLatestCommandCodec { // eu.vendeli.rethis.codecs.server/LatencyLatestCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.server/LatencyLatestCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/LatencyLatestCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/LatencyLatestCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.server/LatencyResetCommandCodec { // eu.vendeli.rethis.codecs.server/LatencyResetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.server/LatencyResetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/LatencyResetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/LatencyResetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.server/MemoryDoctorCommandCodec { // eu.vendeli.rethis.codecs.server/MemoryDoctorCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.server/MemoryDoctorCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/MemoryDoctorCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/MemoryDoctorCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.server/MemoryMallocStatsCommandCodec { // eu.vendeli.rethis.codecs.server/MemoryMallocStatsCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.server/MemoryMallocStatsCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/MemoryMallocStatsCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/MemoryMallocStatsCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.server/MemoryPurgeCommandCodec { // eu.vendeli.rethis.codecs.server/MemoryPurgeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.server/MemoryPurgeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/MemoryPurgeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/MemoryPurgeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.server/MemoryStatsCommandCodec { // eu.vendeli.rethis.codecs.server/MemoryStatsCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/Map<kotlin/String, eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.server/MemoryStatsCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/MemoryStatsCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/MemoryStatsCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.server/MemoryUsageCommandCodec { // eu.vendeli.rethis.codecs.server/MemoryUsageCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long? // eu.vendeli.rethis.codecs.server/MemoryUsageCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/MemoryUsageCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/MemoryUsageCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.server/ModuleListCommandCodec { // eu.vendeli.rethis.codecs.server/ModuleListCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.server/ModuleListCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/ModuleListCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/ModuleListCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.server/ModuleLoadCommandCodec { // eu.vendeli.rethis.codecs.server/ModuleLoadCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.server/ModuleLoadCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/ModuleLoadCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/ModuleLoadCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.server/ModuleLoadExCommandCodec { // eu.vendeli.rethis.codecs.server/ModuleLoadExCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.server/ModuleLoadExCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.server/ModuleOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/ModuleLoadExCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.server.ModuleOption>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.server/ModuleOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/ModuleLoadExCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.server.ModuleOption>...){}[0]
}

final object eu.vendeli.rethis.codecs.server/ModuleUnloadCommandCodec { // eu.vendeli.rethis.codecs.server/ModuleUnloadCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.server/ModuleUnloadCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/ModuleUnloadCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/ModuleUnloadCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.server/MonitorCommandCodec { // eu.vendeli.rethis.codecs.server/MonitorCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.codecs.server/MonitorCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/MonitorCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/MonitorCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.server/ReplicaOfCommandCodec { // eu.vendeli.rethis.codecs.server/ReplicaOfCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.server/ReplicaOfCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.server/ReplicaOfArgs): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/ReplicaOfCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.server.ReplicaOfArgs){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.server/ReplicaOfArgs): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/ReplicaOfCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.server.ReplicaOfArgs){}[0]
}

final object eu.vendeli.rethis.codecs.server/RoleCommandCodec { // eu.vendeli.rethis.codecs.server/RoleCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.server/RoleCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/RoleCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/RoleCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.server/SaveCommandCodec { // eu.vendeli.rethis.codecs.server/SaveCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.server/SaveCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/SaveCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/SaveCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.server/ShutdownCommandCodec { // eu.vendeli.rethis.codecs.server/ShutdownCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.server/ShutdownCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.server/SaveSelector?, kotlin/Array<out eu.vendeli.rethis.shared.request.server/ShutdownOptions>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/ShutdownCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.server.SaveSelector?;kotlin.Array<out|eu.vendeli.rethis.shared.request.server.ShutdownOptions>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.server/SaveSelector?, kotlin/Array<out eu.vendeli.rethis.shared.request.server/ShutdownOptions>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/ShutdownCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.server.SaveSelector?;kotlin.Array<out|eu.vendeli.rethis.shared.request.server.ShutdownOptions>...){}[0]
}

final object eu.vendeli.rethis.codecs.server/SlowLogGetCommandCodec { // eu.vendeli.rethis.codecs.server/SlowLogGetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.server/SlowLogGetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/SlowLogGetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/SlowLogGetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.server/SlowLogLenCommandCodec { // eu.vendeli.rethis.codecs.server/SlowLogLenCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.server/SlowLogLenCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/SlowLogLenCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/SlowLogLenCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.server/SlowLogResetCommandCodec { // eu.vendeli.rethis.codecs.server/SlowLogResetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.server/SlowLogResetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/SlowLogResetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/SlowLogResetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.server/SwapDbCommandCodec { // eu.vendeli.rethis.codecs.server/SwapDbCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.server/SwapDbCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Long, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/SwapDbCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Long;kotlin.Long){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Long, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/SwapDbCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Long;kotlin.Long){}[0]
}

final object eu.vendeli.rethis.codecs.server/TimeCommandCodec { // eu.vendeli.rethis.codecs.server/TimeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/Long> // eu.vendeli.rethis.codecs.server/TimeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/TimeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.server/TimeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.set/SAddCommandCodec { // eu.vendeli.rethis.codecs.set/SAddCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.set/SAddCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SAddCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SAddCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.set/SCardCommandCodec { // eu.vendeli.rethis.codecs.set/SCardCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.set/SCardCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SCardCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SCardCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.set/SDiffCommandCodec { // eu.vendeli.rethis.codecs.set/SDiffCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/Set<kotlin/String> // eu.vendeli.rethis.codecs.set/SDiffCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SDiffCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SDiffCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.set/SDiffStoreCommandCodec { // eu.vendeli.rethis.codecs.set/SDiffStoreCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.set/SDiffStoreCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SDiffStoreCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SDiffStoreCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.set/SInterCardCommandCodec { // eu.vendeli.rethis.codecs.set/SInterCardCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.set/SInterCardCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>..., kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SInterCardCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>..., kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SInterCardCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.set/SInterCommandCodec { // eu.vendeli.rethis.codecs.set/SInterCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/Set<kotlin/String> // eu.vendeli.rethis.codecs.set/SInterCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SInterCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SInterCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.set/SInterStoreCommandCodec { // eu.vendeli.rethis.codecs.set/SInterStoreCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.set/SInterStoreCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SInterStoreCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SInterStoreCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.set/SIsMemberCommandCodec { // eu.vendeli.rethis.codecs.set/SIsMemberCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.set/SIsMemberCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SIsMemberCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SIsMemberCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.set/SMembersCommandCodec { // eu.vendeli.rethis.codecs.set/SMembersCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/Set<kotlin/String> // eu.vendeli.rethis.codecs.set/SMembersCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SMembersCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SMembersCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.set/SMisMemberCommandCodec { // eu.vendeli.rethis.codecs.set/SMisMemberCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/Boolean> // eu.vendeli.rethis.codecs.set/SMisMemberCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SMisMemberCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SMisMemberCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.set/SMoveCommandCodec { // eu.vendeli.rethis.codecs.set/SMoveCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.set/SMoveCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SMoveCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SMoveCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.set/SPopCommandCodec { // eu.vendeli.rethis.codecs.set/SPopCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String? // eu.vendeli.rethis.codecs.set/SPopCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SPopCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SPopCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.set/SPopCountCommandCodec { // eu.vendeli.rethis.codecs.set/SPopCountCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.set/SPopCountCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SPopCountCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SPopCountCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.set/SRandMemberCommandCodec { // eu.vendeli.rethis.codecs.set/SRandMemberCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.set/SRandMemberCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SRandMemberCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SRandMemberCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.set/SRandMemberCountCommandCodec { // eu.vendeli.rethis.codecs.set/SRandMemberCountCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.set/SRandMemberCountCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SRandMemberCountCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SRandMemberCountCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.set/SRemCommandCodec { // eu.vendeli.rethis.codecs.set/SRemCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.set/SRemCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SRemCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SRemCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.set/SScanCommandCodec { // eu.vendeli.rethis.codecs.set/SScanCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.response.common/ScanResult<kotlin/String> // eu.vendeli.rethis.codecs.set/SScanCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/Array<out eu.vendeli.rethis.shared.request.set/SScanOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SScanCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.Array<out|eu.vendeli.rethis.shared.request.set.SScanOption>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/Array<out eu.vendeli.rethis.shared.request.set/SScanOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SScanCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.Array<out|eu.vendeli.rethis.shared.request.set.SScanOption>...){}[0]
}

final object eu.vendeli.rethis.codecs.set/SUnionCommandCodec { // eu.vendeli.rethis.codecs.set/SUnionCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/Set<kotlin/String> // eu.vendeli.rethis.codecs.set/SUnionCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SUnionCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SUnionCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.set/SUnionStoreCommandCodec { // eu.vendeli.rethis.codecs.set/SUnionStoreCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.set/SUnionStoreCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SUnionStoreCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.set/SUnionStoreCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/BzMPopCommandCodec { // eu.vendeli.rethis.codecs.sortedset/BzMPopCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.response.common/MPopResult>? // eu.vendeli.rethis.codecs.sortedset/BzMPopCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Double, eu.vendeli.rethis.shared.request.sortedset/ZPopCommonOption, kotlin/Array<out kotlin/String>..., kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/BzMPopCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Double;eu.vendeli.rethis.shared.request.sortedset.ZPopCommonOption;kotlin.Array<out|kotlin.String>...;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Double, eu.vendeli.rethis.shared.request.sortedset/ZPopCommonOption, kotlin/Array<out kotlin/String>..., kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/BzMPopCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Double;eu.vendeli.rethis.shared.request.sortedset.ZPopCommonOption;kotlin.Array<out|kotlin.String>...;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/BzPopMaxCommandCodec { // eu.vendeli.rethis.codecs.sortedset/BzPopMaxCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.response.stream/ZPopResult? // eu.vendeli.rethis.codecs.sortedset/BzPopMaxCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Double, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/BzPopMaxCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Double;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Double, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/BzPopMaxCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Double;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/BzPopMinCommandCodec { // eu.vendeli.rethis.codecs.sortedset/BzPopMinCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.response.stream/ZPopResult? // eu.vendeli.rethis.codecs.sortedset/BzPopMinCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Double, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/BzPopMinCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Double;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Double, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/BzPopMinCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Double;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZAddCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZAddCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long? // eu.vendeli.rethis.codecs.sortedset/ZAddCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.response.stream/ZMember>..., eu.vendeli.rethis.shared.request.common/UpdateStrategyOption.ExistenceRule?, eu.vendeli.rethis.shared.request.common/UpdateStrategyOption.ComparisonRule?, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZAddCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.response.stream.ZMember>...;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption.ExistenceRule?;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption.ComparisonRule?;kotlin.Boolean?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.response.stream/ZMember>..., eu.vendeli.rethis.shared.request.common/UpdateStrategyOption.ExistenceRule?, eu.vendeli.rethis.shared.request.common/UpdateStrategyOption.ComparisonRule?, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZAddCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.response.stream.ZMember>...;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption.ExistenceRule?;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption.ComparisonRule?;kotlin.Boolean?){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZAddExtendedCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZAddExtendedCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Double? // eu.vendeli.rethis.codecs.sortedset/ZAddExtendedCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.response.stream/ZMember>..., eu.vendeli.rethis.shared.request.common/UpdateStrategyOption.ExistenceRule?, eu.vendeli.rethis.shared.request.common/UpdateStrategyOption.ComparisonRule?, kotlin/Boolean?, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZAddExtendedCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.response.stream.ZMember>...;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption.ExistenceRule?;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption.ComparisonRule?;kotlin.Boolean?;kotlin.Boolean?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.response.stream/ZMember>..., eu.vendeli.rethis.shared.request.common/UpdateStrategyOption.ExistenceRule?, eu.vendeli.rethis.shared.request.common/UpdateStrategyOption.ComparisonRule?, kotlin/Boolean?, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZAddExtendedCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.response.stream.ZMember>...;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption.ExistenceRule?;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption.ComparisonRule?;kotlin.Boolean?;kotlin.Boolean?){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZCardCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZCardCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.sortedset/ZCardCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZCardCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZCardCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZCountCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZCountCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.sortedset/ZCountCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Double, kotlin/Double): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZCountCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Double;kotlin.Double){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Double, kotlin/Double): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZCountCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Double;kotlin.Double){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZDiffCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZDiffCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.sortedset/ZDiffCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>..., kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZDiffCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...;kotlin.Boolean?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>..., kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZDiffCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...;kotlin.Boolean?){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZDiffStoreCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZDiffStoreCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.sortedset/ZDiffStoreCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZDiffStoreCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZDiffStoreCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZIncrByCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZIncrByCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Double // eu.vendeli.rethis.codecs.sortedset/ZIncrByCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZIncrByCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Long){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZIncrByCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Long){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZInterCardCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZInterCardCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.sortedset/ZInterCardCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>..., kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZInterCardCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>..., kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZInterCardCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZInterCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZInterCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.sortedset/ZInterCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/Long>?, eu.vendeli.rethis.shared.request.sortedset/ZAggregate?, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZInterCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.Long>?;eu.vendeli.rethis.shared.request.sortedset.ZAggregate?;kotlin.Boolean?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/Long>?, eu.vendeli.rethis.shared.request.sortedset/ZAggregate?, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZInterCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.Long>?;eu.vendeli.rethis.shared.request.sortedset.ZAggregate?;kotlin.Boolean?){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZInterStoreCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZInterStoreCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.sortedset/ZInterStoreCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/Long>?, eu.vendeli.rethis.shared.request.sortedset/ZAggregate?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZInterStoreCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.Long>?;eu.vendeli.rethis.shared.request.sortedset.ZAggregate?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/Long>?, eu.vendeli.rethis.shared.request.sortedset/ZAggregate?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZInterStoreCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.Long>?;eu.vendeli.rethis.shared.request.sortedset.ZAggregate?){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZLexCountCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZLexCountCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.sortedset/ZLexCountCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZLexCountCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZLexCountCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZMPopCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZMPopCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.response.common/MPopResult>? // eu.vendeli.rethis.codecs.sortedset/ZMPopCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.sortedset/ZPopCommonOption, kotlin/Array<out kotlin/String>..., kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZMPopCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.sortedset.ZPopCommonOption;kotlin.Array<out|kotlin.String>...;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.request.sortedset/ZPopCommonOption, kotlin/Array<out kotlin/String>..., kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZMPopCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.request.sortedset.ZPopCommonOption;kotlin.Array<out|kotlin.String>...;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZMScoreCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZMScoreCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType>? // eu.vendeli.rethis.codecs.sortedset/ZMScoreCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZMScoreCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZMScoreCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZPopMaxCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZPopMaxCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.response.common/MPopResult> // eu.vendeli.rethis.codecs.sortedset/ZPopMaxCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZPopMaxCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZPopMaxCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZPopMinCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZPopMinCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.sortedset/ZPopMinCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZPopMinCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZPopMinCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZRandMemberCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZRandMemberCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.sortedset/ZRandMemberCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRandMemberCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRandMemberCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZRandMemberCountCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZRandMemberCountCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.sortedset/ZRandMemberCountCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRandMemberCountCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.Boolean?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRandMemberCountCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.Boolean?){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZRangeCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZRangeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.sortedset/ZRangeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.sortedset/ZRangeOption.Type?, kotlin/Boolean?, eu.vendeli.rethis.shared.request.sortedset/ZRangeOption.Limit?, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRangeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.sortedset.ZRangeOption.Type?;kotlin.Boolean?;eu.vendeli.rethis.shared.request.sortedset.ZRangeOption.Limit?;kotlin.Boolean?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.sortedset/ZRangeOption.Type?, kotlin/Boolean?, eu.vendeli.rethis.shared.request.sortedset/ZRangeOption.Limit?, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRangeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.sortedset.ZRangeOption.Type?;kotlin.Boolean?;eu.vendeli.rethis.shared.request.sortedset.ZRangeOption.Limit?;kotlin.Boolean?){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZRangeStoreCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZRangeStoreCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.sortedset/ZRangeStoreCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.sortedset/ZRangeOption.Type?, kotlin/Boolean?, eu.vendeli.rethis.shared.request.sortedset/ZRangeStoreLimit?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRangeStoreCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.sortedset.ZRangeOption.Type?;kotlin.Boolean?;eu.vendeli.rethis.shared.request.sortedset.ZRangeStoreLimit?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.sortedset/ZRangeOption.Type?, kotlin/Boolean?, eu.vendeli.rethis.shared.request.sortedset/ZRangeStoreLimit?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRangeStoreCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.sortedset.ZRangeOption.Type?;kotlin.Boolean?;eu.vendeli.rethis.shared.request.sortedset.ZRangeStoreLimit?){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZRankCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZRankCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long? // eu.vendeli.rethis.codecs.sortedset/ZRankCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRankCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRankCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZRankWithScoresCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZRankWithScoresCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType>? // eu.vendeli.rethis.codecs.sortedset/ZRankWithScoresCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRankWithScoresCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Boolean?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRankWithScoresCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Boolean?){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZRemCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZRemCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.sortedset/ZRemCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRemCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRemCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZRemRangeByLexCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZRemRangeByLexCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.sortedset/ZRemRangeByLexCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRemRangeByLexCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRemRangeByLexCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZRemRangeByRankCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZRemRangeByRankCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.sortedset/ZRemRangeByRankCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRemRangeByRankCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.Long){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRemRangeByRankCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.Long){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZRemRangeByScoreCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZRemRangeByScoreCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.sortedset/ZRemRangeByScoreCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Double, kotlin/Double): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRemRangeByScoreCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Double;kotlin.Double){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Double, kotlin/Double): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRemRangeByScoreCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Double;kotlin.Double){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZRevRankCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZRevRankCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long? // eu.vendeli.rethis.codecs.sortedset/ZRevRankCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRevRankCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRevRankCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZRevRankWithScoreCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZRevRankWithScoreCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/Long>? // eu.vendeli.rethis.codecs.sortedset/ZRevRankWithScoreCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Boolean): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRevRankWithScoreCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Boolean){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Boolean): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZRevRankWithScoreCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Boolean){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZScanCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZScanCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.response.common/ScanResult<kotlin/Pair<kotlin/String, kotlin/String>> // eu.vendeli.rethis.codecs.sortedset/ZScanCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/String?, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZScanCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.String?;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/String?, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZScanCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.String?;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZScoreCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZScoreCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Double? // eu.vendeli.rethis.codecs.sortedset/ZScoreCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZScoreCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZScoreCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZUnionCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZUnionCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.codecs.sortedset/ZUnionCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/Long>?, eu.vendeli.rethis.shared.request.sortedset/ZAggregate?, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZUnionCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.Long>?;eu.vendeli.rethis.shared.request.sortedset.ZAggregate?;kotlin.Boolean?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/Long>?, eu.vendeli.rethis.shared.request.sortedset/ZAggregate?, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZUnionCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.Long>?;eu.vendeli.rethis.shared.request.sortedset.ZAggregate?;kotlin.Boolean?){}[0]
}

final object eu.vendeli.rethis.codecs.sortedset/ZUnionStoreCommandCodec { // eu.vendeli.rethis.codecs.sortedset/ZUnionStoreCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.sortedset/ZUnionStoreCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/Long>?, eu.vendeli.rethis.shared.request.sortedset/ZAggregate?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZUnionStoreCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.Long>?;eu.vendeli.rethis.shared.request.sortedset.ZAggregate?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/Long>?, eu.vendeli.rethis.shared.request.sortedset/ZAggregate?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.sortedset/ZUnionStoreCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.Long>?;eu.vendeli.rethis.shared.request.sortedset.ZAggregate?){}[0]
}

final object eu.vendeli.rethis.codecs.stream/XAckCommandCodec { // eu.vendeli.rethis.codecs.stream/XAckCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.stream/XAckCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XAckCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XAckCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.stream/XAddCommandCodec { // eu.vendeli.rethis.codecs.stream/XAddCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String? // eu.vendeli.rethis.codecs.stream/XAddCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Boolean?, eu.vendeli.rethis.shared.request.stream/XAddOption.Trim?, eu.vendeli.rethis.shared.request.stream/XAddOption.Identifier, kotlin/Array<out eu.vendeli.rethis.shared.request.common/FieldValue>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XAddCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Boolean?;eu.vendeli.rethis.shared.request.stream.XAddOption.Trim?;eu.vendeli.rethis.shared.request.stream.XAddOption.Identifier;kotlin.Array<out|eu.vendeli.rethis.shared.request.common.FieldValue>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Boolean?, eu.vendeli.rethis.shared.request.stream/XAddOption.Trim?, eu.vendeli.rethis.shared.request.stream/XAddOption.Identifier, kotlin/Array<out eu.vendeli.rethis.shared.request.common/FieldValue>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XAddCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Boolean?;eu.vendeli.rethis.shared.request.stream.XAddOption.Trim?;eu.vendeli.rethis.shared.request.stream.XAddOption.Identifier;kotlin.Array<out|eu.vendeli.rethis.shared.request.common.FieldValue>...){}[0]
}

final object eu.vendeli.rethis.codecs.stream/XAutoClaimCommandCodec { // eu.vendeli.rethis.codecs.stream/XAutoClaimCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.stream/XAutoClaimCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/Long?, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XAutoClaimCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.Long?;kotlin.Boolean?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/Long?, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XAutoClaimCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.Long?;kotlin.Boolean?){}[0]
}

final object eu.vendeli.rethis.codecs.stream/XClaimCommandCodec { // eu.vendeli.rethis.codecs.stream/XClaimCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.stream/XClaimCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/Array<out kotlin/String>..., eu.vendeli.rethis.shared.request.stream/XClaimOption.Idle?, eu.vendeli.rethis.shared.request.stream/XClaimOption.Time?, eu.vendeli.rethis.shared.request.stream/XClaimOption.RetryCount?, kotlin/Boolean?, kotlin/Boolean?, eu.vendeli.rethis.shared.request.stream/XClaimOption.LastId?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XClaimCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.Array<out|kotlin.String>...;eu.vendeli.rethis.shared.request.stream.XClaimOption.Idle?;eu.vendeli.rethis.shared.request.stream.XClaimOption.Time?;eu.vendeli.rethis.shared.request.stream.XClaimOption.RetryCount?;kotlin.Boolean?;kotlin.Boolean?;eu.vendeli.rethis.shared.request.stream.XClaimOption.LastId?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/Array<out kotlin/String>..., eu.vendeli.rethis.shared.request.stream/XClaimOption.Idle?, eu.vendeli.rethis.shared.request.stream/XClaimOption.Time?, eu.vendeli.rethis.shared.request.stream/XClaimOption.RetryCount?, kotlin/Boolean?, kotlin/Boolean?, eu.vendeli.rethis.shared.request.stream/XClaimOption.LastId?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XClaimCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.Array<out|kotlin.String>...;eu.vendeli.rethis.shared.request.stream.XClaimOption.Idle?;eu.vendeli.rethis.shared.request.stream.XClaimOption.Time?;eu.vendeli.rethis.shared.request.stream.XClaimOption.RetryCount?;kotlin.Boolean?;kotlin.Boolean?;eu.vendeli.rethis.shared.request.stream.XClaimOption.LastId?){}[0]
}

final object eu.vendeli.rethis.codecs.stream/XDelCommandCodec { // eu.vendeli.rethis.codecs.stream/XDelCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.stream/XDelCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XDelCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XDelCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.stream/XGroupCreateCommandCodec { // eu.vendeli.rethis.codecs.stream/XGroupCreateCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.stream/XGroupCreateCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.stream/XId, kotlin/Boolean?, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XGroupCreateCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.stream.XId;kotlin.Boolean?;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.stream/XId, kotlin/Boolean?, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XGroupCreateCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.stream.XId;kotlin.Boolean?;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.stream/XGroupCreateConsumerCommandCodec { // eu.vendeli.rethis.codecs.stream/XGroupCreateConsumerCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.stream/XGroupCreateConsumerCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XGroupCreateConsumerCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XGroupCreateConsumerCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.stream/XGroupDelConsumerCommandCodec { // eu.vendeli.rethis.codecs.stream/XGroupDelConsumerCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.stream/XGroupDelConsumerCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XGroupDelConsumerCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XGroupDelConsumerCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.stream/XGroupDestroyCommandCodec { // eu.vendeli.rethis.codecs.stream/XGroupDestroyCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.stream/XGroupDestroyCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XGroupDestroyCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XGroupDestroyCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.stream/XGroupSetIdCommandCodec { // eu.vendeli.rethis.codecs.stream/XGroupSetIdCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.stream/XGroupSetIdCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.stream/XId, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XGroupSetIdCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.stream.XId;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.stream/XId, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XGroupSetIdCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.stream.XId;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.stream/XInfoConsumersCommandCodec { // eu.vendeli.rethis.codecs.stream/XInfoConsumersCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.stream/XInfoConsumersCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XInfoConsumersCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XInfoConsumersCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.stream/XInfoGroupsCommandCodec { // eu.vendeli.rethis.codecs.stream/XInfoGroupsCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.stream/XInfoGroupsCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XInfoGroupsCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XInfoGroupsCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.stream/XInfoStreamCommandCodec { // eu.vendeli.rethis.codecs.stream/XInfoStreamCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/Map<kotlin/String, eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.stream/XInfoStreamCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Boolean?, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XInfoStreamCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Boolean?;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Boolean?, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XInfoStreamCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Boolean?;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.stream/XLenCommandCodec { // eu.vendeli.rethis.codecs.stream/XLenCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.stream/XLenCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XLenCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XLenCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.stream/XPendingCommandCodec { // eu.vendeli.rethis.codecs.stream/XPendingCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.stream/XPendingCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.stream/XPendingMainFilter?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XPendingCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.stream.XPendingMainFilter?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.stream/XPendingMainFilter?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XPendingCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.stream.XPendingMainFilter?){}[0]
}

final object eu.vendeli.rethis.codecs.stream/XRangeCommandCodec { // eu.vendeli.rethis.codecs.stream/XRangeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.stream/XRangeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XRangeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XRangeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.stream/XReadCommandCodec { // eu.vendeli.rethis.codecs.stream/XReadCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/Map<kotlin/String, eu.vendeli.rethis.shared.types/RType>? // eu.vendeli.rethis.codecs.stream/XReadCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin.collections/List<kotlin/String>, kotlin.collections/List<kotlin/String>, kotlin/Long?, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XReadCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.collections.List<kotlin.String>;kotlin.collections.List<kotlin.String>;kotlin.Long?;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin.collections/List<kotlin/String>, kotlin.collections/List<kotlin/String>, kotlin/Long?, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XReadCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.collections.List<kotlin.String>;kotlin.collections.List<kotlin.String>;kotlin.Long?;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.stream/XReadGroupCommandCodec { // eu.vendeli.rethis.codecs.stream/XReadGroupCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/Map<kotlin/String, eu.vendeli.rethis.shared.types/RType>? // eu.vendeli.rethis.codecs.stream/XReadGroupCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.stream/XReadGroupKeyIds, kotlin/Array<out eu.vendeli.rethis.shared.request.stream/XReadGroupOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XReadGroupCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.stream.XReadGroupKeyIds;kotlin.Array<out|eu.vendeli.rethis.shared.request.stream.XReadGroupOption>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.stream/XReadGroupKeyIds, kotlin/Array<out eu.vendeli.rethis.shared.request.stream/XReadGroupOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XReadGroupCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.stream.XReadGroupKeyIds;kotlin.Array<out|eu.vendeli.rethis.shared.request.stream.XReadGroupOption>...){}[0]
}

final object eu.vendeli.rethis.codecs.stream/XRevRangeCommandCodec { // eu.vendeli.rethis.codecs.stream/XRevRangeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.codecs.stream/XRevRangeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XRevRangeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/String, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XRevRangeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.String;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.stream/XSetIdCommandCodec { // eu.vendeli.rethis.codecs.stream/XSetIdCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.stream/XSetIdCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Long?, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XSetIdCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Long?;kotlin.String?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Long?, kotlin/String?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XSetIdCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Long?;kotlin.String?){}[0]
}

final object eu.vendeli.rethis.codecs.stream/XTrimCommandCodec { // eu.vendeli.rethis.codecs.stream/XTrimCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.stream/XTrimCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.stream/TrimmingStrategy, eu.vendeli.rethis.shared.request.stream/Exactement?, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XTrimCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.stream.TrimmingStrategy;eu.vendeli.rethis.shared.request.stream.Exactement?;kotlin.Long?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.stream/TrimmingStrategy, eu.vendeli.rethis.shared.request.stream/Exactement?, kotlin/Long?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.stream/XTrimCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.stream.TrimmingStrategy;eu.vendeli.rethis.shared.request.stream.Exactement?;kotlin.Long?){}[0]
}

final object eu.vendeli.rethis.codecs.string/AppendCommandCodec { // eu.vendeli.rethis.codecs.string/AppendCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.string/AppendCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/AppendCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/AppendCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.string/DecrByCommandCodec { // eu.vendeli.rethis.codecs.string/DecrByCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.string/DecrByCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/DecrByCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/DecrByCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long){}[0]
}

final object eu.vendeli.rethis.codecs.string/DecrCommandCodec { // eu.vendeli.rethis.codecs.string/DecrCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.string/DecrCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/DecrCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/DecrCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.string/GetCommandCodec { // eu.vendeli.rethis.codecs.string/GetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String? // eu.vendeli.rethis.codecs.string/GetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/GetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/GetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.string/GetDelCommandCodec { // eu.vendeli.rethis.codecs.string/GetDelCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String? // eu.vendeli.rethis.codecs.string/GetDelCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/GetDelCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/GetDelCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.string/GetExCommandCodec { // eu.vendeli.rethis.codecs.string/GetExCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String? // eu.vendeli.rethis.codecs.string/GetExCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.string/GetExOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/GetExCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.string.GetExOption>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.string/GetExOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/GetExCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.string.GetExOption>...){}[0]
}

final object eu.vendeli.rethis.codecs.string/GetRangeCommandCodec { // eu.vendeli.rethis.codecs.string/GetRangeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.string/GetRangeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/GetRangeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.Long){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/GetRangeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.Long){}[0]
}

final object eu.vendeli.rethis.codecs.string/IncrByCommandCodec { // eu.vendeli.rethis.codecs.string/IncrByCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.string/IncrByCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/IncrByCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/IncrByCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long){}[0]
}

final object eu.vendeli.rethis.codecs.string/IncrByFloatCommandCodec { // eu.vendeli.rethis.codecs.string/IncrByFloatCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Double // eu.vendeli.rethis.codecs.string/IncrByFloatCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Double): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/IncrByFloatCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Double){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Double): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/IncrByFloatCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Double){}[0]
}

final object eu.vendeli.rethis.codecs.string/IncrCommandCodec { // eu.vendeli.rethis.codecs.string/IncrCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.string/IncrCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/IncrCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/IncrCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.string/LcsCommandCodec { // eu.vendeli.rethis.codecs.string/LcsCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String // eu.vendeli.rethis.codecs.string/LcsCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/LcsCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/LcsCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.string/LcsDetailedCommandCodec { // eu.vendeli.rethis.codecs.string/LcsDetailedCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.response.string/LcsResult // eu.vendeli.rethis.codecs.string/LcsDetailedCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.string/LcsMode.IDX, eu.vendeli.rethis.shared.request.string/MinMatchLen?, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/LcsDetailedCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.string.LcsMode.IDX;eu.vendeli.rethis.shared.request.string.MinMatchLen?;kotlin.Boolean?){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.string/LcsMode.IDX, eu.vendeli.rethis.shared.request.string/MinMatchLen?, kotlin/Boolean?): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/LcsDetailedCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.string.LcsMode.IDX;eu.vendeli.rethis.shared.request.string.MinMatchLen?;kotlin.Boolean?){}[0]
}

final object eu.vendeli.rethis.codecs.string/LcsLengthCommandCodec { // eu.vendeli.rethis.codecs.string/LcsLengthCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.string/LcsLengthCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.string/LcsMode.LEN): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/LcsLengthCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.string.LcsMode.LEN){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.string/LcsMode.LEN): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/LcsLengthCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.string.LcsMode.LEN){}[0]
}

final object eu.vendeli.rethis.codecs.string/MGetCommandCodec { // eu.vendeli.rethis.codecs.string/MGetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<kotlin/String?> // eu.vendeli.rethis.codecs.string/MGetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/MGetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/MGetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.codecs.string/MSetCommandCodec { // eu.vendeli.rethis.codecs.string/MSetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.string/MSetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out eu.vendeli.rethis.shared.request.string/KeyValue>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/MSetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|eu.vendeli.rethis.shared.request.string.KeyValue>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out eu.vendeli.rethis.shared.request.string/KeyValue>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/MSetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|eu.vendeli.rethis.shared.request.string.KeyValue>...){}[0]
}

final object eu.vendeli.rethis.codecs.string/MSetNxCommandCodec { // eu.vendeli.rethis.codecs.string/MSetNxCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.string/MSetNxCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out eu.vendeli.rethis.shared.request.string/KeyValue>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/MSetNxCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|eu.vendeli.rethis.shared.request.string.KeyValue>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out eu.vendeli.rethis.shared.request.string/KeyValue>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/MSetNxCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|eu.vendeli.rethis.shared.request.string.KeyValue>...){}[0]
}

final object eu.vendeli.rethis.codecs.string/SetCommandCodec { // eu.vendeli.rethis.codecs.string/SetCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/String? // eu.vendeli.rethis.codecs.string/SetCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.string/SetOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/SetCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.string.SetOption>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.string/SetOption>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/SetCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.string.SetOption>...){}[0]
}

final object eu.vendeli.rethis.codecs.string/SetRangeCommandCodec { // eu.vendeli.rethis.codecs.string/SetRangeCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.string/SetRangeCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/SetRangeCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String, kotlin/Long, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/SetRangeCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String;kotlin.Long;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.string/StrlenCommandCodec { // eu.vendeli.rethis.codecs.string/StrlenCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Long // eu.vendeli.rethis.codecs.string/StrlenCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/StrlenCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/String): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.string/StrlenCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.String){}[0]
}

final object eu.vendeli.rethis.codecs.transaction/DiscardCommandCodec { // eu.vendeli.rethis.codecs.transaction/DiscardCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.transaction/DiscardCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.transaction/DiscardCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.transaction/DiscardCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.transaction/ExecCommandCodec { // eu.vendeli.rethis.codecs.transaction/ExecCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType>? // eu.vendeli.rethis.codecs.transaction/ExecCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.transaction/ExecCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.transaction/ExecCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.transaction/MultiCommandCodec { // eu.vendeli.rethis.codecs.transaction/MultiCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.transaction/MultiCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.transaction/MultiCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.transaction/MultiCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.transaction/UnwatchCommandCodec { // eu.vendeli.rethis.codecs.transaction/UnwatchCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.transaction/UnwatchCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.transaction/UnwatchCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.transaction/UnwatchCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset){}[0]
}

final object eu.vendeli.rethis.codecs.transaction/WatchCommandCodec { // eu.vendeli.rethis.codecs.transaction/WatchCommandCodec|null[0]
    final suspend fun decode(kotlinx.io/Buffer, io.ktor.utils.io.charsets/Charset): kotlin/Boolean // eu.vendeli.rethis.codecs.transaction/WatchCommandCodec.decode|decode(kotlinx.io.Buffer;io.ktor.utils.io.charsets.Charset){}[0]
    final suspend fun encode(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.transaction/WatchCommandCodec.encode|encode(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
    final suspend inline fun encodeWithSlot(io.ktor.utils.io.charsets/Charset, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.types/CommandRequest // eu.vendeli.rethis.codecs.transaction/WatchCommandCodec.encodeWithSlot|encodeWithSlot(io.ktor.utils.io.charsets.Charset;kotlin.Array<out|kotlin.String>...){}[0]
}

final object eu.vendeli.rethis.core/DefaultLoggerFactory : eu.vendeli.rethis.types.common/LoggerFactory { // eu.vendeli.rethis.core/DefaultLoggerFactory|null[0]
    final fun get(kotlin/String): io.ktor.util.logging/Logger // eu.vendeli.rethis.core/DefaultLoggerFactory.get|get(kotlin.String){}[0]
}

final const val eu.vendeli.rethis.utils/CLIENT_NAME // eu.vendeli.rethis.utils/CLIENT_NAME|{}CLIENT_NAME[0]
    final fun <get-CLIENT_NAME>(): kotlin/String // eu.vendeli.rethis.utils/CLIENT_NAME.<get-CLIENT_NAME>|<get-CLIENT_NAME>(){}[0]
final const val eu.vendeli.rethis.utils/DEFAULT_HOST // eu.vendeli.rethis.utils/DEFAULT_HOST|{}DEFAULT_HOST[0]
    final fun <get-DEFAULT_HOST>(): kotlin/String // eu.vendeli.rethis.utils/DEFAULT_HOST.<get-DEFAULT_HOST>|<get-DEFAULT_HOST>(){}[0]
final const val eu.vendeli.rethis.utils/DEFAULT_PORT // eu.vendeli.rethis.utils/DEFAULT_PORT|{}DEFAULT_PORT[0]
    final fun <get-DEFAULT_PORT>(): kotlin/Int // eu.vendeli.rethis.utils/DEFAULT_PORT.<get-DEFAULT_PORT>|<get-DEFAULT_PORT>(){}[0]

final val eu.vendeli.rethis.utils/EOL // eu.vendeli.rethis.utils/EOL|{}EOL[0]
    final fun <get-EOL>(): kotlin/ByteArray // eu.vendeli.rethis.utils/EOL.<get-EOL>|<get-EOL>(){}[0]
final val eu.vendeli.rethis.utils/IO_OR_UNCONFINED // eu.vendeli.rethis.utils/IO_OR_UNCONFINED|@kotlinx.coroutines.Dispatchers{}IO_OR_UNCONFINED[0]
    final fun (kotlinx.coroutines/Dispatchers).<get-IO_OR_UNCONFINED>(): kotlinx.coroutines/CoroutineDispatcher // eu.vendeli.rethis.utils/IO_OR_UNCONFINED.<get-IO_OR_UNCONFINED>|<get-IO_OR_UNCONFINED>@kotlinx.coroutines.Dispatchers(){}[0]

final fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.wrappers/Hash(kotlin/String): eu.vendeli.rethis.wrappers/ReThisMap // eu.vendeli.rethis.wrappers/Hash|Hash@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.wrappers/Set(kotlin/String): eu.vendeli.rethis.wrappers/ReThisSet // eu.vendeli.rethis.wrappers/Set|Set@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.wrappers/StreamFlow(kotlin/String, kotlin/String, kotlin/String, kotlin/Long = ..., kotlin.time/Duration = ..., kotlin/Boolean = ...): kotlinx.coroutines.flow/Flow<kotlin.collections/Map<kotlin/String, eu.vendeli.rethis.shared.types/RType>> // eu.vendeli.rethis.wrappers/StreamFlow|StreamFlow@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.String;kotlin.Long;kotlin.time.Duration;kotlin.Boolean){}[0]
final fun (kotlin.collections/List<kotlin/Any?>).eu.vendeli.rethis.utils/toRESPBuffer(io.ktor.utils.io.charsets/Charset = ...): kotlinx.io/Buffer // eu.vendeli.rethis.utils/toRESPBuffer|toRESPBuffer@kotlin.collections.List<kotlin.Any?>(io.ktor.utils.io.charsets.Charset){}[0]
final fun (kotlinx.io/Buffer).eu.vendeli.rethis.utils/writeBooleanArg(kotlin/Boolean, io.ktor.utils.io.charsets/Charset) // eu.vendeli.rethis.utils/writeBooleanArg|writeBooleanArg@kotlinx.io.Buffer(kotlin.Boolean;io.ktor.utils.io.charsets.Charset){}[0]
final fun (kotlinx.io/Buffer).eu.vendeli.rethis.utils/writeByteArrayArg(kotlin/ByteArray, io.ktor.utils.io.charsets/Charset) // eu.vendeli.rethis.utils/writeByteArrayArg|writeByteArrayArg@kotlinx.io.Buffer(kotlin.ByteArray;io.ktor.utils.io.charsets.Charset){}[0]
final fun (kotlinx.io/Buffer).eu.vendeli.rethis.utils/writeCharArrayArg(kotlin/CharArray, io.ktor.utils.io.charsets/Charset) // eu.vendeli.rethis.utils/writeCharArrayArg|writeCharArrayArg@kotlinx.io.Buffer(kotlin.CharArray;io.ktor.utils.io.charsets.Charset){}[0]
final fun (kotlinx.io/Buffer).eu.vendeli.rethis.utils/writeDoubleArg(kotlin/Double, io.ktor.utils.io.charsets/Charset) // eu.vendeli.rethis.utils/writeDoubleArg|writeDoubleArg@kotlinx.io.Buffer(kotlin.Double;io.ktor.utils.io.charsets.Charset){}[0]
final fun (kotlinx.io/Buffer).eu.vendeli.rethis.utils/writeDurationArg(kotlin.time/Duration, io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.types/TimeUnit) // eu.vendeli.rethis.utils/writeDurationArg|writeDurationArg@kotlinx.io.Buffer(kotlin.time.Duration;io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.types.TimeUnit){}[0]
final fun (kotlinx.io/Buffer).eu.vendeli.rethis.utils/writeInstantArg(kotlin.time/Instant, io.ktor.utils.io.charsets/Charset, eu.vendeli.rethis.shared.types/TimeUnit) // eu.vendeli.rethis.utils/writeInstantArg|writeInstantArg@kotlinx.io.Buffer(kotlin.time.Instant;io.ktor.utils.io.charsets.Charset;eu.vendeli.rethis.shared.types.TimeUnit){}[0]
final fun (kotlinx.io/Buffer).eu.vendeli.rethis.utils/writeIntArg(kotlin/Int, io.ktor.utils.io.charsets/Charset) // eu.vendeli.rethis.utils/writeIntArg|writeIntArg@kotlinx.io.Buffer(kotlin.Int;io.ktor.utils.io.charsets.Charset){}[0]
final fun (kotlinx.io/Buffer).eu.vendeli.rethis.utils/writeLongArg(kotlin/Long, io.ktor.utils.io.charsets/Charset) // eu.vendeli.rethis.utils/writeLongArg|writeLongArg@kotlinx.io.Buffer(kotlin.Long;io.ktor.utils.io.charsets.Charset){}[0]
final fun (kotlinx.io/Buffer).eu.vendeli.rethis.utils/writeStringArg(kotlin/String, io.ktor.utils.io.charsets/Charset) // eu.vendeli.rethis.utils/writeStringArg|writeStringArg@kotlinx.io.Buffer(kotlin.String;io.ktor.utils.io.charsets.Charset){}[0]
final fun <#A: kotlin/Any?> eu.vendeli.rethis.utils/coRunBlocking(kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>): #A // eu.vendeli.rethis.utils/coRunBlocking|coRunBlocking(kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>){0§<kotlin.Any?>}[0]
final fun eu.vendeli.rethis/ReThis(kotlin/String = ..., kotlin/Int = ..., eu.vendeli.rethis.types.common/RespVer = ..., kotlin/Function1<eu.vendeli.rethis.configuration/StandaloneConfiguration, kotlin/Unit> = ...): eu.vendeli.rethis/ReThis // eu.vendeli.rethis/ReThis|ReThis(kotlin.String;kotlin.Int;eu.vendeli.rethis.types.common.RespVer;kotlin.Function1<eu.vendeli.rethis.configuration.StandaloneConfiguration,kotlin.Unit>){}[0]
final fun eu.vendeli.rethis/ReThis(kotlin/String, eu.vendeli.rethis.types.common/RespVer = ..., kotlin/Function1<eu.vendeli.rethis.configuration/StandaloneConfiguration, kotlin/Unit> = ...): eu.vendeli.rethis/ReThis // eu.vendeli.rethis/ReThis|ReThis(kotlin.String;eu.vendeli.rethis.types.common.RespVer;kotlin.Function1<eu.vendeli.rethis.configuration.StandaloneConfiguration,kotlin.Unit>){}[0]
final inline fun (io.ktor.network.sockets/SocketAddress).eu.vendeli.rethis.types.common/asAddress(): eu.vendeli.rethis.types.common/Address // eu.vendeli.rethis.types.common/asAddress|asAddress@io.ktor.network.sockets.SocketAddress(){}[0]
final inline fun eu.vendeli.rethis.types.common/Address(kotlin/String): eu.vendeli.rethis.types.common/Address // eu.vendeli.rethis.types.common/Address|Address(kotlin.String){}[0]
final inline fun eu.vendeli.rethis.types.common/Address(kotlin/String, kotlin/Int): eu.vendeli.rethis.types.common/Address // eu.vendeli.rethis.types.common/Address|Address(kotlin.String;kotlin.Int){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.bitmap/bitCount(kotlin/String, eu.vendeli.rethis.shared.request.bitmap/Range? = ..., eu.vendeli.rethis.shared.request.bitmap/BitmapUnit? = ...): kotlin/Long // eu.vendeli.rethis.command.bitmap/bitCount|bitCount@eu.vendeli.rethis.ReThis(kotlin.String;eu.vendeli.rethis.shared.request.bitmap.Range?;eu.vendeli.rethis.shared.request.bitmap.BitmapUnit?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.bitmap/bitOp(eu.vendeli.rethis.shared.request.bitmap/BitOpOption.OperationType, kotlin/String, kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.bitmap/bitOp|bitOp@eu.vendeli.rethis.ReThis(eu.vendeli.rethis.shared.request.bitmap.BitOpOption.OperationType;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.bitmap/bitPos(kotlin/String, kotlin/Long, kotlin/Long? = ..., kotlin/Long? = ..., eu.vendeli.rethis.shared.request.bitmap/BitmapUnit? = ...): kotlin/Long // eu.vendeli.rethis.command.bitmap/bitPos|bitPos@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long;kotlin.Long?;kotlin.Long?;eu.vendeli.rethis.shared.request.bitmap.BitmapUnit?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.bitmap/bitfield(kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.bitmap/BitfieldOption>...): kotlin.collections/List<kotlin/Long>? // eu.vendeli.rethis.command.bitmap/bitfield|bitfield@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.bitmap.BitfieldOption>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.bitmap/bitfieldRo(kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.bitmap/BitfieldOption.Get>...): kotlin.collections/List<kotlin/Long> // eu.vendeli.rethis.command.bitmap/bitfieldRo|bitfieldRo@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.bitmap.BitfieldOption.Get>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.bitmap/getBit(kotlin/String, kotlin/Long): kotlin/Long // eu.vendeli.rethis.command.bitmap/getBit|getBit@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.bitmap/setBit(kotlin/String, kotlin/Long, kotlin/Long): kotlin/Long // eu.vendeli.rethis.command.bitmap/setBit|setBit@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long;kotlin.Long){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/asking(): kotlin/Boolean // eu.vendeli.rethis.command.cluster/asking|asking@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterAddSlots(kotlin/LongArray...): kotlin/Boolean // eu.vendeli.rethis.command.cluster/clusterAddSlots|clusterAddSlots@eu.vendeli.rethis.ReThis(kotlin.LongArray...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterAddSlotsRange(kotlin/Array<out eu.vendeli.rethis.shared.request.cluster/SlotRange>...): kotlin/Boolean // eu.vendeli.rethis.command.cluster/clusterAddSlotsRange|clusterAddSlotsRange@eu.vendeli.rethis.ReThis(kotlin.Array<out|eu.vendeli.rethis.shared.request.cluster.SlotRange>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterBumpEpoch(): kotlin/Boolean // eu.vendeli.rethis.command.cluster/clusterBumpEpoch|clusterBumpEpoch@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterCountFailureReports(kotlin/String): kotlin/Long // eu.vendeli.rethis.command.cluster/clusterCountFailureReports|clusterCountFailureReports@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterCountKeysInSlot(kotlin/Long): kotlin/Long // eu.vendeli.rethis.command.cluster/clusterCountKeysInSlot|clusterCountKeysInSlot@eu.vendeli.rethis.ReThis(kotlin.Long){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterDelSlots(kotlin/LongArray...): kotlin/Boolean // eu.vendeli.rethis.command.cluster/clusterDelSlots|clusterDelSlots@eu.vendeli.rethis.ReThis(kotlin.LongArray...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterDelSlotsRange(kotlin/Array<out eu.vendeli.rethis.shared.request.cluster/SlotRange>...): kotlin/Boolean // eu.vendeli.rethis.command.cluster/clusterDelSlotsRange|clusterDelSlotsRange@eu.vendeli.rethis.ReThis(kotlin.Array<out|eu.vendeli.rethis.shared.request.cluster.SlotRange>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterFailover(eu.vendeli.rethis.shared.request.cluster/ClusterFailoverOption? = ...): kotlin/Boolean // eu.vendeli.rethis.command.cluster/clusterFailover|clusterFailover@eu.vendeli.rethis.ReThis(eu.vendeli.rethis.shared.request.cluster.ClusterFailoverOption?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterFlushSlots(): kotlin/Boolean // eu.vendeli.rethis.command.cluster/clusterFlushSlots|clusterFlushSlots@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterForget(kotlin/String): kotlin/Boolean // eu.vendeli.rethis.command.cluster/clusterForget|clusterForget@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterGetKeysInSlot(kotlin/Long, kotlin/Long): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.cluster/clusterGetKeysInSlot|clusterGetKeysInSlot@eu.vendeli.rethis.ReThis(kotlin.Long;kotlin.Long){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterInfo(): kotlin/String // eu.vendeli.rethis.command.cluster/clusterInfo|clusterInfo@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterKeySlot(kotlin/String): kotlin/Long // eu.vendeli.rethis.command.cluster/clusterKeySlot|clusterKeySlot@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterLinks(): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.cluster/clusterLinks|clusterLinks@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterMeet(kotlin/String, kotlin/Long, kotlin/Long? = ...): kotlin/Boolean // eu.vendeli.rethis.command.cluster/clusterMeet|clusterMeet@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterMyId(): kotlin/String // eu.vendeli.rethis.command.cluster/clusterMyId|clusterMyId@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterMyShardId(): kotlin/String // eu.vendeli.rethis.command.cluster/clusterMyShardId|clusterMyShardId@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterNodes(): kotlin/String // eu.vendeli.rethis.command.cluster/clusterNodes|clusterNodes@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterReplicas(kotlin/String): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.cluster/clusterReplicas|clusterReplicas@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterReplicate(kotlin/String): kotlin/Boolean // eu.vendeli.rethis.command.cluster/clusterReplicate|clusterReplicate@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterReset(eu.vendeli.rethis.shared.request.cluster/ClusterResetMode? = ...): kotlin/Boolean // eu.vendeli.rethis.command.cluster/clusterReset|clusterReset@eu.vendeli.rethis.ReThis(eu.vendeli.rethis.shared.request.cluster.ClusterResetMode?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterSaveConfig(): kotlin/Boolean // eu.vendeli.rethis.command.cluster/clusterSaveConfig|clusterSaveConfig@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterSetConfigEpoch(kotlin/Long): kotlin/Boolean // eu.vendeli.rethis.command.cluster/clusterSetConfigEpoch|clusterSetConfigEpoch@eu.vendeli.rethis.ReThis(kotlin.Long){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterSetSlot(kotlin/Long, eu.vendeli.rethis.shared.request.cluster/ClusterSetSlotOption): kotlin/Boolean // eu.vendeli.rethis.command.cluster/clusterSetSlot|clusterSetSlot@eu.vendeli.rethis.ReThis(kotlin.Long;eu.vendeli.rethis.shared.request.cluster.ClusterSetSlotOption){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterShards(): kotlin.collections/List<eu.vendeli.rethis.shared.response.cluster/Shard> // eu.vendeli.rethis.command.cluster/clusterShards|clusterShards@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterSlaves(kotlin/String): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.cluster/clusterSlaves|clusterSlaves@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/clusterSlots(): eu.vendeli.rethis.shared.response.cluster/Cluster // eu.vendeli.rethis.command.cluster/clusterSlots|clusterSlots@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/readOnly(): kotlin/Boolean // eu.vendeli.rethis.command.cluster/readOnly|readOnly@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.cluster/readWrite(): kotlin/Boolean // eu.vendeli.rethis.command.cluster/readWrite|readWrite@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.connection/auth(kotlin/String? = ..., kotlin/CharArray): kotlin/Boolean // eu.vendeli.rethis.command.connection/auth|auth@eu.vendeli.rethis.ReThis(kotlin.String?;kotlin.CharArray){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.connection/clientGetName(): kotlin/String? // eu.vendeli.rethis.command.connection/clientGetName|clientGetName@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.connection/clientId(): kotlin/Long // eu.vendeli.rethis.command.connection/clientId|clientId@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.connection/clientInfo(): kotlin/String // eu.vendeli.rethis.command.connection/clientInfo|clientInfo@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.connection/clientKill(kotlin/Array<out eu.vendeli.rethis.shared.request.connection/ClientKillOptions>...): kotlin/Long // eu.vendeli.rethis.command.connection/clientKill|clientKill@eu.vendeli.rethis.ReThis(kotlin.Array<out|eu.vendeli.rethis.shared.request.connection.ClientKillOptions>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.connection/clientKillString(kotlin/String): kotlin/Boolean // eu.vendeli.rethis.command.connection/clientKillString|clientKillString@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.connection/clientList(eu.vendeli.rethis.shared.request.connection/ClientType? = ..., kotlin/LongArray...): kotlin/String // eu.vendeli.rethis.command.connection/clientList|clientList@eu.vendeli.rethis.ReThis(eu.vendeli.rethis.shared.request.connection.ClientType?;kotlin.LongArray...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.connection/clientPause(kotlin/Long, eu.vendeli.rethis.shared.request.connection/ClientPauseMode? = ...): kotlin/Boolean // eu.vendeli.rethis.command.connection/clientPause|clientPause@eu.vendeli.rethis.ReThis(kotlin.Long;eu.vendeli.rethis.shared.request.connection.ClientPauseMode?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.connection/clientReply(eu.vendeli.rethis.shared.request.connection/ClientReplyMode): kotlin/Boolean // eu.vendeli.rethis.command.connection/clientReply|clientReply@eu.vendeli.rethis.ReThis(eu.vendeli.rethis.shared.request.connection.ClientReplyMode){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.connection/clientSetName(kotlin/String): kotlin/Boolean // eu.vendeli.rethis.command.connection/clientSetName|clientSetName@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.connection/clientTracking(eu.vendeli.rethis.shared.request.connection/ClientStandby, kotlin/Array<out eu.vendeli.rethis.shared.request.connection/ClientTrackingMode>...): kotlin/Boolean // eu.vendeli.rethis.command.connection/clientTracking|clientTracking@eu.vendeli.rethis.ReThis(eu.vendeli.rethis.shared.request.connection.ClientStandby;kotlin.Array<out|eu.vendeli.rethis.shared.request.connection.ClientTrackingMode>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.connection/clientUnblock(kotlin/Long, eu.vendeli.rethis.shared.request.connection/ClientUnblockType? = ...): kotlin/Boolean // eu.vendeli.rethis.command.connection/clientUnblock|clientUnblock@eu.vendeli.rethis.ReThis(kotlin.Long;eu.vendeli.rethis.shared.request.connection.ClientUnblockType?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.connection/hello(kotlin/Long? = ..., eu.vendeli.rethis.shared.request.connection/HelloAuth? = ..., kotlin/String? = ...): kotlin.collections/Map<kotlin/String, eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.connection/hello|hello@eu.vendeli.rethis.ReThis(kotlin.Long?;eu.vendeli.rethis.shared.request.connection.HelloAuth?;kotlin.String?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.connection/ping(kotlin/String? = ...): kotlin/String // eu.vendeli.rethis.command.connection/ping|ping@eu.vendeli.rethis.ReThis(kotlin.String?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.connection/quit(): kotlin/Boolean // eu.vendeli.rethis.command.connection/quit|quit@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.connection/select(kotlin/Long): kotlin/Boolean // eu.vendeli.rethis.command.connection/select|select@eu.vendeli.rethis.ReThis(kotlin.Long){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/copy(kotlin/String, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.generic/CopyOption>...): kotlin/Boolean // eu.vendeli.rethis.command.generic/copy|copy@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.generic.CopyOption>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/del(kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.generic/del|del@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/dump(kotlin/String): kotlin/ByteArray? // eu.vendeli.rethis.command.generic/dump|dump@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/exists(kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.generic/exists|exists@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/expire(kotlin/String, kotlin.time/Duration, eu.vendeli.rethis.shared.request.common/UpdateStrategyOption? = ...): kotlin/Boolean // eu.vendeli.rethis.command.generic/expire|expire@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.time.Duration;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/expireAt(kotlin/String, kotlin.time/Instant, eu.vendeli.rethis.shared.request.common/UpdateStrategyOption? = ...): kotlin/Boolean // eu.vendeli.rethis.command.generic/expireAt|expireAt@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.time.Instant;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/expireTime(kotlin/String): kotlin/Long // eu.vendeli.rethis.command.generic/expireTime|expireTime@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/keys(kotlin/String): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.generic/keys|keys@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/migrate(kotlin/String, kotlin/Long, eu.vendeli.rethis.shared.request.generic/MigrateKey, kotlin/Long, kotlin.time/Duration, kotlin/Array<out eu.vendeli.rethis.shared.request.generic/MigrateOption>...): kotlin/String // eu.vendeli.rethis.command.generic/migrate|migrate@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long;eu.vendeli.rethis.shared.request.generic.MigrateKey;kotlin.Long;kotlin.time.Duration;kotlin.Array<out|eu.vendeli.rethis.shared.request.generic.MigrateOption>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/move(kotlin/String, kotlin/Long): kotlin/Boolean // eu.vendeli.rethis.command.generic/move|move@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/objectEncoding(kotlin/String): kotlin/String? // eu.vendeli.rethis.command.generic/objectEncoding|objectEncoding@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/objectFreq(kotlin/String): eu.vendeli.rethis.shared.types/RType? // eu.vendeli.rethis.command.generic/objectFreq|objectFreq@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/objectIdleTime(kotlin/String): kotlin/Long? // eu.vendeli.rethis.command.generic/objectIdleTime|objectIdleTime@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/objectRefCount(kotlin/String): kotlin/Long? // eu.vendeli.rethis.command.generic/objectRefCount|objectRefCount@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/pExpire(kotlin/String, kotlin.time/Duration, eu.vendeli.rethis.shared.request.common/UpdateStrategyOption? = ...): kotlin/Boolean // eu.vendeli.rethis.command.generic/pExpire|pExpire@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.time.Duration;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/pExpireAt(kotlin/String, kotlin.time/Instant, eu.vendeli.rethis.shared.request.common/UpdateStrategyOption? = ...): kotlin/Boolean // eu.vendeli.rethis.command.generic/pExpireAt|pExpireAt@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.time.Instant;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/pExpireTime(kotlin/String): kotlin/Long // eu.vendeli.rethis.command.generic/pExpireTime|pExpireTime@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/pTtl(kotlin/String): kotlin/Long // eu.vendeli.rethis.command.generic/pTtl|pTtl@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/persist(kotlin/String): kotlin/Boolean // eu.vendeli.rethis.command.generic/persist|persist@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/randomKey(): kotlin/String? // eu.vendeli.rethis.command.generic/randomKey|randomKey@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/rename(kotlin/String, kotlin/String): kotlin/Boolean // eu.vendeli.rethis.command.generic/rename|rename@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/renameNx(kotlin/String, kotlin/String): kotlin/Boolean // eu.vendeli.rethis.command.generic/renameNx|renameNx@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/restore(kotlin/String, kotlin/Long, kotlin/ByteArray, kotlin/Array<out eu.vendeli.rethis.shared.request.generic/RestoreOption>...): kotlin/Boolean // eu.vendeli.rethis.command.generic/restore|restore@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long;kotlin.ByteArray;kotlin.Array<out|eu.vendeli.rethis.shared.request.generic.RestoreOption>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/scan(kotlin/Long, kotlin/Array<out eu.vendeli.rethis.shared.request.generic/ScanOption>...): eu.vendeli.rethis.shared.response.common/ScanResult<kotlin/String> // eu.vendeli.rethis.command.generic/scan|scan@eu.vendeli.rethis.ReThis(kotlin.Long;kotlin.Array<out|eu.vendeli.rethis.shared.request.generic.ScanOption>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/sort(kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.generic/SortOption>...): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.generic/sort|sort@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.generic.SortOption>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/sortRo(kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.generic/SortOption>...): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.generic/sortRo|sortRo@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.generic.SortOption>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/sortStore(kotlin/String, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.generic/SortOption>...): kotlin/Long // eu.vendeli.rethis.command.generic/sortStore|sortStore@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.generic.SortOption>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/touch(kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.generic/touch|touch@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/ttl(kotlin/String): kotlin/Long // eu.vendeli.rethis.command.generic/ttl|ttl@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/type(kotlin/String): kotlin/String // eu.vendeli.rethis.command.generic/type|type@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/unlink(kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.generic/unlink|unlink@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/wait(kotlin/Long, kotlin/Long): kotlin/Long // eu.vendeli.rethis.command.generic/wait|wait@eu.vendeli.rethis.ReThis(kotlin.Long;kotlin.Long){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.generic/waitAof(kotlin/Long, kotlin/Long, kotlin/Long): eu.vendeli.rethis.shared.response.common/WaitAofResult // eu.vendeli.rethis.command.generic/waitAof|waitAof@eu.vendeli.rethis.ReThis(kotlin.Long;kotlin.Long;kotlin.Long){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.geospatial/geoAdd(kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.response.geospatial/GeoMember>..., eu.vendeli.rethis.shared.request.geospatial/GeoAddOption.UpsertMode? = ..., kotlin/Boolean? = ...): kotlin/Long // eu.vendeli.rethis.command.geospatial/geoAdd|geoAdd@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.response.geospatial.GeoMember>...;eu.vendeli.rethis.shared.request.geospatial.GeoAddOption.UpsertMode?;kotlin.Boolean?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.geospatial/geoDist(kotlin/String, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.response.geospatial/GeoUnit? = ...): kotlin/Double? // eu.vendeli.rethis.command.geospatial/geoDist|geoDist@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.response.geospatial.GeoUnit?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.geospatial/geoHash(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.geospatial/geoHash|geoHash@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.geospatial/geoPos(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin.collections/List<kotlin.collections/List<eu.vendeli.rethis.shared.response.geospatial/GeoPosition>?> // eu.vendeli.rethis.command.geospatial/geoPos|geoPos@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.geospatial/geoSearch(kotlin/String, eu.vendeli.rethis.shared.request.geospatial/CenterPoint, eu.vendeli.rethis.shared.request.geospatial/Shape, kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., kotlin/Long? = ..., kotlin/Boolean? = ..., eu.vendeli.rethis.shared.response.geospatial/GeoSort? = ...): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.geospatial/geoSearch|geoSearch@eu.vendeli.rethis.ReThis(kotlin.String;eu.vendeli.rethis.shared.request.geospatial.CenterPoint;eu.vendeli.rethis.shared.request.geospatial.Shape;kotlin.Boolean?;kotlin.Boolean?;kotlin.Boolean?;kotlin.Long?;kotlin.Boolean?;eu.vendeli.rethis.shared.response.geospatial.GeoSort?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.geospatial/geoSearchStore(kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.geospatial/CenterPoint, eu.vendeli.rethis.shared.request.geospatial/Shape, eu.vendeli.rethis.shared.response.geospatial/GeoSort? = ..., kotlin/Long? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ...): kotlin/Long // eu.vendeli.rethis.command.geospatial/geoSearchStore|geoSearchStore@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.geospatial.CenterPoint;eu.vendeli.rethis.shared.request.geospatial.Shape;eu.vendeli.rethis.shared.response.geospatial.GeoSort?;kotlin.Long?;kotlin.Boolean?;kotlin.Boolean?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hDel(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.hash/hDel|hDel@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hExists(kotlin/String, kotlin/String): kotlin/Boolean // eu.vendeli.rethis.command.hash/hExists|hExists@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hExpire(kotlin/String, kotlin.time/Duration, kotlin/Array<out kotlin/String>..., eu.vendeli.rethis.shared.request.common/UpdateStrategyOption? = ...): kotlin.collections/List<kotlin/Long> // eu.vendeli.rethis.command.hash/hExpire|hExpire@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.time.Duration;kotlin.Array<out|kotlin.String>...;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hExpireAt(kotlin/String, kotlin.time/Instant, kotlin/Array<out kotlin/String>..., eu.vendeli.rethis.shared.request.common/UpdateStrategyOption? = ...): kotlin.collections/List<kotlin/Long> // eu.vendeli.rethis.command.hash/hExpireAt|hExpireAt@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.time.Instant;kotlin.Array<out|kotlin.String>...;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hExpireTime(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin.collections/List<kotlin/Long> // eu.vendeli.rethis.command.hash/hExpireTime|hExpireTime@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hGet(kotlin/String, kotlin/String): kotlin/String? // eu.vendeli.rethis.command.hash/hGet|hGet@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hGetAll(kotlin/String): kotlin.collections/Map<kotlin/String, kotlin/String?> // eu.vendeli.rethis.command.hash/hGetAll|hGetAll@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hIncrBy(kotlin/String, kotlin/String, kotlin/Long): kotlin/Long // eu.vendeli.rethis.command.hash/hIncrBy|hIncrBy@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.Long){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hIncrByFloat(kotlin/String, kotlin/String, kotlin/Double): kotlin/Double // eu.vendeli.rethis.command.hash/hIncrByFloat|hIncrByFloat@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.Double){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hKeys(kotlin/String): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.hash/hKeys|hKeys@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hLen(kotlin/String): kotlin/Long // eu.vendeli.rethis.command.hash/hLen|hLen@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hMGet(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin.collections/List<kotlin/String?> // eu.vendeli.rethis.command.hash/hMGet|hMGet@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hMSet(kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.common/FieldValue>...): kotlin/Boolean // eu.vendeli.rethis.command.hash/hMSet|hMSet@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.common.FieldValue>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hPersist(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin.collections/List<kotlin/Long> // eu.vendeli.rethis.command.hash/hPersist|hPersist@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hPttl(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin.collections/List<kotlin/Long> // eu.vendeli.rethis.command.hash/hPttl|hPttl@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hRandField(kotlin/String): kotlin/String? // eu.vendeli.rethis.command.hash/hRandField|hRandField@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hRandFieldCount(kotlin/String, kotlin/Long, kotlin/Boolean? = ...): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.hash/hRandFieldCount|hRandFieldCount@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long;kotlin.Boolean?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hScan(kotlin/String, kotlin/Long, kotlin/Array<out eu.vendeli.rethis.shared.request.hash/HScanOption>...): eu.vendeli.rethis.shared.response.common/ScanResult<kotlin/Pair<kotlin/String, kotlin/String>> // eu.vendeli.rethis.command.hash/hScan|hScan@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long;kotlin.Array<out|eu.vendeli.rethis.shared.request.hash.HScanOption>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hSet(kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.common/FieldValue>...): kotlin/Long // eu.vendeli.rethis.command.hash/hSet|hSet@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.common.FieldValue>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hSetNx(kotlin/String, kotlin/String, kotlin/String): kotlin/Long // eu.vendeli.rethis.command.hash/hSetNx|hSetNx@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hStrlen(kotlin/String, kotlin/String): kotlin/Long // eu.vendeli.rethis.command.hash/hStrlen|hStrlen@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hTtl(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin.collections/List<kotlin/Long> // eu.vendeli.rethis.command.hash/hTtl|hTtl@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hash/hVals(kotlin/String): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.hash/hVals|hVals@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hyperloglog/pfAdd(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin/Boolean // eu.vendeli.rethis.command.hyperloglog/pfAdd|pfAdd@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hyperloglog/pfCount(kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.hyperloglog/pfCount|pfCount@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.hyperloglog/pfMerge(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin/String // eu.vendeli.rethis.command.hyperloglog/pfMerge|pfMerge@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonArrAppend(kotlin/String, kotlin/String? = ..., kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.json/jsonArrAppend|jsonArrAppend@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String?;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonArrIndex(kotlin/String, kotlin/String, kotlin/String, kotlin/Long? = ..., kotlin/Long? = ...): kotlin/Long // eu.vendeli.rethis.command.json/jsonArrIndex|jsonArrIndex@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.String;kotlin.Long?;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonArrInsert(kotlin/String, kotlin/String, kotlin/Long, kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.json/jsonArrInsert|jsonArrInsert@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.Long;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonArrLen(kotlin/String, kotlin/String? = ...): kotlin/Long // eu.vendeli.rethis.command.json/jsonArrLen|jsonArrLen@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonArrPop(kotlin/String, kotlin/String? = ..., kotlin/Long? = ...): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.command.json/jsonArrPop|jsonArrPop@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String?;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonArrTrim(kotlin/String, kotlin/String, kotlin/Long, kotlin/Long): kotlin/Long // eu.vendeli.rethis.command.json/jsonArrTrim|jsonArrTrim@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.Long;kotlin.Long){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonClear(kotlin/String, kotlin/String? = ...): kotlin/Long // eu.vendeli.rethis.command.json/jsonClear|jsonClear@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonDel(kotlin/String, kotlin/String? = ...): kotlin/Long // eu.vendeli.rethis.command.json/jsonDel|jsonDel@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonForget(kotlin/String, kotlin/String? = ...): kotlin/Long // eu.vendeli.rethis.command.json/jsonForget|jsonForget@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonGet(kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.json/JsonGetOption>...): kotlin/String? // eu.vendeli.rethis.command.json/jsonGet|jsonGet@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.json.JsonGetOption>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonMGet(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin.collections/List<kotlin/String?> // eu.vendeli.rethis.command.json/jsonMGet|jsonMGet@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonMSet(kotlin/Array<out eu.vendeli.rethis.shared.request.json/JsonEntry>...): kotlin/Boolean // eu.vendeli.rethis.command.json/jsonMSet|jsonMSet@eu.vendeli.rethis.ReThis(kotlin.Array<out|eu.vendeli.rethis.shared.request.json.JsonEntry>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonMerge(kotlin/String, kotlin/String, kotlin/String): kotlin/Boolean // eu.vendeli.rethis.command.json/jsonMerge|jsonMerge@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonNumIncrBy(kotlin/String, kotlin/String, kotlin/Double): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.command.json/jsonNumIncrBy|jsonNumIncrBy@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.Double){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonNumMultBy(kotlin/String, kotlin/String, kotlin/Double): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.command.json/jsonNumMultBy|jsonNumMultBy@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.Double){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonObjKeys(kotlin/String, kotlin/String? = ...): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.json/jsonObjKeys|jsonObjKeys@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonObjLen(kotlin/String, kotlin/String? = ...): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.command.json/jsonObjLen|jsonObjLen@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonResp(kotlin/String, kotlin/String? = ...): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.json/jsonResp|jsonResp@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonSet(kotlin/String, kotlin/String, kotlin/String = ..., eu.vendeli.rethis.shared.request.string/UpsertMode? = ...): kotlin/String // eu.vendeli.rethis.command.json/jsonSet|jsonSet@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.string.UpsertMode?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonStrAppend(kotlin/String, kotlin/String, kotlin/String? = ...): kotlin/Long // eu.vendeli.rethis.command.json/jsonStrAppend|jsonStrAppend@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.String?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonStrLen(kotlin/String, kotlin/String? = ...): kotlin/Long // eu.vendeli.rethis.command.json/jsonStrLen|jsonStrLen@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonToggle(kotlin/String, kotlin/String): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.command.json/jsonToggle|jsonToggle@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.json/jsonType(kotlin/String, kotlin/String? = ...): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.command.json/jsonType|jsonType@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/blMove(kotlin/String, kotlin/String, eu.vendeli.rethis.shared.response.common/MoveDirection, eu.vendeli.rethis.shared.response.common/MoveDirection, kotlin/Double): kotlin/String? // eu.vendeli.rethis.command.list/blMove|blMove@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;eu.vendeli.rethis.shared.response.common.MoveDirection;eu.vendeli.rethis.shared.response.common.MoveDirection;kotlin.Double){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/blPop(kotlin/Array<out kotlin/String>..., kotlin/Double): eu.vendeli.rethis.shared.response.common/PopResult? // eu.vendeli.rethis.command.list/blPop|blPop@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...;kotlin.Double){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/blmPop(kotlin/Double, kotlin/Array<out kotlin/String>..., eu.vendeli.rethis.shared.response.common/MoveDirection, kotlin/Long? = ...): kotlin.collections/List<eu.vendeli.rethis.shared.response.common/MPopResult>? // eu.vendeli.rethis.command.list/blmPop|blmPop@eu.vendeli.rethis.ReThis(kotlin.Double;kotlin.Array<out|kotlin.String>...;eu.vendeli.rethis.shared.response.common.MoveDirection;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/brPop(kotlin/Array<out kotlin/String>..., kotlin/Double): eu.vendeli.rethis.shared.response.common/PopResult? // eu.vendeli.rethis.command.list/brPop|brPop@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...;kotlin.Double){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/lIndex(kotlin/String, kotlin/Long): kotlin/String? // eu.vendeli.rethis.command.list/lIndex|lIndex@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/lInsert(kotlin/String, eu.vendeli.rethis.shared.request.list/LInsertPlace, kotlin/String, kotlin/String): kotlin/Long // eu.vendeli.rethis.command.list/lInsert|lInsert@eu.vendeli.rethis.ReThis(kotlin.String;eu.vendeli.rethis.shared.request.list.LInsertPlace;kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/lLen(kotlin/String): kotlin/Long // eu.vendeli.rethis.command.list/lLen|lLen@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/lMove(kotlin/String, kotlin/String, eu.vendeli.rethis.shared.response.common/MoveDirection, eu.vendeli.rethis.shared.response.common/MoveDirection): kotlin/String // eu.vendeli.rethis.command.list/lMove|lMove@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;eu.vendeli.rethis.shared.response.common.MoveDirection;eu.vendeli.rethis.shared.response.common.MoveDirection){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/lPop(kotlin/String): kotlin/String? // eu.vendeli.rethis.command.list/lPop|lPop@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/lPopCount(kotlin/String, kotlin/Long? = ...): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.list/lPopCount|lPopCount@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/lPos(kotlin/String, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.list/LPosOption>...): kotlin/Long? // eu.vendeli.rethis.command.list/lPos|lPos@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.list.LPosOption>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/lPosCount(kotlin/String, kotlin/String, kotlin/Long, kotlin/Array<out eu.vendeli.rethis.shared.request.list/LPosOption>...): kotlin.collections/List<kotlin/Long> // eu.vendeli.rethis.command.list/lPosCount|lPosCount@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.Long;kotlin.Array<out|eu.vendeli.rethis.shared.request.list.LPosOption>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/lPush(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.list/lPush|lPush@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/lPushx(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.list/lPushx|lPushx@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/lRange(kotlin/String, kotlin/Long, kotlin/Long): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.list/lRange|lRange@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long;kotlin.Long){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/lRem(kotlin/String, kotlin/Long, kotlin/String): kotlin/Long // eu.vendeli.rethis.command.list/lRem|lRem@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/lSet(kotlin/String, kotlin/Long, kotlin/String): kotlin/String // eu.vendeli.rethis.command.list/lSet|lSet@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/lTrim(kotlin/String, kotlin/Long, kotlin/Long): kotlin/String // eu.vendeli.rethis.command.list/lTrim|lTrim@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long;kotlin.Long){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/lmPop(eu.vendeli.rethis.shared.response.common/MoveDirection, kotlin/Array<out kotlin/String>..., kotlin/Long? = ...): kotlin.collections/List<eu.vendeli.rethis.shared.response.common/MPopResult>? // eu.vendeli.rethis.command.list/lmPop|lmPop@eu.vendeli.rethis.ReThis(eu.vendeli.rethis.shared.response.common.MoveDirection;kotlin.Array<out|kotlin.String>...;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/rPop(kotlin/String): kotlin/String? // eu.vendeli.rethis.command.list/rPop|rPop@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/rPopCount(kotlin/String, kotlin/Long? = ...): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.list/rPopCount|rPopCount@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/rPush(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.list/rPush|rPush@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.list/rPushx(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.list/rPushx|rPushx@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.pubsub/pSubscribe(kotlin/Array<out kotlin/String>..., eu.vendeli.rethis.types.interfaces/SubscriptionHandler) // eu.vendeli.rethis.command.pubsub/pSubscribe|pSubscribe@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...;eu.vendeli.rethis.types.interfaces.SubscriptionHandler){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.pubsub/pUnsubscribe(kotlin/Array<out kotlin/String>...) // eu.vendeli.rethis.command.pubsub/pUnsubscribe|pUnsubscribe@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.pubsub/pubSubChannels(kotlin/String? = ...): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.pubsub/pubSubChannels|pubSubChannels@eu.vendeli.rethis.ReThis(kotlin.String?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.pubsub/pubSubNumPat(): kotlin/Long // eu.vendeli.rethis.command.pubsub/pubSubNumPat|pubSubNumPat@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.pubsub/pubSubNumSub(kotlin/Array<out kotlin/String>...): kotlin.collections/List<eu.vendeli.rethis.shared.response.common/PubSubNumEntry> // eu.vendeli.rethis.command.pubsub/pubSubNumSub|pubSubNumSub@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.pubsub/pubSubShardChannels(kotlin/String? = ...): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.pubsub/pubSubShardChannels|pubSubShardChannels@eu.vendeli.rethis.ReThis(kotlin.String?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.pubsub/pubSubShardNumSub(kotlin/Array<out kotlin/String>...): kotlin.collections/List<eu.vendeli.rethis.shared.response.common/PubSubNumEntry> // eu.vendeli.rethis.command.pubsub/pubSubShardNumSub|pubSubShardNumSub@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.pubsub/publish(kotlin/String, kotlin/String): kotlin/Long // eu.vendeli.rethis.command.pubsub/publish|publish@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.pubsub/sPublish(kotlin/String, kotlin/String): kotlin/Long // eu.vendeli.rethis.command.pubsub/sPublish|sPublish@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.pubsub/sSubscribe(kotlin/Array<out kotlin/String>..., eu.vendeli.rethis.types.interfaces/SubscriptionHandler) // eu.vendeli.rethis.command.pubsub/sSubscribe|sSubscribe@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...;eu.vendeli.rethis.types.interfaces.SubscriptionHandler){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.pubsub/sUnsubscribe(kotlin/Array<out kotlin/String>...) // eu.vendeli.rethis.command.pubsub/sUnsubscribe|sUnsubscribe@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.pubsub/subscribe(kotlin/Array<out kotlin/String>..., eu.vendeli.rethis.types.interfaces/SubscriptionHandler) // eu.vendeli.rethis.command.pubsub/subscribe|subscribe@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...;eu.vendeli.rethis.types.interfaces.SubscriptionHandler){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.pubsub/unsubscribe(kotlin/Array<out kotlin/String>...) // eu.vendeli.rethis.command.pubsub/unsubscribe|unsubscribe@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.scripting/eval(kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/String>): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.command.scripting/eval|eval@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.String>){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.scripting/evalRo(kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/String>): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.command.scripting/evalRo|evalRo@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.String>){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.scripting/evalSha(kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/String>): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.command.scripting/evalSha|evalSha@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.String>){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.scripting/evalShaRo(kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/String>): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.command.scripting/evalShaRo|evalShaRo@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.String>){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.scripting/fcall(kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/String>): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.command.scripting/fcall|fcall@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.String>){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.scripting/fcallRo(kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/String>): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.command.scripting/fcallRo|fcallRo@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.String>){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.scripting/functionDelete(kotlin/String): kotlin/Boolean // eu.vendeli.rethis.command.scripting/functionDelete|functionDelete@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.scripting/functionDump(): kotlin/ByteArray? // eu.vendeli.rethis.command.scripting/functionDump|functionDump@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.scripting/functionFlush(eu.vendeli.rethis.shared.request.common/FlushType): kotlin/Boolean // eu.vendeli.rethis.command.scripting/functionFlush|functionFlush@eu.vendeli.rethis.ReThis(eu.vendeli.rethis.shared.request.common.FlushType){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.scripting/functionKill(): kotlin/Boolean // eu.vendeli.rethis.command.scripting/functionKill|functionKill@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.scripting/functionList(kotlin/String? = ..., kotlin/Boolean? = ...): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.scripting/functionList|functionList@eu.vendeli.rethis.ReThis(kotlin.String?;kotlin.Boolean?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.scripting/functionLoad(kotlin/String, kotlin/Boolean? = ...): kotlin/String // eu.vendeli.rethis.command.scripting/functionLoad|functionLoad@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Boolean?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.scripting/functionRestore(kotlin/ByteArray, eu.vendeli.rethis.shared.request.scripting/FunctionRestoreOption? = ...): kotlin/Boolean // eu.vendeli.rethis.command.scripting/functionRestore|functionRestore@eu.vendeli.rethis.ReThis(kotlin.ByteArray;eu.vendeli.rethis.shared.request.scripting.FunctionRestoreOption?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.scripting/functionStats(): kotlin.collections/Map<kotlin/String, eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.scripting/functionStats|functionStats@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.scripting/scriptDebug(eu.vendeli.rethis.shared.request.scripting/ScriptDebugMode): kotlin/Boolean // eu.vendeli.rethis.command.scripting/scriptDebug|scriptDebug@eu.vendeli.rethis.ReThis(eu.vendeli.rethis.shared.request.scripting.ScriptDebugMode){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.scripting/scriptExists(kotlin/Array<out kotlin/String>...): kotlin.collections/List<kotlin/Boolean> // eu.vendeli.rethis.command.scripting/scriptExists|scriptExists@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.scripting/scriptFlush(eu.vendeli.rethis.shared.request.common/FlushType? = ...): kotlin/Boolean // eu.vendeli.rethis.command.scripting/scriptFlush|scriptFlush@eu.vendeli.rethis.ReThis(eu.vendeli.rethis.shared.request.common.FlushType?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.scripting/scriptKill(): kotlin/Boolean // eu.vendeli.rethis.command.scripting/scriptKill|scriptKill@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.scripting/scriptLoad(kotlin/String): kotlin/String // eu.vendeli.rethis.command.scripting/scriptLoad|scriptLoad@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sentinel/sentinelCkQuorum(kotlin/String): kotlin/Boolean // eu.vendeli.rethis.command.sentinel/sentinelCkQuorum|sentinelCkQuorum@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sentinel/sentinelConfigGet(kotlin/String): kotlin.collections/Map<kotlin/String, kotlin/String> // eu.vendeli.rethis.command.sentinel/sentinelConfigGet|sentinelConfigGet@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sentinel/sentinelConfigSet(kotlin/String, kotlin/String): kotlin/Boolean // eu.vendeli.rethis.command.sentinel/sentinelConfigSet|sentinelConfigSet@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sentinel/sentinelFailover(kotlin/String): kotlin/Boolean // eu.vendeli.rethis.command.sentinel/sentinelFailover|sentinelFailover@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sentinel/sentinelFlushConfig(): kotlin/Boolean // eu.vendeli.rethis.command.sentinel/sentinelFlushConfig|sentinelFlushConfig@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sentinel/sentinelGetMasterAddr(kotlin/String): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.sentinel/sentinelGetMasterAddr|sentinelGetMasterAddr@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sentinel/sentinelInfoCache(): kotlin.collections/Map<kotlin/String, kotlin/String> // eu.vendeli.rethis.command.sentinel/sentinelInfoCache|sentinelInfoCache@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sentinel/sentinelMaster(kotlin/String): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.sentinel/sentinelMaster|sentinelMaster@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sentinel/sentinelMasters(): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.sentinel/sentinelMasters|sentinelMasters@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sentinel/sentinelMonitor(kotlin/String, kotlin/String, kotlin/Int, kotlin/Int): kotlin/Boolean // eu.vendeli.rethis.command.sentinel/sentinelMonitor|sentinelMonitor@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.Int;kotlin.Int){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sentinel/sentinelMyId(): kotlin/String // eu.vendeli.rethis.command.sentinel/sentinelMyId|sentinelMyId@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sentinel/sentinelPendingScripts(): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.sentinel/sentinelPendingScripts|sentinelPendingScripts@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sentinel/sentinelRemove(kotlin/String): kotlin/Boolean // eu.vendeli.rethis.command.sentinel/sentinelRemove|sentinelRemove@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sentinel/sentinelReplicas(kotlin/String): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.sentinel/sentinelReplicas|sentinelReplicas@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sentinel/sentinelReset(kotlin/String): kotlin/Boolean // eu.vendeli.rethis.command.sentinel/sentinelReset|sentinelReset@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sentinel/sentinelSentinels(kotlin/String): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.sentinel/sentinelSentinels|sentinelSentinels@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sentinel/sentinelSet(kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.common/FieldValue>...): kotlin/Boolean // eu.vendeli.rethis.command.sentinel/sentinelSet|sentinelSet@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.common.FieldValue>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sentinel/sentinelSimulateFailure(eu.vendeli.rethis.shared.request.sentinel/SentinelSimulateFailureMode): kotlin/Boolean // eu.vendeli.rethis.command.sentinel/sentinelSimulateFailure|sentinelSimulateFailure@eu.vendeli.rethis.ReThis(eu.vendeli.rethis.shared.request.sentinel.SentinelSimulateFailureMode){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/aclCat(kotlin/String? = ...): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.server/aclCat|aclCat@eu.vendeli.rethis.ReThis(kotlin.String?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/aclDelUser(kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.server/aclDelUser|aclDelUser@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/aclDryRun(kotlin/String, kotlin/String, kotlin/Array<out kotlin/String>...): kotlin/String // eu.vendeli.rethis.command.server/aclDryRun|aclDryRun@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/aclGenPass(kotlin/Long? = ...): kotlin/String // eu.vendeli.rethis.command.server/aclGenPass|aclGenPass@eu.vendeli.rethis.ReThis(kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/aclGetUser(kotlin/String): kotlin.collections/Map<kotlin/String, eu.vendeli.rethis.shared.types/RType>? // eu.vendeli.rethis.command.server/aclGetUser|aclGetUser@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/aclList(): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.server/aclList|aclList@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/aclLoad(): kotlin/Boolean // eu.vendeli.rethis.command.server/aclLoad|aclLoad@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/aclLog(kotlin/Long? = ..., kotlin/Boolean? = ...): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.server/aclLog|aclLog@eu.vendeli.rethis.ReThis(kotlin.Long?;kotlin.Boolean?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/aclSave(): kotlin/Boolean // eu.vendeli.rethis.command.server/aclSave|aclSave@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/aclSetUser(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin/Boolean // eu.vendeli.rethis.command.server/aclSetUser|aclSetUser@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/aclUsers(): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.server/aclUsers|aclUsers@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/aclWhoAmI(): kotlin/String // eu.vendeli.rethis.command.server/aclWhoAmI|aclWhoAmI@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/bgRewriteAof(): kotlin/Boolean // eu.vendeli.rethis.command.server/bgRewriteAof|bgRewriteAof@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/bgSave(kotlin/Boolean? = ...): kotlin/Boolean // eu.vendeli.rethis.command.server/bgSave|bgSave@eu.vendeli.rethis.ReThis(kotlin.Boolean?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/commandCount(): kotlin/Long // eu.vendeli.rethis.command.server/commandCount|commandCount@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/commandDocs(kotlin/Array<out kotlin/String>...): kotlin.collections/Map<kotlin/String, eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.server/commandDocs|commandDocs@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/commandGetKeys(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.server/commandGetKeys|commandGetKeys@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/commandGetKeysAndFlags(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.server/commandGetKeysAndFlags|commandGetKeysAndFlags@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/configRewrite(): kotlin/Boolean // eu.vendeli.rethis.command.server/configRewrite|configRewrite@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/failover(kotlin/Array<out eu.vendeli.rethis.shared.request.server/FailoverOptions>...): kotlin/Boolean // eu.vendeli.rethis.command.server/failover|failover@eu.vendeli.rethis.ReThis(kotlin.Array<out|eu.vendeli.rethis.shared.request.server.FailoverOptions>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/flushAll(eu.vendeli.rethis.shared.request.common/FlushType? = ...): kotlin/Boolean // eu.vendeli.rethis.command.server/flushAll|flushAll@eu.vendeli.rethis.ReThis(eu.vendeli.rethis.shared.request.common.FlushType?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/flushDb(eu.vendeli.rethis.shared.request.common/FlushType? = ...): kotlin/Boolean // eu.vendeli.rethis.command.server/flushDb|flushDb@eu.vendeli.rethis.ReThis(eu.vendeli.rethis.shared.request.common.FlushType?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/lastSave(): kotlin/Long // eu.vendeli.rethis.command.server/lastSave|lastSave@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/latencyDoctor(): kotlin/String // eu.vendeli.rethis.command.server/latencyDoctor|latencyDoctor@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/latencyGraph(kotlin/String): kotlin/String // eu.vendeli.rethis.command.server/latencyGraph|latencyGraph@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/latencyHistogram(kotlin/Array<out kotlin/String>...): kotlin.collections/Map<kotlin/String, eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.server/latencyHistogram|latencyHistogram@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/latencyHistory(kotlin/String): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.server/latencyHistory|latencyHistory@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/latencyLatest(): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.server/latencyLatest|latencyLatest@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/latencyReset(kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.server/latencyReset|latencyReset@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/memoryDoctor(): kotlin/String // eu.vendeli.rethis.command.server/memoryDoctor|memoryDoctor@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/memoryMallocStats(): kotlin/String // eu.vendeli.rethis.command.server/memoryMallocStats|memoryMallocStats@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/memoryPurge(): kotlin/Boolean // eu.vendeli.rethis.command.server/memoryPurge|memoryPurge@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/memoryStats(): kotlin.collections/Map<kotlin/String, eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.server/memoryStats|memoryStats@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/memoryUsage(kotlin/String, kotlin/Long? = ...): kotlin/Long? // eu.vendeli.rethis.command.server/memoryUsage|memoryUsage@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/moduleList(): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.server/moduleList|moduleList@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/moduleLoad(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin/Boolean // eu.vendeli.rethis.command.server/moduleLoad|moduleLoad@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/moduleLoadEx(kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.server/ModuleOption>...): kotlin/Boolean // eu.vendeli.rethis.command.server/moduleLoadEx|moduleLoadEx@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.server.ModuleOption>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/moduleUnload(kotlin/String): kotlin/Boolean // eu.vendeli.rethis.command.server/moduleUnload|moduleUnload@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/monitor(): eu.vendeli.rethis.shared.types/RType // eu.vendeli.rethis.command.server/monitor|monitor@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/replicaOf(eu.vendeli.rethis.shared.request.server/ReplicaOfArgs): kotlin/Boolean // eu.vendeli.rethis.command.server/replicaOf|replicaOf@eu.vendeli.rethis.ReThis(eu.vendeli.rethis.shared.request.server.ReplicaOfArgs){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/role(): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.server/role|role@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/save(): kotlin/Boolean // eu.vendeli.rethis.command.server/save|save@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/shutdown(eu.vendeli.rethis.shared.request.server/SaveSelector? = ..., kotlin/Array<out eu.vendeli.rethis.shared.request.server/ShutdownOptions>...): kotlin/Boolean // eu.vendeli.rethis.command.server/shutdown|shutdown@eu.vendeli.rethis.ReThis(eu.vendeli.rethis.shared.request.server.SaveSelector?;kotlin.Array<out|eu.vendeli.rethis.shared.request.server.ShutdownOptions>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/slowLogGet(kotlin/Long? = ...): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.server/slowLogGet|slowLogGet@eu.vendeli.rethis.ReThis(kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/slowLogLen(): kotlin/Long // eu.vendeli.rethis.command.server/slowLogLen|slowLogLen@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/slowLogReset(): kotlin/Boolean // eu.vendeli.rethis.command.server/slowLogReset|slowLogReset@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/swapDb(kotlin/Long, kotlin/Long): kotlin/Boolean // eu.vendeli.rethis.command.server/swapDb|swapDb@eu.vendeli.rethis.ReThis(kotlin.Long;kotlin.Long){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.server/time(): kotlin.collections/List<kotlin/Long> // eu.vendeli.rethis.command.server/time|time@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.set/sAdd(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.set/sAdd|sAdd@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.set/sCard(kotlin/String): kotlin/Long // eu.vendeli.rethis.command.set/sCard|sCard@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.set/sDiff(kotlin/Array<out kotlin/String>...): kotlin.collections/Set<kotlin/String> // eu.vendeli.rethis.command.set/sDiff|sDiff@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.set/sDiffStore(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.set/sDiffStore|sDiffStore@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.set/sInter(kotlin/Array<out kotlin/String>...): kotlin.collections/Set<kotlin/String> // eu.vendeli.rethis.command.set/sInter|sInter@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.set/sInterCard(kotlin/Array<out kotlin/String>..., kotlin/Long? = ...): kotlin/Long // eu.vendeli.rethis.command.set/sInterCard|sInterCard@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.set/sInterStore(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.set/sInterStore|sInterStore@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.set/sIsMember(kotlin/String, kotlin/String): kotlin/Boolean // eu.vendeli.rethis.command.set/sIsMember|sIsMember@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.set/sMembers(kotlin/String): kotlin.collections/Set<kotlin/String> // eu.vendeli.rethis.command.set/sMembers|sMembers@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.set/sMisMember(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin.collections/List<kotlin/Boolean> // eu.vendeli.rethis.command.set/sMisMember|sMisMember@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.set/sMove(kotlin/String, kotlin/String, kotlin/String): kotlin/Boolean // eu.vendeli.rethis.command.set/sMove|sMove@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.set/sPop(kotlin/String): kotlin/String? // eu.vendeli.rethis.command.set/sPop|sPop@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.set/sPopCount(kotlin/String, kotlin/Long? = ...): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.set/sPopCount|sPopCount@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.set/sRandMember(kotlin/String): kotlin/String // eu.vendeli.rethis.command.set/sRandMember|sRandMember@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.set/sRandMemberCount(kotlin/String, kotlin/Long? = ...): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.set/sRandMemberCount|sRandMemberCount@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.set/sRem(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.set/sRem|sRem@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.set/sScan(kotlin/String, kotlin/Long, kotlin/Array<out eu.vendeli.rethis.shared.request.set/SScanOption>...): eu.vendeli.rethis.shared.response.common/ScanResult<kotlin/String> // eu.vendeli.rethis.command.set/sScan|sScan@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long;kotlin.Array<out|eu.vendeli.rethis.shared.request.set.SScanOption>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.set/sUnion(kotlin/Array<out kotlin/String>...): kotlin.collections/Set<kotlin/String> // eu.vendeli.rethis.command.set/sUnion|sUnion@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.set/sUnionStore(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.set/sUnionStore|sUnionStore@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/bzMPop(kotlin/Double, eu.vendeli.rethis.shared.request.sortedset/ZPopCommonOption, kotlin/Array<out kotlin/String>..., kotlin/Long? = ...): kotlin.collections/List<eu.vendeli.rethis.shared.response.common/MPopResult>? // eu.vendeli.rethis.command.sortedset/bzMPop|bzMPop@eu.vendeli.rethis.ReThis(kotlin.Double;eu.vendeli.rethis.shared.request.sortedset.ZPopCommonOption;kotlin.Array<out|kotlin.String>...;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/bzPopMax(kotlin/Double, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.response.stream/ZPopResult? // eu.vendeli.rethis.command.sortedset/bzPopMax|bzPopMax@eu.vendeli.rethis.ReThis(kotlin.Double;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/bzPopMin(kotlin/Double, kotlin/Array<out kotlin/String>...): eu.vendeli.rethis.shared.response.stream/ZPopResult? // eu.vendeli.rethis.command.sortedset/bzPopMin|bzPopMin@eu.vendeli.rethis.ReThis(kotlin.Double;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zAdd(kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.response.stream/ZMember>..., eu.vendeli.rethis.shared.request.common/UpdateStrategyOption.ExistenceRule? = ..., eu.vendeli.rethis.shared.request.common/UpdateStrategyOption.ComparisonRule? = ..., kotlin/Boolean? = ...): kotlin/Long? // eu.vendeli.rethis.command.sortedset/zAdd|zAdd@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.response.stream.ZMember>...;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption.ExistenceRule?;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption.ComparisonRule?;kotlin.Boolean?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zAddExtended(kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.response.stream/ZMember>..., eu.vendeli.rethis.shared.request.common/UpdateStrategyOption.ExistenceRule? = ..., eu.vendeli.rethis.shared.request.common/UpdateStrategyOption.ComparisonRule? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ...): kotlin/Double? // eu.vendeli.rethis.command.sortedset/zAddExtended|zAddExtended@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.response.stream.ZMember>...;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption.ExistenceRule?;eu.vendeli.rethis.shared.request.common.UpdateStrategyOption.ComparisonRule?;kotlin.Boolean?;kotlin.Boolean?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zCard(kotlin/String): kotlin/Long // eu.vendeli.rethis.command.sortedset/zCard|zCard@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zCount(kotlin/String, kotlin/Double, kotlin/Double): kotlin/Long // eu.vendeli.rethis.command.sortedset/zCount|zCount@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Double;kotlin.Double){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zDiff(kotlin/Array<out kotlin/String>..., kotlin/Boolean? = ...): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.sortedset/zDiff|zDiff@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...;kotlin.Boolean?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zDiffStore(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.sortedset/zDiffStore|zDiffStore@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zIncrBy(kotlin/String, kotlin/String, kotlin/Long): kotlin/Double // eu.vendeli.rethis.command.sortedset/zIncrBy|zIncrBy@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.Long){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zInter(kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/Long>? = ..., eu.vendeli.rethis.shared.request.sortedset/ZAggregate? = ..., kotlin/Boolean? = ...): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.sortedset/zInter|zInter@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.Long>?;eu.vendeli.rethis.shared.request.sortedset.ZAggregate?;kotlin.Boolean?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zInterCard(kotlin/Array<out kotlin/String>..., kotlin/Long? = ...): kotlin/Long // eu.vendeli.rethis.command.sortedset/zInterCard|zInterCard@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zInterStore(kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/Long>? = ..., eu.vendeli.rethis.shared.request.sortedset/ZAggregate? = ...): kotlin/Long // eu.vendeli.rethis.command.sortedset/zInterStore|zInterStore@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.Long>?;eu.vendeli.rethis.shared.request.sortedset.ZAggregate?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zLexCount(kotlin/String, kotlin/String, kotlin/String): kotlin/Long // eu.vendeli.rethis.command.sortedset/zLexCount|zLexCount@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zMPop(eu.vendeli.rethis.shared.request.sortedset/ZPopCommonOption, kotlin/Array<out kotlin/String>..., kotlin/Long? = ...): kotlin.collections/List<eu.vendeli.rethis.shared.response.common/MPopResult>? // eu.vendeli.rethis.command.sortedset/zMPop|zMPop@eu.vendeli.rethis.ReThis(eu.vendeli.rethis.shared.request.sortedset.ZPopCommonOption;kotlin.Array<out|kotlin.String>...;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zMScore(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType>? // eu.vendeli.rethis.command.sortedset/zMScore|zMScore@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zPopMax(kotlin/String, kotlin/Long? = ...): kotlin.collections/List<eu.vendeli.rethis.shared.response.common/MPopResult> // eu.vendeli.rethis.command.sortedset/zPopMax|zPopMax@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zPopMin(kotlin/String, kotlin/Long? = ...): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.sortedset/zPopMin|zPopMin@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zRandMember(kotlin/String): kotlin/String // eu.vendeli.rethis.command.sortedset/zRandMember|zRandMember@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zRandMemberCount(kotlin/String, kotlin/Long, kotlin/Boolean? = ...): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.sortedset/zRandMemberCount|zRandMemberCount@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long;kotlin.Boolean?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zRange(kotlin/String, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.sortedset/ZRangeOption.Type? = ..., kotlin/Boolean? = ..., eu.vendeli.rethis.shared.request.sortedset/ZRangeOption.Limit? = ..., kotlin/Boolean? = ...): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.sortedset/zRange|zRange@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.sortedset.ZRangeOption.Type?;kotlin.Boolean?;eu.vendeli.rethis.shared.request.sortedset.ZRangeOption.Limit?;kotlin.Boolean?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zRangeStore(kotlin/String, kotlin/String, kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.sortedset/ZRangeOption.Type? = ..., kotlin/Boolean? = ..., eu.vendeli.rethis.shared.request.sortedset/ZRangeStoreLimit? = ...): kotlin/Long // eu.vendeli.rethis.command.sortedset/zRangeStore|zRangeStore@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.sortedset.ZRangeOption.Type?;kotlin.Boolean?;eu.vendeli.rethis.shared.request.sortedset.ZRangeStoreLimit?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zRank(kotlin/String, kotlin/String): kotlin/Long? // eu.vendeli.rethis.command.sortedset/zRank|zRank@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zRankWithScores(kotlin/String, kotlin/String, kotlin/Boolean? = ...): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType>? // eu.vendeli.rethis.command.sortedset/zRankWithScores|zRankWithScores@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.Boolean?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zRem(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.sortedset/zRem|zRem@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zRemRangeByLex(kotlin/String, kotlin/String, kotlin/String): kotlin/Long // eu.vendeli.rethis.command.sortedset/zRemRangeByLex|zRemRangeByLex@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zRemRangeByRank(kotlin/String, kotlin/Long, kotlin/Long): kotlin/Long // eu.vendeli.rethis.command.sortedset/zRemRangeByRank|zRemRangeByRank@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long;kotlin.Long){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zRemRangeByScore(kotlin/String, kotlin/Double, kotlin/Double): kotlin/Long // eu.vendeli.rethis.command.sortedset/zRemRangeByScore|zRemRangeByScore@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Double;kotlin.Double){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zRevRank(kotlin/String, kotlin/String): kotlin/Long? // eu.vendeli.rethis.command.sortedset/zRevRank|zRevRank@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zRevRankWithScore(kotlin/String, kotlin/String, kotlin/Boolean): kotlin.collections/List<kotlin/Long>? // eu.vendeli.rethis.command.sortedset/zRevRankWithScore|zRevRankWithScore@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.Boolean){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zScan(kotlin/String, kotlin/Long, kotlin/String? = ..., kotlin/Long? = ...): eu.vendeli.rethis.shared.response.common/ScanResult<kotlin/Pair<kotlin/String, kotlin/String>> // eu.vendeli.rethis.command.sortedset/zScan|zScan@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long;kotlin.String?;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zScore(kotlin/String, kotlin/String): kotlin/Double? // eu.vendeli.rethis.command.sortedset/zScore|zScore@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zUnion(kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/Long>? = ..., eu.vendeli.rethis.shared.request.sortedset/ZAggregate? = ..., kotlin/Boolean? = ...): kotlin.collections/List<kotlin/String> // eu.vendeli.rethis.command.sortedset/zUnion|zUnion@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.Long>?;eu.vendeli.rethis.shared.request.sortedset.ZAggregate?;kotlin.Boolean?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.sortedset/zUnionStore(kotlin/String, kotlin/Array<out kotlin/String>..., kotlin.collections/List<kotlin/Long>? = ..., eu.vendeli.rethis.shared.request.sortedset/ZAggregate? = ...): kotlin/Long // eu.vendeli.rethis.command.sortedset/zUnionStore|zUnionStore@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...;kotlin.collections.List<kotlin.Long>?;eu.vendeli.rethis.shared.request.sortedset.ZAggregate?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.stream/xAck(kotlin/String, kotlin/String, kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.stream/xAck|xAck@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.stream/xAdd(kotlin/String, kotlin/Boolean? = ..., eu.vendeli.rethis.shared.request.stream/XAddOption.Trim? = ..., eu.vendeli.rethis.shared.request.stream/XAddOption.Identifier, kotlin/Array<out eu.vendeli.rethis.shared.request.common/FieldValue>...): kotlin/String? // eu.vendeli.rethis.command.stream/xAdd|xAdd@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Boolean?;eu.vendeli.rethis.shared.request.stream.XAddOption.Trim?;eu.vendeli.rethis.shared.request.stream.XAddOption.Identifier;kotlin.Array<out|eu.vendeli.rethis.shared.request.common.FieldValue>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.stream/xAutoClaim(kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/Long? = ..., kotlin/Boolean? = ...): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.stream/xAutoClaim|xAutoClaim@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.Long?;kotlin.Boolean?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.stream/xClaim(kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/Array<out kotlin/String>..., eu.vendeli.rethis.shared.request.stream/XClaimOption.Idle? = ..., eu.vendeli.rethis.shared.request.stream/XClaimOption.Time? = ..., eu.vendeli.rethis.shared.request.stream/XClaimOption.RetryCount? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ..., eu.vendeli.rethis.shared.request.stream/XClaimOption.LastId? = ...): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.stream/xClaim|xClaim@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.Array<out|kotlin.String>...;eu.vendeli.rethis.shared.request.stream.XClaimOption.Idle?;eu.vendeli.rethis.shared.request.stream.XClaimOption.Time?;eu.vendeli.rethis.shared.request.stream.XClaimOption.RetryCount?;kotlin.Boolean?;kotlin.Boolean?;eu.vendeli.rethis.shared.request.stream.XClaimOption.LastId?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.stream/xDel(kotlin/String, kotlin/Array<out kotlin/String>...): kotlin/Long // eu.vendeli.rethis.command.stream/xDel|xDel@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.stream/xGroupCreate(kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.stream/XId, kotlin/Boolean? = ..., kotlin/Long? = ...): kotlin/Boolean // eu.vendeli.rethis.command.stream/xGroupCreate|xGroupCreate@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.stream.XId;kotlin.Boolean?;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.stream/xGroupCreateConsumer(kotlin/String, kotlin/String, kotlin/String): kotlin/Long // eu.vendeli.rethis.command.stream/xGroupCreateConsumer|xGroupCreateConsumer@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.stream/xGroupDelConsumer(kotlin/String, kotlin/String, kotlin/String): kotlin/Long // eu.vendeli.rethis.command.stream/xGroupDelConsumer|xGroupDelConsumer@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.stream/xGroupDestroy(kotlin/String, kotlin/String): kotlin/Long // eu.vendeli.rethis.command.stream/xGroupDestroy|xGroupDestroy@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.stream/xGroupSetId(kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.stream/XId, kotlin/Long? = ...): kotlin/Boolean // eu.vendeli.rethis.command.stream/xGroupSetId|xGroupSetId@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.stream.XId;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.stream/xInfoConsumers(kotlin/String, kotlin/String): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.stream/xInfoConsumers|xInfoConsumers@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.stream/xInfoGroups(kotlin/String): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.stream/xInfoGroups|xInfoGroups@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.stream/xInfoStream(kotlin/String, kotlin/Boolean? = ..., kotlin/Long? = ...): kotlin.collections/Map<kotlin/String, eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.stream/xInfoStream|xInfoStream@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Boolean?;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.stream/xLen(kotlin/String): kotlin/Long // eu.vendeli.rethis.command.stream/xLen|xLen@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.stream/xPending(kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.stream/XPendingMainFilter? = ...): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.stream/xPending|xPending@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.stream.XPendingMainFilter?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.stream/xRange(kotlin/String, kotlin/String, kotlin/String, kotlin/Long? = ...): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.stream/xRange|xRange@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.String;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.stream/xRead(kotlin.collections/List<kotlin/String>, kotlin.collections/List<kotlin/String>, kotlin/Long? = ..., kotlin/Long? = ...): kotlin.collections/Map<kotlin/String, eu.vendeli.rethis.shared.types/RType>? // eu.vendeli.rethis.command.stream/xRead|xRead@eu.vendeli.rethis.ReThis(kotlin.collections.List<kotlin.String>;kotlin.collections.List<kotlin.String>;kotlin.Long?;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.stream/xReadGroup(kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.stream/XReadGroupKeyIds, kotlin/Array<out eu.vendeli.rethis.shared.request.stream/XReadGroupOption>...): kotlin.collections/Map<kotlin/String, eu.vendeli.rethis.shared.types/RType>? // eu.vendeli.rethis.command.stream/xReadGroup|xReadGroup@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.stream.XReadGroupKeyIds;kotlin.Array<out|eu.vendeli.rethis.shared.request.stream.XReadGroupOption>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.stream/xRevRange(kotlin/String, kotlin/String, kotlin/String, kotlin/Long? = ...): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType> // eu.vendeli.rethis.command.stream/xRevRange|xRevRange@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.String;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.stream/xSetId(kotlin/String, kotlin/String, kotlin/Long? = ..., kotlin/String? = ...): kotlin/Boolean // eu.vendeli.rethis.command.stream/xSetId|xSetId@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.Long?;kotlin.String?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.stream/xTrim(kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.stream/TrimmingStrategy, eu.vendeli.rethis.shared.request.stream/Exactement? = ..., kotlin/Long? = ...): kotlin/Long // eu.vendeli.rethis.command.stream/xTrim|xTrim@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.stream.TrimmingStrategy;eu.vendeli.rethis.shared.request.stream.Exactement?;kotlin.Long?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.string/append(kotlin/String, kotlin/String): kotlin/Long // eu.vendeli.rethis.command.string/append|append@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.string/decr(kotlin/String): kotlin/Long // eu.vendeli.rethis.command.string/decr|decr@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.string/decrBy(kotlin/String, kotlin/Long): kotlin/Long // eu.vendeli.rethis.command.string/decrBy|decrBy@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.string/get(kotlin/String): kotlin/String? // eu.vendeli.rethis.command.string/get|get@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.string/getDel(kotlin/String): kotlin/String? // eu.vendeli.rethis.command.string/getDel|getDel@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.string/getEx(kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.string/GetExOption>...): kotlin/String? // eu.vendeli.rethis.command.string/getEx|getEx@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.string.GetExOption>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.string/getRange(kotlin/String, kotlin/Long, kotlin/Long): kotlin/String // eu.vendeli.rethis.command.string/getRange|getRange@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long;kotlin.Long){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.string/incr(kotlin/String): kotlin/Long // eu.vendeli.rethis.command.string/incr|incr@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.string/incrBy(kotlin/String, kotlin/Long): kotlin/Long // eu.vendeli.rethis.command.string/incrBy|incrBy@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.string/incrByFloat(kotlin/String, kotlin/Double): kotlin/Double // eu.vendeli.rethis.command.string/incrByFloat|incrByFloat@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Double){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.string/lcs(kotlin/String, kotlin/String): kotlin/String // eu.vendeli.rethis.command.string/lcs|lcs@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.string/lcsDetailed(kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.string/LcsMode.IDX, eu.vendeli.rethis.shared.request.string/MinMatchLen? = ..., kotlin/Boolean? = ...): eu.vendeli.rethis.shared.response.string/LcsResult // eu.vendeli.rethis.command.string/lcsDetailed|lcsDetailed@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.string.LcsMode.IDX;eu.vendeli.rethis.shared.request.string.MinMatchLen?;kotlin.Boolean?){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.string/lcsLength(kotlin/String, kotlin/String, eu.vendeli.rethis.shared.request.string/LcsMode.LEN): kotlin/Long // eu.vendeli.rethis.command.string/lcsLength|lcsLength@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;eu.vendeli.rethis.shared.request.string.LcsMode.LEN){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.string/mGet(kotlin/Array<out kotlin/String>...): kotlin.collections/List<kotlin/String?> // eu.vendeli.rethis.command.string/mGet|mGet@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.string/mSet(kotlin/Array<out eu.vendeli.rethis.shared.request.string/KeyValue>...): kotlin/Boolean // eu.vendeli.rethis.command.string/mSet|mSet@eu.vendeli.rethis.ReThis(kotlin.Array<out|eu.vendeli.rethis.shared.request.string.KeyValue>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.string/mSetNx(kotlin/Array<out eu.vendeli.rethis.shared.request.string/KeyValue>...): kotlin/Boolean // eu.vendeli.rethis.command.string/mSetNx|mSetNx@eu.vendeli.rethis.ReThis(kotlin.Array<out|eu.vendeli.rethis.shared.request.string.KeyValue>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.string/set(kotlin/String, kotlin/String, kotlin/Array<out eu.vendeli.rethis.shared.request.string/SetOption>...): kotlin/String? // eu.vendeli.rethis.command.string/set|set@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.String;kotlin.Array<out|eu.vendeli.rethis.shared.request.string.SetOption>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.string/setRange(kotlin/String, kotlin/Long, kotlin/String): kotlin/Long // eu.vendeli.rethis.command.string/setRange|setRange@eu.vendeli.rethis.ReThis(kotlin.String;kotlin.Long;kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.string/strlen(kotlin/String): kotlin/Long // eu.vendeli.rethis.command.string/strlen|strlen@eu.vendeli.rethis.ReThis(kotlin.String){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.transaction/discard(): kotlin/Boolean // eu.vendeli.rethis.command.transaction/discard|discard@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.transaction/exec(): kotlin.collections/List<eu.vendeli.rethis.shared.types/RType>? // eu.vendeli.rethis.command.transaction/exec|exec@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.transaction/multi(): kotlin/Boolean // eu.vendeli.rethis.command.transaction/multi|multi@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.transaction/unwatch(): kotlin/Boolean // eu.vendeli.rethis.command.transaction/unwatch|unwatch@eu.vendeli.rethis.ReThis(){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.command.transaction/watch(kotlin/Array<out kotlin/String>...): kotlin/Boolean // eu.vendeli.rethis.command.transaction/watch|watch@eu.vendeli.rethis.ReThis(kotlin.Array<out|kotlin.String>...){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.utils/execute(kotlin/Function1<kotlin.collections/MutableList<kotlin/Any?>, kotlin/Unit>): kotlinx.io/Buffer // eu.vendeli.rethis.utils/execute|execute@eu.vendeli.rethis.ReThis(kotlin.Function1<kotlin.collections.MutableList<kotlin.Any?>,kotlin.Unit>){}[0]
final suspend fun (eu.vendeli.rethis/ReThis).eu.vendeli.rethis.utils/execute(kotlinx.io/Buffer, eu.vendeli.rethis.shared.types/RedisOperation = ..., kotlin/Boolean = ...): kotlinx.io/Buffer // eu.vendeli.rethis.utils/execute|execute@eu.vendeli.rethis.ReThis(kotlinx.io.Buffer;eu.vendeli.rethis.shared.types.RedisOperation;kotlin.Boolean){}[0]
